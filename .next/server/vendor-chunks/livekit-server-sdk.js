"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/livekit-server-sdk";
exports.ids = ["vendor-chunks/livekit-server-sdk"];
exports.modules = {

/***/ "(ssr)/./node_modules/livekit-server-sdk/dist/AccessToken.js":
/*!*************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/AccessToken.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TokenVerifier = exports.AccessToken = void 0;\nconst jwt = __importStar(__webpack_require__(/*! jsonwebtoken */ \"(ssr)/./node_modules/jsonwebtoken/index.js\"));\n// 6 hours\nconst defaultTTL = 6 * 60 * 60;\nclass AccessToken {\n    /**\n     * Creates a new AccessToken\n     * @param apiKey API Key, can be set in env LIVEKIT_API_KEY\n     * @param apiSecret Secret, can be set in env LIVEKIT_API_SECRET\n     */\n    constructor(apiKey, apiSecret, options) {\n        if (!apiKey) {\n            apiKey = process.env.LIVEKIT_API_KEY;\n        }\n        if (!apiSecret) {\n            apiSecret = process.env.LIVEKIT_API_SECRET;\n        }\n        if (!apiKey || !apiSecret) {\n            throw Error('api-key and api-secret must be set');\n        }\n        else if (typeof document !== 'undefined') {\n            // check against document rather than window because deno provides window\n            console.error('You should not include your API secret in your web client bundle.\\n\\n' +\n                'Your web client should request a token from your backend server which should then use ' +\n                'the API secret to generate a token. See https://docs.livekit.io/client/connect/');\n        }\n        this.apiKey = apiKey;\n        this.apiSecret = apiSecret;\n        this.grants = {};\n        this.identity = options === null || options === void 0 ? void 0 : options.identity;\n        this.ttl = (options === null || options === void 0 ? void 0 : options.ttl) || defaultTTL;\n        if (options === null || options === void 0 ? void 0 : options.metadata) {\n            this.metadata = options.metadata;\n        }\n        if (options === null || options === void 0 ? void 0 : options.name) {\n            this.name = options.name;\n        }\n    }\n    /**\n     * Adds a video grant to this token.\n     * @param grant\n     */\n    addGrant(grant) {\n        this.grants.video = grant;\n    }\n    /**\n     * Set metadata to be passed to the Participant, used only when joining the room\n     */\n    set metadata(md) {\n        this.grants.metadata = md;\n    }\n    set name(name) {\n        this.grants.name = name;\n    }\n    get sha256() {\n        return this.grants.sha256;\n    }\n    set sha256(sha) {\n        this.grants.sha256 = sha;\n    }\n    /**\n     * @returns JWT encoded token\n     */\n    toJwt() {\n        // TODO: check for video grant validity\n        var _a;\n        const opts = {\n            issuer: this.apiKey,\n            expiresIn: this.ttl,\n            notBefore: 0,\n        };\n        if (this.identity) {\n            opts.subject = this.identity;\n            opts.jwtid = this.identity;\n        }\n        else if ((_a = this.grants.video) === null || _a === void 0 ? void 0 : _a.roomJoin) {\n            throw Error('identity is required for join but not set');\n        }\n        return jwt.sign(this.grants, this.apiSecret, opts);\n    }\n}\nexports.AccessToken = AccessToken;\nclass TokenVerifier {\n    constructor(apiKey, apiSecret) {\n        this.apiKey = apiKey;\n        this.apiSecret = apiSecret;\n    }\n    verify(token) {\n        const decoded = jwt.verify(token, this.apiSecret, { issuer: this.apiKey });\n        if (!decoded) {\n            throw Error('invalid token');\n        }\n        return decoded;\n    }\n}\nexports.TokenVerifier = TokenVerifier;\n//# sourceMappingURL=AccessToken.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGl2ZWtpdC1zZXJ2ZXItc2RrL2Rpc3QvQWNjZXNzVG9rZW4uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0EsbUNBQW1DLG9DQUFvQyxnQkFBZ0I7QUFDdkYsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSwwQ0FBMEMsNEJBQTRCO0FBQ3RFLENBQUM7QUFDRDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUIsR0FBRyxtQkFBbUI7QUFDM0MseUJBQXlCLG1CQUFPLENBQUMsZ0VBQWM7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNERBQTRELHFCQUFxQjtBQUNqRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saXZlc3RyZWFtLy4vbm9kZV9tb2R1bGVzL2xpdmVraXQtc2VydmVyLXNkay9kaXN0L0FjY2Vzc1Rva2VuLmpzP2QyNWUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVG9rZW5WZXJpZmllciA9IGV4cG9ydHMuQWNjZXNzVG9rZW4gPSB2b2lkIDA7XG5jb25zdCBqd3QgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcImpzb253ZWJ0b2tlblwiKSk7XG4vLyA2IGhvdXJzXG5jb25zdCBkZWZhdWx0VFRMID0gNiAqIDYwICogNjA7XG5jbGFzcyBBY2Nlc3NUb2tlbiB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBBY2Nlc3NUb2tlblxuICAgICAqIEBwYXJhbSBhcGlLZXkgQVBJIEtleSwgY2FuIGJlIHNldCBpbiBlbnYgTElWRUtJVF9BUElfS0VZXG4gICAgICogQHBhcmFtIGFwaVNlY3JldCBTZWNyZXQsIGNhbiBiZSBzZXQgaW4gZW52IExJVkVLSVRfQVBJX1NFQ1JFVFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGFwaUtleSwgYXBpU2VjcmV0LCBvcHRpb25zKSB7XG4gICAgICAgIGlmICghYXBpS2V5KSB7XG4gICAgICAgICAgICBhcGlLZXkgPSBwcm9jZXNzLmVudi5MSVZFS0lUX0FQSV9LRVk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFhcGlTZWNyZXQpIHtcbiAgICAgICAgICAgIGFwaVNlY3JldCA9IHByb2Nlc3MuZW52LkxJVkVLSVRfQVBJX1NFQ1JFVDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWFwaUtleSB8fCAhYXBpU2VjcmV0KSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcignYXBpLWtleSBhbmQgYXBpLXNlY3JldCBtdXN0IGJlIHNldCcpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIC8vIGNoZWNrIGFnYWluc3QgZG9jdW1lbnQgcmF0aGVyIHRoYW4gd2luZG93IGJlY2F1c2UgZGVubyBwcm92aWRlcyB3aW5kb3dcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1lvdSBzaG91bGQgbm90IGluY2x1ZGUgeW91ciBBUEkgc2VjcmV0IGluIHlvdXIgd2ViIGNsaWVudCBidW5kbGUuXFxuXFxuJyArXG4gICAgICAgICAgICAgICAgJ1lvdXIgd2ViIGNsaWVudCBzaG91bGQgcmVxdWVzdCBhIHRva2VuIGZyb20geW91ciBiYWNrZW5kIHNlcnZlciB3aGljaCBzaG91bGQgdGhlbiB1c2UgJyArXG4gICAgICAgICAgICAgICAgJ3RoZSBBUEkgc2VjcmV0IHRvIGdlbmVyYXRlIGEgdG9rZW4uIFNlZSBodHRwczovL2RvY3MubGl2ZWtpdC5pby9jbGllbnQvY29ubmVjdC8nKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFwaUtleSA9IGFwaUtleTtcbiAgICAgICAgdGhpcy5hcGlTZWNyZXQgPSBhcGlTZWNyZXQ7XG4gICAgICAgIHRoaXMuZ3JhbnRzID0ge307XG4gICAgICAgIHRoaXMuaWRlbnRpdHkgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuaWRlbnRpdHk7XG4gICAgICAgIHRoaXMudHRsID0gKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy50dGwpIHx8IGRlZmF1bHRUVEw7XG4gICAgICAgIGlmIChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMubWV0YWRhdGEpIHtcbiAgICAgICAgICAgIHRoaXMubWV0YWRhdGEgPSBvcHRpb25zLm1ldGFkYXRhO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMubmFtZSkge1xuICAgICAgICAgICAgdGhpcy5uYW1lID0gb3B0aW9ucy5uYW1lO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZHMgYSB2aWRlbyBncmFudCB0byB0aGlzIHRva2VuLlxuICAgICAqIEBwYXJhbSBncmFudFxuICAgICAqL1xuICAgIGFkZEdyYW50KGdyYW50KSB7XG4gICAgICAgIHRoaXMuZ3JhbnRzLnZpZGVvID0gZ3JhbnQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCBtZXRhZGF0YSB0byBiZSBwYXNzZWQgdG8gdGhlIFBhcnRpY2lwYW50LCB1c2VkIG9ubHkgd2hlbiBqb2luaW5nIHRoZSByb29tXG4gICAgICovXG4gICAgc2V0IG1ldGFkYXRhKG1kKSB7XG4gICAgICAgIHRoaXMuZ3JhbnRzLm1ldGFkYXRhID0gbWQ7XG4gICAgfVxuICAgIHNldCBuYW1lKG5hbWUpIHtcbiAgICAgICAgdGhpcy5ncmFudHMubmFtZSA9IG5hbWU7XG4gICAgfVxuICAgIGdldCBzaGEyNTYoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdyYW50cy5zaGEyNTY7XG4gICAgfVxuICAgIHNldCBzaGEyNTYoc2hhKSB7XG4gICAgICAgIHRoaXMuZ3JhbnRzLnNoYTI1NiA9IHNoYTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgSldUIGVuY29kZWQgdG9rZW5cbiAgICAgKi9cbiAgICB0b0p3dCgpIHtcbiAgICAgICAgLy8gVE9ETzogY2hlY2sgZm9yIHZpZGVvIGdyYW50IHZhbGlkaXR5XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3Qgb3B0cyA9IHtcbiAgICAgICAgICAgIGlzc3VlcjogdGhpcy5hcGlLZXksXG4gICAgICAgICAgICBleHBpcmVzSW46IHRoaXMudHRsLFxuICAgICAgICAgICAgbm90QmVmb3JlOiAwLFxuICAgICAgICB9O1xuICAgICAgICBpZiAodGhpcy5pZGVudGl0eSkge1xuICAgICAgICAgICAgb3B0cy5zdWJqZWN0ID0gdGhpcy5pZGVudGl0eTtcbiAgICAgICAgICAgIG9wdHMuand0aWQgPSB0aGlzLmlkZW50aXR5O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKChfYSA9IHRoaXMuZ3JhbnRzLnZpZGVvKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Eucm9vbUpvaW4pIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdpZGVudGl0eSBpcyByZXF1aXJlZCBmb3Igam9pbiBidXQgbm90IHNldCcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBqd3Quc2lnbih0aGlzLmdyYW50cywgdGhpcy5hcGlTZWNyZXQsIG9wdHMpO1xuICAgIH1cbn1cbmV4cG9ydHMuQWNjZXNzVG9rZW4gPSBBY2Nlc3NUb2tlbjtcbmNsYXNzIFRva2VuVmVyaWZpZXIge1xuICAgIGNvbnN0cnVjdG9yKGFwaUtleSwgYXBpU2VjcmV0KSB7XG4gICAgICAgIHRoaXMuYXBpS2V5ID0gYXBpS2V5O1xuICAgICAgICB0aGlzLmFwaVNlY3JldCA9IGFwaVNlY3JldDtcbiAgICB9XG4gICAgdmVyaWZ5KHRva2VuKSB7XG4gICAgICAgIGNvbnN0IGRlY29kZWQgPSBqd3QudmVyaWZ5KHRva2VuLCB0aGlzLmFwaVNlY3JldCwgeyBpc3N1ZXI6IHRoaXMuYXBpS2V5IH0pO1xuICAgICAgICBpZiAoIWRlY29kZWQpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdpbnZhbGlkIHRva2VuJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlY29kZWQ7XG4gICAgfVxufVxuZXhwb3J0cy5Ub2tlblZlcmlmaWVyID0gVG9rZW5WZXJpZmllcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFjY2Vzc1Rva2VuLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/livekit-server-sdk/dist/AccessToken.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/livekit-server-sdk/dist/EgressClient.js":
/*!**************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/EgressClient.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.EgressClient = void 0;\nconst livekit_egress_1 = __webpack_require__(/*! ./proto/livekit_egress */ \"(ssr)/./node_modules/livekit-server-sdk/dist/proto/livekit_egress.js\");\nconst ServiceBase_1 = __importDefault(__webpack_require__(/*! ./ServiceBase */ \"(ssr)/./node_modules/livekit-server-sdk/dist/ServiceBase.js\"));\nconst TwirpRPC_1 = __webpack_require__(/*! ./TwirpRPC */ \"(ssr)/./node_modules/livekit-server-sdk/dist/TwirpRPC.js\");\nconst svc = 'Egress';\n/**\n * Client to access Egress APIs\n */\nclass EgressClient extends ServiceBase_1.default {\n    /**\n     * @param host hostname including protocol. i.e. 'https://cluster.livekit.io'\n     * @param apiKey API Key, can be set in env var LIVEKIT_API_KEY\n     * @param secret API Secret, can be set in env var LIVEKIT_API_SECRET\n     */\n    constructor(host, apiKey, secret) {\n        super(apiKey, secret);\n        this.rpc = new TwirpRPC_1.TwirpRpc(host, TwirpRPC_1.livekitPackage);\n    }\n    startRoomCompositeEgress(roomName, output, optsOrLayout, options, audioOnly, videoOnly, customBaseUrl) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let layout;\n            if (optsOrLayout !== undefined) {\n                if (typeof optsOrLayout === 'string') {\n                    layout = optsOrLayout;\n                }\n                else {\n                    const opts = optsOrLayout;\n                    layout = opts.layout;\n                    options = opts.encodingOptions;\n                    audioOnly = opts.audioOnly;\n                    videoOnly = opts.videoOnly;\n                    customBaseUrl = opts.customBaseUrl;\n                }\n            }\n            layout !== null && layout !== void 0 ? layout : (layout = '');\n            audioOnly !== null && audioOnly !== void 0 ? audioOnly : (audioOnly = false);\n            videoOnly !== null && videoOnly !== void 0 ? videoOnly : (videoOnly = false);\n            customBaseUrl !== null && customBaseUrl !== void 0 ? customBaseUrl : (customBaseUrl = '');\n            const { file, stream, segments, preset, advanced, fileOutputs, streamOutputs, segmentOutputs } = this.getOutputParams(output, options);\n            const req = livekit_egress_1.RoomCompositeEgressRequest.toJSON({\n                roomName,\n                layout,\n                audioOnly,\n                videoOnly,\n                customBaseUrl,\n                file,\n                stream,\n                segments,\n                preset,\n                advanced,\n                fileOutputs,\n                streamOutputs,\n                segmentOutputs,\n            });\n            const data = yield this.rpc.request(svc, 'StartRoomCompositeEgress', req, this.authHeader({ roomRecord: true }));\n            return livekit_egress_1.EgressInfo.fromJSON(data);\n        });\n    }\n    /**\n     * @param url url\n     * @param output file or stream output\n     * @param opts WebOptions\n     */\n    startWebEgress(url, output, opts) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const audioOnly = (opts === null || opts === void 0 ? void 0 : opts.audioOnly) || false;\n            const videoOnly = (opts === null || opts === void 0 ? void 0 : opts.videoOnly) || false;\n            const awaitStartSignal = (opts === null || opts === void 0 ? void 0 : opts.awaitStartSignal) || false;\n            const { file, stream, segments, preset, advanced, fileOutputs, streamOutputs, segmentOutputs } = this.getOutputParams(output, opts === null || opts === void 0 ? void 0 : opts.encodingOptions);\n            const req = livekit_egress_1.WebEgressRequest.toJSON({\n                url,\n                audioOnly,\n                videoOnly,\n                awaitStartSignal,\n                file,\n                stream,\n                segments,\n                preset,\n                advanced,\n                fileOutputs,\n                streamOutputs,\n                segmentOutputs,\n            });\n            const data = yield this.rpc.request(svc, 'StartWebEgress', req, this.authHeader({ roomRecord: true }));\n            return livekit_egress_1.EgressInfo.fromJSON(data);\n        });\n    }\n    /**\n     * Export a participant's audio and video tracks,\n     *\n     * @param roomName room name\n     * @param output one or more outputs\n     * @param opts ParticipantEgressOptions\n     */\n    startParticipantEgress(roomName, identity, output, opts) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { preset, advanced, fileOutputs, streamOutputs, segmentOutputs } = this.getOutputParams(output, opts === null || opts === void 0 ? void 0 : opts.encodingOptions);\n            const req = livekit_egress_1.ParticipantEgressRequest.toJSON({\n                roomName,\n                identity,\n                preset,\n                advanced,\n                fileOutputs,\n                streamOutputs,\n                segmentOutputs,\n            });\n            const data = yield this.rpc.request(svc, 'StartParticipantEgress', req, this.authHeader({ roomRecord: true }));\n            return livekit_egress_1.EgressInfo.fromJSON(data);\n        });\n    }\n    startTrackCompositeEgress(roomName, output, optsOrAudioTrackId, videoTrackId, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let audioTrackId;\n            if (optsOrAudioTrackId !== undefined) {\n                if (typeof optsOrAudioTrackId === 'string') {\n                    audioTrackId = optsOrAudioTrackId;\n                }\n                else {\n                    const opts = optsOrAudioTrackId;\n                    audioTrackId = opts.audioTrackId;\n                    videoTrackId = opts.videoTrackId;\n                    options = opts.encodingOptions;\n                }\n            }\n            audioTrackId !== null && audioTrackId !== void 0 ? audioTrackId : (audioTrackId = '');\n            videoTrackId !== null && videoTrackId !== void 0 ? videoTrackId : (videoTrackId = '');\n            const { file, stream, segments, preset, advanced, fileOutputs, streamOutputs, segmentOutputs } = this.getOutputParams(output, options);\n            const req = livekit_egress_1.TrackCompositeEgressRequest.toJSON({\n                roomName,\n                audioTrackId,\n                videoTrackId,\n                file,\n                stream,\n                segments,\n                preset,\n                advanced,\n                fileOutputs,\n                streamOutputs,\n                segmentOutputs,\n            });\n            const data = yield this.rpc.request(svc, 'StartTrackCompositeEgress', req, this.authHeader({ roomRecord: true }));\n            return livekit_egress_1.EgressInfo.fromJSON(data);\n        });\n    }\n    isEncodedOutputs(output) {\n        return (output.file !== undefined ||\n            output.stream !== undefined ||\n            output.segments !== undefined);\n    }\n    isEncodedFileOutput(output) {\n        return (output.filepath !== undefined ||\n            output.fileType !== undefined);\n    }\n    isSegmentedFileOutput(output) {\n        return (output.filenamePrefix !== undefined ||\n            output.playlistName !== undefined ||\n            output.filenameSuffix !== undefined);\n    }\n    isStreamOutput(output) {\n        return (output.protocol !== undefined || output.urls !== undefined);\n    }\n    getOutputParams(output, options) {\n        let file;\n        let fileOutputs;\n        let stream;\n        let streamOutputs;\n        let segments;\n        let segmentOutputs;\n        let preset;\n        let advanced;\n        if (this.isEncodedOutputs(output)) {\n            if (output.file !== undefined) {\n                fileOutputs = [output.file];\n            }\n            if (output.stream !== undefined) {\n                streamOutputs = [output.stream];\n            }\n            if (output.segments !== undefined) {\n                segmentOutputs = [output.segments];\n            }\n        }\n        else if (this.isEncodedFileOutput(output)) {\n            file = output;\n            fileOutputs = [file];\n        }\n        else if (this.isSegmentedFileOutput(output)) {\n            segments = output;\n            segmentOutputs = [segments];\n        }\n        else if (this.isStreamOutput(output)) {\n            stream = output;\n            streamOutputs = [stream];\n        }\n        if (options) {\n            if (typeof options === 'number') {\n                preset = options;\n            }\n            else {\n                advanced = options;\n            }\n        }\n        return { file, stream, segments, preset, advanced, fileOutputs, streamOutputs, segmentOutputs };\n    }\n    /**\n     * @param roomName room name\n     * @param output file or websocket output\n     * @param trackId track Id\n     */\n    startTrackEgress(roomName, output, trackId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let file;\n            let websocketUrl;\n            if (typeof output === 'string') {\n                websocketUrl = output;\n            }\n            else {\n                file = output;\n            }\n            const req = livekit_egress_1.TrackEgressRequest.toJSON({\n                roomName,\n                trackId,\n                file,\n                websocketUrl,\n            });\n            const data = yield this.rpc.request(svc, 'StartTrackEgress', req, this.authHeader({ roomRecord: true }));\n            return livekit_egress_1.EgressInfo.fromJSON(data);\n        });\n    }\n    /**\n     * @param egressId\n     * @param layout\n     */\n    updateLayout(egressId, layout) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = yield this.rpc.request(svc, 'UpdateLayout', livekit_egress_1.UpdateLayoutRequest.toJSON({ egressId, layout }), this.authHeader({ roomRecord: true }));\n            return livekit_egress_1.EgressInfo.fromJSON(data);\n        });\n    }\n    /**\n     * @param egressId\n     * @param addOutputUrls\n     * @param removeOutputUrls\n     */\n    updateStream(egressId, addOutputUrls, removeOutputUrls) {\n        return __awaiter(this, void 0, void 0, function* () {\n            addOutputUrls !== null && addOutputUrls !== void 0 ? addOutputUrls : (addOutputUrls = []);\n            removeOutputUrls !== null && removeOutputUrls !== void 0 ? removeOutputUrls : (removeOutputUrls = []);\n            const data = yield this.rpc.request(svc, 'UpdateStream', livekit_egress_1.UpdateStreamRequest.toJSON({ egressId, addOutputUrls, removeOutputUrls }), this.authHeader({ roomRecord: true }));\n            return livekit_egress_1.EgressInfo.fromJSON(data);\n        });\n    }\n    /**\n     * @param roomName list egress for one room only\n     */\n    listEgress(options) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            let req = {};\n            if (typeof options === 'string') {\n                req.roomName = options;\n            }\n            else if (options !== undefined) {\n                req = options;\n            }\n            const data = yield this.rpc.request(svc, 'ListEgress', livekit_egress_1.ListEgressRequest.toJSON(req), this.authHeader({ roomRecord: true }));\n            return (_a = livekit_egress_1.ListEgressResponse.fromJSON(data).items) !== null && _a !== void 0 ? _a : [];\n        });\n    }\n    /**\n     * @param egressId\n     */\n    stopEgress(egressId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = yield this.rpc.request(svc, 'StopEgress', livekit_egress_1.StopEgressRequest.toJSON({ egressId }), this.authHeader({ roomRecord: true }));\n            return livekit_egress_1.EgressInfo.fromJSON(data);\n        });\n    }\n}\nexports.EgressClient = EgressClient;\n//# sourceMappingURL=EgressClient.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/livekit-server-sdk/dist/EgressClient.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/livekit-server-sdk/dist/IngressClient.js":
/*!***************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/IngressClient.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.IngressClient = void 0;\nconst livekit_ingress_1 = __webpack_require__(/*! ./proto/livekit_ingress */ \"(ssr)/./node_modules/livekit-server-sdk/dist/proto/livekit_ingress.js\");\nconst ServiceBase_1 = __importDefault(__webpack_require__(/*! ./ServiceBase */ \"(ssr)/./node_modules/livekit-server-sdk/dist/ServiceBase.js\"));\nconst TwirpRPC_1 = __webpack_require__(/*! ./TwirpRPC */ \"(ssr)/./node_modules/livekit-server-sdk/dist/TwirpRPC.js\");\nconst svc = 'Ingress';\n/**\n * Client to access Ingress APIs\n */\nclass IngressClient extends ServiceBase_1.default {\n    /**\n     * @param host hostname including protocol. i.e. 'https://cluster.livekit.io'\n     * @param apiKey API Key, can be set in env var LIVEKIT_API_KEY\n     * @param secret API Secret, can be set in env var LIVEKIT_API_SECRET\n     */\n    constructor(host, apiKey, secret) {\n        super(apiKey, secret);\n        this.rpc = new TwirpRPC_1.TwirpRpc(host, TwirpRPC_1.livekitPackage);\n    }\n    /**\n     * @param inputType protocol for the ingress\n     * @param opts CreateIngressOptions\n     */\n    createIngress(inputType, opts) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let name = '';\n            let roomName = '';\n            let participantName = '';\n            let participantIdentity = '';\n            let bypassTranscoding = false;\n            let url = '';\n            let audio;\n            let video;\n            if (opts !== undefined) {\n                name = opts.name || '';\n                roomName = opts.roomName || '';\n                participantName = opts.participantName || '';\n                participantIdentity = opts.participantIdentity || '';\n                bypassTranscoding = opts.bypassTranscoding || false;\n                url = opts.url || '';\n                audio = opts.audio;\n                video = opts.video;\n            }\n            const req = livekit_ingress_1.CreateIngressRequest.toJSON({\n                inputType,\n                name,\n                roomName,\n                participantIdentity,\n                participantName,\n                bypassTranscoding,\n                url,\n                audio,\n                video,\n            });\n            const data = yield this.rpc.request(svc, 'CreateIngress', req, this.authHeader({ ingressAdmin: true }));\n            return livekit_ingress_1.IngressInfo.fromJSON(data);\n        });\n    }\n    /**\n     * @param ingressId ID of the ingress to update\n     * @param opts UpdateIngressOptions\n     */\n    updateIngress(ingressId, opts) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const name = opts.name || '';\n            const roomName = opts.roomName || '';\n            const participantName = opts.participantName || '';\n            const participantIdentity = opts.participantIdentity || '';\n            const { audio, video, bypassTranscoding } = opts;\n            const req = livekit_ingress_1.UpdateIngressRequest.toJSON({\n                ingressId,\n                name,\n                roomName,\n                participantIdentity,\n                participantName,\n                bypassTranscoding,\n                audio,\n                video,\n            });\n            const data = yield this.rpc.request(svc, 'UpdateIngress', req, this.authHeader({ ingressAdmin: true }));\n            return livekit_ingress_1.IngressInfo.fromJSON(data);\n        });\n    }\n    listIngress(arg) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            let req = {};\n            if (typeof arg === 'string') {\n                req.roomName = arg;\n            }\n            else if (arg) {\n                req = arg;\n            }\n            const data = yield this.rpc.request(svc, 'ListIngress', livekit_ingress_1.ListIngressRequest.toJSON(req), this.authHeader({ ingressAdmin: true }));\n            return (_a = livekit_ingress_1.ListIngressResponse.fromJSON(data).items) !== null && _a !== void 0 ? _a : [];\n        });\n    }\n    /**\n     * @param ingressId ingress to delete\n     */\n    deleteIngress(ingressId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = yield this.rpc.request(svc, 'DeleteIngress', livekit_ingress_1.DeleteIngressRequest.toJSON({ ingressId }), this.authHeader({ ingressAdmin: true }));\n            return livekit_ingress_1.IngressInfo.fromJSON(data);\n        });\n    }\n}\nexports.IngressClient = IngressClient;\n//# sourceMappingURL=IngressClient.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/livekit-server-sdk/dist/IngressClient.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/livekit-server-sdk/dist/RoomServiceClient.js":
/*!*******************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/RoomServiceClient.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RoomServiceClient = void 0;\nconst livekit_models_1 = __webpack_require__(/*! ./proto/livekit_models */ \"(ssr)/./node_modules/livekit-server-sdk/dist/proto/livekit_models.js\");\nconst livekit_room_1 = __webpack_require__(/*! ./proto/livekit_room */ \"(ssr)/./node_modules/livekit-server-sdk/dist/proto/livekit_room.js\");\nconst ServiceBase_1 = __importDefault(__webpack_require__(/*! ./ServiceBase */ \"(ssr)/./node_modules/livekit-server-sdk/dist/ServiceBase.js\"));\nconst TwirpRPC_1 = __webpack_require__(/*! ./TwirpRPC */ \"(ssr)/./node_modules/livekit-server-sdk/dist/TwirpRPC.js\");\nconst svc = 'RoomService';\n/**\n * Client to access Room APIs\n */\nclass RoomServiceClient extends ServiceBase_1.default {\n    /**\n     *\n     * @param host hostname including protocol. i.e. 'https://cluster.livekit.io'\n     * @param apiKey API Key, can be set in env var LIVEKIT_API_KEY\n     * @param secret API Secret, can be set in env var LIVEKIT_API_SECRET\n     */\n    constructor(host, apiKey, secret) {\n        super(apiKey, secret);\n        this.rpc = new TwirpRPC_1.TwirpRpc(host, TwirpRPC_1.livekitPackage);\n    }\n    /**\n     * Creates a new room. Explicit room creation is not required, since rooms will\n     * be automatically created when the first participant joins. This method can be\n     * used to customize room settings.\n     * @param options\n     */\n    createRoom(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = yield this.rpc.request(svc, 'CreateRoom', livekit_room_1.CreateRoomRequest.toJSON(livekit_room_1.CreateRoomRequest.fromPartial(options)), this.authHeader({ roomCreate: true }));\n            return livekit_models_1.Room.fromJSON(data);\n        });\n    }\n    /**\n     * List active rooms\n     * @param names when undefined or empty, list all rooms.\n     *              otherwise returns rooms with matching names\n     * @returns\n     */\n    listRooms(names) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = yield this.rpc.request(svc, 'ListRooms', livekit_room_1.ListRoomsRequest.toJSON({ names: names !== null && names !== void 0 ? names : [] }), this.authHeader({ roomList: true }));\n            const res = livekit_room_1.ListRoomsResponse.fromJSON(data);\n            return (_a = res.rooms) !== null && _a !== void 0 ? _a : [];\n        });\n    }\n    deleteRoom(room) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.rpc.request(svc, 'DeleteRoom', livekit_room_1.DeleteRoomRequest.toJSON({ room }), this.authHeader({ roomCreate: true }));\n        });\n    }\n    /**\n     * Update metadata of a room\n     * @param room name of the room\n     * @param metadata the new metadata for the room\n     */\n    updateRoomMetadata(room, metadata) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = yield this.rpc.request(svc, 'UpdateRoomMetadata', livekit_room_1.UpdateRoomMetadataRequest.toJSON({ room, metadata }), this.authHeader({ roomAdmin: true, room }));\n            return livekit_models_1.Room.fromJSON(data);\n        });\n    }\n    /**\n     * List participants in a room\n     * @param room name of the room\n     */\n    listParticipants(room) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = yield this.rpc.request(svc, 'ListParticipants', livekit_room_1.ListParticipantsRequest.toJSON({ room }), this.authHeader({ roomAdmin: true, room }));\n            const res = livekit_room_1.ListParticipantsResponse.fromJSON(data);\n            return (_a = res.participants) !== null && _a !== void 0 ? _a : [];\n        });\n    }\n    /**\n     * Get information on a specific participant, including the tracks that participant\n     * has published\n     * @param room name of the room\n     * @param identity identity of the participant to return\n     */\n    getParticipant(room, identity) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = yield this.rpc.request(svc, 'GetParticipant', livekit_room_1.RoomParticipantIdentity.toJSON({ room, identity }), this.authHeader({ roomAdmin: true, room }));\n            return livekit_models_1.ParticipantInfo.fromJSON(data);\n        });\n    }\n    /**\n     * Removes a participant in the room. This will disconnect the participant\n     * and will emit a Disconnected event for that participant.\n     * Even after being removed, the participant can still re-join the room.\n     * @param room\n     * @param identity\n     */\n    removeParticipant(room, identity) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.rpc.request(svc, 'RemoveParticipant', livekit_room_1.RoomParticipantIdentity.toJSON({ room, identity }), this.authHeader({ roomAdmin: true, room }));\n        });\n    }\n    /**\n     * Mutes a track that the participant has published.\n     * @param room\n     * @param identity\n     * @param trackSid sid of the track to be muted\n     * @param muted true to mute, false to unmute\n     */\n    mutePublishedTrack(room, identity, trackSid, muted) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const req = livekit_room_1.MuteRoomTrackRequest.toJSON({\n                room,\n                identity,\n                trackSid,\n                muted,\n            });\n            const data = yield this.rpc.request(svc, 'MutePublishedTrack', req, this.authHeader({ roomAdmin: true, room }));\n            const res = livekit_room_1.MuteRoomTrackResponse.fromJSON(data);\n            return res.track;\n        });\n    }\n    /**\n     * Updates a participant's metadata or permissions\n     * @param room\n     * @param identity\n     * @param metadata optional, metadata to update\n     * @param permission optional, new permissions to assign to participant\n     * @param name optional, new name for participant\n     */\n    updateParticipant(room, identity, metadata, permission, name) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const req = {\n                room,\n                identity,\n                metadata: metadata || '',\n                name: name || '',\n            };\n            if (permission) {\n                req.permission = livekit_models_1.ParticipantPermission.fromPartial(permission);\n            }\n            const data = yield this.rpc.request(svc, 'UpdateParticipant', livekit_room_1.UpdateParticipantRequest.toJSON(req), this.authHeader({ roomAdmin: true, room }));\n            return livekit_models_1.ParticipantInfo.fromJSON(data);\n        });\n    }\n    /**\n     * Updates a participant's subscription to tracks\n     * @param room\n     * @param identity\n     * @param trackSids\n     * @param subscribe true to subscribe, false to unsubscribe\n     */\n    updateSubscriptions(room, identity, trackSids, subscribe) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const req = livekit_room_1.UpdateSubscriptionsRequest.toJSON({\n                room,\n                identity,\n                trackSids,\n                subscribe,\n                participantTracks: [],\n            });\n            yield this.rpc.request(svc, 'UpdateSubscriptions', req, this.authHeader({ roomAdmin: true, room }));\n        });\n    }\n    sendData(room, data, kind, options = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const destinationSids = Array.isArray(options) ? options : options.destinationSids;\n            const topic = Array.isArray(options) ? undefined : options.topic;\n            const req = {\n                room,\n                data,\n                kind,\n                destinationSids: destinationSids !== null && destinationSids !== void 0 ? destinationSids : [],\n                topic,\n            };\n            if (!Array.isArray(options) && options.destinationIdentities) {\n                req.destinationIdentities = options.destinationIdentities;\n            }\n            yield this.rpc.request(svc, 'SendData', livekit_room_1.SendDataRequest.toJSON(req), this.authHeader({ roomAdmin: true, room }));\n        });\n    }\n}\nexports.RoomServiceClient = RoomServiceClient;\n//# sourceMappingURL=RoomServiceClient.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/livekit-server-sdk/dist/RoomServiceClient.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/livekit-server-sdk/dist/ServiceBase.js":
/*!*************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/ServiceBase.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst AccessToken_1 = __webpack_require__(/*! ./AccessToken */ \"(ssr)/./node_modules/livekit-server-sdk/dist/AccessToken.js\");\n/**\n * Utilities to handle authentication\n */\nclass ServiceBase {\n    /**\n     * @param apiKey API Key.\n     * @param secret API Secret.\n     * @param ttl token TTL\n     */\n    constructor(apiKey, secret, ttl) {\n        this.apiKey = apiKey;\n        this.secret = secret;\n        this.ttl = ttl || '10m';\n    }\n    authHeader(grant) {\n        const at = new AccessToken_1.AccessToken(this.apiKey, this.secret, { ttl: this.ttl });\n        at.addGrant(grant);\n        return {\n            Authorization: `Bearer ${at.toJwt()}`,\n        };\n    }\n}\nexports[\"default\"] = ServiceBase;\n//# sourceMappingURL=ServiceBase.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGl2ZWtpdC1zZXJ2ZXItc2RrL2Rpc3QvU2VydmljZUJhc2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0JBQXNCLG1CQUFPLENBQUMsa0ZBQWU7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkVBQTZFLGVBQWU7QUFDNUY7QUFDQTtBQUNBLHFDQUFxQyxXQUFXO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saXZlc3RyZWFtLy4vbm9kZV9tb2R1bGVzL2xpdmVraXQtc2VydmVyLXNkay9kaXN0L1NlcnZpY2VCYXNlLmpzP2ZkNjciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBBY2Nlc3NUb2tlbl8xID0gcmVxdWlyZShcIi4vQWNjZXNzVG9rZW5cIik7XG4vKipcbiAqIFV0aWxpdGllcyB0byBoYW5kbGUgYXV0aGVudGljYXRpb25cbiAqL1xuY2xhc3MgU2VydmljZUJhc2Uge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBhcGlLZXkgQVBJIEtleS5cbiAgICAgKiBAcGFyYW0gc2VjcmV0IEFQSSBTZWNyZXQuXG4gICAgICogQHBhcmFtIHR0bCB0b2tlbiBUVExcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihhcGlLZXksIHNlY3JldCwgdHRsKSB7XG4gICAgICAgIHRoaXMuYXBpS2V5ID0gYXBpS2V5O1xuICAgICAgICB0aGlzLnNlY3JldCA9IHNlY3JldDtcbiAgICAgICAgdGhpcy50dGwgPSB0dGwgfHwgJzEwbSc7XG4gICAgfVxuICAgIGF1dGhIZWFkZXIoZ3JhbnQpIHtcbiAgICAgICAgY29uc3QgYXQgPSBuZXcgQWNjZXNzVG9rZW5fMS5BY2Nlc3NUb2tlbih0aGlzLmFwaUtleSwgdGhpcy5zZWNyZXQsIHsgdHRsOiB0aGlzLnR0bCB9KTtcbiAgICAgICAgYXQuYWRkR3JhbnQoZ3JhbnQpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke2F0LnRvSnd0KCl9YCxcbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBTZXJ2aWNlQmFzZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNlcnZpY2VCYXNlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/livekit-server-sdk/dist/ServiceBase.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/livekit-server-sdk/dist/TwirpRPC.js":
/*!**********************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/TwirpRPC.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TwirpRpc = exports.livekitPackage = void 0;\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(ssr)/./node_modules/axios/dist/node/axios.cjs\"));\nconst camelcase_keys_1 = __importDefault(__webpack_require__(/*! camelcase-keys */ \"(ssr)/./node_modules/camelcase-keys/index.js\"));\n// twirp RPC adapter for client implementation\nconst defaultPrefix = '/twirp';\nexports.livekitPackage = 'livekit';\n/**\n * JSON based Twirp V7 RPC\n */\nclass TwirpRpc {\n    constructor(host, pkg, prefix) {\n        if (host.startsWith('ws')) {\n            host = host.replace('ws', 'http');\n        }\n        this.host = host;\n        this.pkg = pkg;\n        this.prefix = prefix || defaultPrefix;\n        this.instance = axios_1.default.create({\n            baseURL: host,\n        });\n    }\n    request(service, method, data, headers) {\n        return new Promise((resolve, reject) => {\n            const path = `${this.prefix}/${this.pkg}.${service}/${method}`;\n            this.instance\n                .post(path, data, { headers })\n                .then((res) => {\n                resolve(camelcase_keys_1.default(res.data, { deep: true }));\n            })\n                .catch(reject);\n        });\n    }\n}\nexports.TwirpRpc = TwirpRpc;\n//# sourceMappingURL=TwirpRPC.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGl2ZWtpdC1zZXJ2ZXItc2RrL2Rpc3QvVHdpcnBSUEMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQkFBZ0IsR0FBRyxzQkFBc0I7QUFDekMsZ0NBQWdDLG1CQUFPLENBQUMsNkRBQU87QUFDL0MseUNBQXlDLG1CQUFPLENBQUMsb0VBQWdCO0FBQ2pFO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLFlBQVksR0FBRyxTQUFTLEdBQUcsUUFBUSxHQUFHLE9BQU87QUFDekU7QUFDQSxvQ0FBb0MsU0FBUztBQUM3QztBQUNBLDZEQUE2RCxZQUFZO0FBQ3pFLGFBQWE7QUFDYjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGl2ZXN0cmVhbS8uL25vZGVfbW9kdWxlcy9saXZla2l0LXNlcnZlci1zZGsvZGlzdC9Ud2lycFJQQy5qcz9mZDRlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Ud2lycFJwYyA9IGV4cG9ydHMubGl2ZWtpdFBhY2thZ2UgPSB2b2lkIDA7XG5jb25zdCBheGlvc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJheGlvc1wiKSk7XG5jb25zdCBjYW1lbGNhc2Vfa2V5c18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJjYW1lbGNhc2Uta2V5c1wiKSk7XG4vLyB0d2lycCBSUEMgYWRhcHRlciBmb3IgY2xpZW50IGltcGxlbWVudGF0aW9uXG5jb25zdCBkZWZhdWx0UHJlZml4ID0gJy90d2lycCc7XG5leHBvcnRzLmxpdmVraXRQYWNrYWdlID0gJ2xpdmVraXQnO1xuLyoqXG4gKiBKU09OIGJhc2VkIFR3aXJwIFY3IFJQQ1xuICovXG5jbGFzcyBUd2lycFJwYyB7XG4gICAgY29uc3RydWN0b3IoaG9zdCwgcGtnLCBwcmVmaXgpIHtcbiAgICAgICAgaWYgKGhvc3Quc3RhcnRzV2l0aCgnd3MnKSkge1xuICAgICAgICAgICAgaG9zdCA9IGhvc3QucmVwbGFjZSgnd3MnLCAnaHR0cCcpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaG9zdCA9IGhvc3Q7XG4gICAgICAgIHRoaXMucGtnID0gcGtnO1xuICAgICAgICB0aGlzLnByZWZpeCA9IHByZWZpeCB8fCBkZWZhdWx0UHJlZml4O1xuICAgICAgICB0aGlzLmluc3RhbmNlID0gYXhpb3NfMS5kZWZhdWx0LmNyZWF0ZSh7XG4gICAgICAgICAgICBiYXNlVVJMOiBob3N0LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmVxdWVzdChzZXJ2aWNlLCBtZXRob2QsIGRhdGEsIGhlYWRlcnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHBhdGggPSBgJHt0aGlzLnByZWZpeH0vJHt0aGlzLnBrZ30uJHtzZXJ2aWNlfS8ke21ldGhvZH1gO1xuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZVxuICAgICAgICAgICAgICAgIC5wb3N0KHBhdGgsIGRhdGEsIHsgaGVhZGVycyB9KVxuICAgICAgICAgICAgICAgIC50aGVuKChyZXMpID0+IHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKGNhbWVsY2FzZV9rZXlzXzEuZGVmYXVsdChyZXMuZGF0YSwgeyBkZWVwOiB0cnVlIH0pKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydHMuVHdpcnBScGMgPSBUd2lycFJwYztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVR3aXJwUlBDLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/livekit-server-sdk/dist/TwirpRPC.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/livekit-server-sdk/dist/WebhookReceiver.js":
/*!*****************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/WebhookReceiver.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WebhookReceiver = exports.authorizeHeader = void 0;\nconst crypto_1 = __importDefault(__webpack_require__(/*! crypto */ \"crypto\"));\nconst AccessToken_1 = __webpack_require__(/*! ./AccessToken */ \"(ssr)/./node_modules/livekit-server-sdk/dist/AccessToken.js\");\nconst livekit_webhook_1 = __webpack_require__(/*! ./proto/livekit_webhook */ \"(ssr)/./node_modules/livekit-server-sdk/dist/proto/livekit_webhook.js\");\nexports.authorizeHeader = 'Authorize';\nclass WebhookReceiver {\n    constructor(apiKey, apiSecret) {\n        this.verifier = new AccessToken_1.TokenVerifier(apiKey, apiSecret);\n    }\n    /**\n     *\n     * @param body string of the posted body\n     * @param authHeader `Authorization` header from the request\n     * @param skipAuth true to skip auth validation\n     * @returns\n     */\n    receive(body, authHeader, skipAuth = false) {\n        // verify token\n        if (!skipAuth) {\n            if (!authHeader) {\n                throw new Error('authorization header is empty');\n            }\n            const claims = this.verifier.verify(authHeader);\n            // confirm sha\n            const hash = crypto_1.default.createHash('sha256');\n            hash.update(body);\n            if (claims.sha256 !== hash.digest('base64')) {\n                throw new Error('sha256 checksum of body does not match');\n            }\n        }\n        return livekit_webhook_1.WebhookEvent.fromJSON(JSON.parse(body));\n    }\n}\nexports.WebhookReceiver = WebhookReceiver;\n//# sourceMappingURL=WebhookReceiver.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGl2ZWtpdC1zZXJ2ZXItc2RrL2Rpc3QvV2ViaG9va1JlY2VpdmVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsdUJBQXVCLEdBQUcsdUJBQXVCO0FBQ2pELGlDQUFpQyxtQkFBTyxDQUFDLHNCQUFRO0FBQ2pELHNCQUFzQixtQkFBTyxDQUFDLGtGQUFlO0FBQzdDLDBCQUEwQixtQkFBTyxDQUFDLHNHQUF5QjtBQUMzRCx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saXZlc3RyZWFtLy4vbm9kZV9tb2R1bGVzL2xpdmVraXQtc2VydmVyLXNkay9kaXN0L1dlYmhvb2tSZWNlaXZlci5qcz84NTU3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5XZWJob29rUmVjZWl2ZXIgPSBleHBvcnRzLmF1dGhvcml6ZUhlYWRlciA9IHZvaWQgMDtcbmNvbnN0IGNyeXB0b18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJjcnlwdG9cIikpO1xuY29uc3QgQWNjZXNzVG9rZW5fMSA9IHJlcXVpcmUoXCIuL0FjY2Vzc1Rva2VuXCIpO1xuY29uc3QgbGl2ZWtpdF93ZWJob29rXzEgPSByZXF1aXJlKFwiLi9wcm90by9saXZla2l0X3dlYmhvb2tcIik7XG5leHBvcnRzLmF1dGhvcml6ZUhlYWRlciA9ICdBdXRob3JpemUnO1xuY2xhc3MgV2ViaG9va1JlY2VpdmVyIHtcbiAgICBjb25zdHJ1Y3RvcihhcGlLZXksIGFwaVNlY3JldCkge1xuICAgICAgICB0aGlzLnZlcmlmaWVyID0gbmV3IEFjY2Vzc1Rva2VuXzEuVG9rZW5WZXJpZmllcihhcGlLZXksIGFwaVNlY3JldCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIGJvZHkgc3RyaW5nIG9mIHRoZSBwb3N0ZWQgYm9keVxuICAgICAqIEBwYXJhbSBhdXRoSGVhZGVyIGBBdXRob3JpemF0aW9uYCBoZWFkZXIgZnJvbSB0aGUgcmVxdWVzdFxuICAgICAqIEBwYXJhbSBza2lwQXV0aCB0cnVlIHRvIHNraXAgYXV0aCB2YWxpZGF0aW9uXG4gICAgICogQHJldHVybnNcbiAgICAgKi9cbiAgICByZWNlaXZlKGJvZHksIGF1dGhIZWFkZXIsIHNraXBBdXRoID0gZmFsc2UpIHtcbiAgICAgICAgLy8gdmVyaWZ5IHRva2VuXG4gICAgICAgIGlmICghc2tpcEF1dGgpIHtcbiAgICAgICAgICAgIGlmICghYXV0aEhlYWRlcikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYXV0aG9yaXphdGlvbiBoZWFkZXIgaXMgZW1wdHknKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGNsYWltcyA9IHRoaXMudmVyaWZpZXIudmVyaWZ5KGF1dGhIZWFkZXIpO1xuICAgICAgICAgICAgLy8gY29uZmlybSBzaGFcbiAgICAgICAgICAgIGNvbnN0IGhhc2ggPSBjcnlwdG9fMS5kZWZhdWx0LmNyZWF0ZUhhc2goJ3NoYTI1NicpO1xuICAgICAgICAgICAgaGFzaC51cGRhdGUoYm9keSk7XG4gICAgICAgICAgICBpZiAoY2xhaW1zLnNoYTI1NiAhPT0gaGFzaC5kaWdlc3QoJ2Jhc2U2NCcpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzaGEyNTYgY2hlY2tzdW0gb2YgYm9keSBkb2VzIG5vdCBtYXRjaCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsaXZla2l0X3dlYmhvb2tfMS5XZWJob29rRXZlbnQuZnJvbUpTT04oSlNPTi5wYXJzZShib2R5KSk7XG4gICAgfVxufVxuZXhwb3J0cy5XZWJob29rUmVjZWl2ZXIgPSBXZWJob29rUmVjZWl2ZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1XZWJob29rUmVjZWl2ZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/livekit-server-sdk/dist/WebhookReceiver.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/livekit-server-sdk/dist/grants.js":
/*!********************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/grants.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TrackSource = void 0;\nvar TrackSource;\n(function (TrackSource) {\n    TrackSource[\"CAMERA\"] = \"camera\";\n    TrackSource[\"MICROPHONE\"] = \"microphone\";\n    TrackSource[\"SCREEN_SHARE\"] = \"screen_share\";\n    TrackSource[\"SCREEN_SHARE_AUDIO\"] = \"screen_share_audio\";\n})(TrackSource = exports.TrackSource || (exports.TrackSource = {}));\n//# sourceMappingURL=grants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGl2ZWtpdC1zZXJ2ZXItc2RrL2Rpc3QvZ3JhbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHdDQUF3QyxtQkFBbUIsS0FBSztBQUNqRSIsInNvdXJjZXMiOlsid2VicGFjazovL2xpdmVzdHJlYW0vLi9ub2RlX21vZHVsZXMvbGl2ZWtpdC1zZXJ2ZXItc2RrL2Rpc3QvZ3JhbnRzLmpzP2M3YzEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlRyYWNrU291cmNlID0gdm9pZCAwO1xudmFyIFRyYWNrU291cmNlO1xuKGZ1bmN0aW9uIChUcmFja1NvdXJjZSkge1xuICAgIFRyYWNrU291cmNlW1wiQ0FNRVJBXCJdID0gXCJjYW1lcmFcIjtcbiAgICBUcmFja1NvdXJjZVtcIk1JQ1JPUEhPTkVcIl0gPSBcIm1pY3JvcGhvbmVcIjtcbiAgICBUcmFja1NvdXJjZVtcIlNDUkVFTl9TSEFSRVwiXSA9IFwic2NyZWVuX3NoYXJlXCI7XG4gICAgVHJhY2tTb3VyY2VbXCJTQ1JFRU5fU0hBUkVfQVVESU9cIl0gPSBcInNjcmVlbl9zaGFyZV9hdWRpb1wiO1xufSkoVHJhY2tTb3VyY2UgPSBleHBvcnRzLlRyYWNrU291cmNlIHx8IChleHBvcnRzLlRyYWNrU291cmNlID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdyYW50cy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/livekit-server-sdk/dist/grants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/livekit-server-sdk/dist/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/index.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TrackType = exports.TrackInfo = exports.Room = exports.ParticipantPermission = exports.ParticipantInfo_State = exports.ParticipantInfo = exports.DataPacket_Kind = exports.IngressVideoOptions = exports.IngressVideoEncodingPreset = exports.IngressVideoEncodingOptions = exports.IngressState = exports.IngressInput = exports.IngressInfo = exports.IngressAudioOptions = exports.IngressAudioEncodingPreset = exports.IngressAudioEncodingOptions = exports.StreamProtocol = exports.StreamOutput = exports.SegmentedFileProtocol = exports.SegmentedFileOutput = exports.EncodingOptionsPreset = exports.EncodingOptions = exports.EncodedFileType = exports.EncodedFileOutput = exports.EgressInfo = exports.DirectFileOutput = void 0;\n__exportStar(__webpack_require__(/*! ./AccessToken */ \"(ssr)/./node_modules/livekit-server-sdk/dist/AccessToken.js\"), exports);\n__exportStar(__webpack_require__(/*! ./EgressClient */ \"(ssr)/./node_modules/livekit-server-sdk/dist/EgressClient.js\"), exports);\n__exportStar(__webpack_require__(/*! ./IngressClient */ \"(ssr)/./node_modules/livekit-server-sdk/dist/IngressClient.js\"), exports);\n__exportStar(__webpack_require__(/*! ./RoomServiceClient */ \"(ssr)/./node_modules/livekit-server-sdk/dist/RoomServiceClient.js\"), exports);\n__exportStar(__webpack_require__(/*! ./WebhookReceiver */ \"(ssr)/./node_modules/livekit-server-sdk/dist/WebhookReceiver.js\"), exports);\n__exportStar(__webpack_require__(/*! ./grants */ \"(ssr)/./node_modules/livekit-server-sdk/dist/grants.js\"), exports);\nvar livekit_egress_1 = __webpack_require__(/*! ./proto/livekit_egress */ \"(ssr)/./node_modules/livekit-server-sdk/dist/proto/livekit_egress.js\");\nObject.defineProperty(exports, \"DirectFileOutput\", ({ enumerable: true, get: function () { return livekit_egress_1.DirectFileOutput; } }));\nObject.defineProperty(exports, \"EgressInfo\", ({ enumerable: true, get: function () { return livekit_egress_1.EgressInfo; } }));\nObject.defineProperty(exports, \"EncodedFileOutput\", ({ enumerable: true, get: function () { return livekit_egress_1.EncodedFileOutput; } }));\nObject.defineProperty(exports, \"EncodedFileType\", ({ enumerable: true, get: function () { return livekit_egress_1.EncodedFileType; } }));\nObject.defineProperty(exports, \"EncodingOptions\", ({ enumerable: true, get: function () { return livekit_egress_1.EncodingOptions; } }));\nObject.defineProperty(exports, \"EncodingOptionsPreset\", ({ enumerable: true, get: function () { return livekit_egress_1.EncodingOptionsPreset; } }));\nObject.defineProperty(exports, \"SegmentedFileOutput\", ({ enumerable: true, get: function () { return livekit_egress_1.SegmentedFileOutput; } }));\nObject.defineProperty(exports, \"SegmentedFileProtocol\", ({ enumerable: true, get: function () { return livekit_egress_1.SegmentedFileProtocol; } }));\nObject.defineProperty(exports, \"StreamOutput\", ({ enumerable: true, get: function () { return livekit_egress_1.StreamOutput; } }));\nObject.defineProperty(exports, \"StreamProtocol\", ({ enumerable: true, get: function () { return livekit_egress_1.StreamProtocol; } }));\nvar livekit_ingress_1 = __webpack_require__(/*! ./proto/livekit_ingress */ \"(ssr)/./node_modules/livekit-server-sdk/dist/proto/livekit_ingress.js\");\nObject.defineProperty(exports, \"IngressAudioEncodingOptions\", ({ enumerable: true, get: function () { return livekit_ingress_1.IngressAudioEncodingOptions; } }));\nObject.defineProperty(exports, \"IngressAudioEncodingPreset\", ({ enumerable: true, get: function () { return livekit_ingress_1.IngressAudioEncodingPreset; } }));\nObject.defineProperty(exports, \"IngressAudioOptions\", ({ enumerable: true, get: function () { return livekit_ingress_1.IngressAudioOptions; } }));\nObject.defineProperty(exports, \"IngressInfo\", ({ enumerable: true, get: function () { return livekit_ingress_1.IngressInfo; } }));\nObject.defineProperty(exports, \"IngressInput\", ({ enumerable: true, get: function () { return livekit_ingress_1.IngressInput; } }));\nObject.defineProperty(exports, \"IngressState\", ({ enumerable: true, get: function () { return livekit_ingress_1.IngressState; } }));\nObject.defineProperty(exports, \"IngressVideoEncodingOptions\", ({ enumerable: true, get: function () { return livekit_ingress_1.IngressVideoEncodingOptions; } }));\nObject.defineProperty(exports, \"IngressVideoEncodingPreset\", ({ enumerable: true, get: function () { return livekit_ingress_1.IngressVideoEncodingPreset; } }));\nObject.defineProperty(exports, \"IngressVideoOptions\", ({ enumerable: true, get: function () { return livekit_ingress_1.IngressVideoOptions; } }));\nvar livekit_models_1 = __webpack_require__(/*! ./proto/livekit_models */ \"(ssr)/./node_modules/livekit-server-sdk/dist/proto/livekit_models.js\");\nObject.defineProperty(exports, \"DataPacket_Kind\", ({ enumerable: true, get: function () { return livekit_models_1.DataPacket_Kind; } }));\nObject.defineProperty(exports, \"ParticipantInfo\", ({ enumerable: true, get: function () { return livekit_models_1.ParticipantInfo; } }));\nObject.defineProperty(exports, \"ParticipantInfo_State\", ({ enumerable: true, get: function () { return livekit_models_1.ParticipantInfo_State; } }));\nObject.defineProperty(exports, \"ParticipantPermission\", ({ enumerable: true, get: function () { return livekit_models_1.ParticipantPermission; } }));\nObject.defineProperty(exports, \"Room\", ({ enumerable: true, get: function () { return livekit_models_1.Room; } }));\nObject.defineProperty(exports, \"TrackInfo\", ({ enumerable: true, get: function () { return livekit_models_1.TrackInfo; } }));\nObject.defineProperty(exports, \"TrackType\", ({ enumerable: true, get: function () { return livekit_models_1.TrackType; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/livekit-server-sdk/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/livekit-server-sdk/dist/proto/google/protobuf/timestamp.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/proto/google/protobuf/timestamp.js ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Timestamp = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(__webpack_require__(/*! long */ \"(ssr)/./node_modules/long/umd/index.js\"));\nconst minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\"));\nexports.protobufPackage = \"google.protobuf\";\nfunction createBaseTimestamp() {\n    return { seconds: 0, nanos: 0 };\n}\nexports.Timestamp = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.seconds !== 0) {\n            writer.uint32(8).int64(message.seconds);\n        }\n        if (message.nanos !== 0) {\n            writer.uint32(16).int32(message.nanos);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTimestamp();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.seconds = longToNumber(reader.int64());\n                    break;\n                case 2:\n                    message.nanos = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            seconds: isSet(object.seconds) ? Number(object.seconds) : 0,\n            nanos: isSet(object.nanos) ? Number(object.nanos) : 0,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.seconds !== undefined && (obj.seconds = Math.round(message.seconds));\n        message.nanos !== undefined && (obj.nanos = Math.round(message.nanos));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseTimestamp();\n        message.seconds = (_a = object.seconds) !== null && _a !== void 0 ? _a : 0;\n        message.nanos = (_b = object.nanos) !== null && _b !== void 0 ? _b : 0;\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\") {\n        return globalThis;\n    }\n    if (typeof self !== \"undefined\") {\n        return self;\n    }\n    if (typeof window !== \"undefined\") {\n        return window;\n    }\n    if (typeof global !== \"undefined\") {\n        return global;\n    }\n    throw \"Unable to locate global object\";\n})();\nfunction longToNumber(long) {\n    if (long.gt(Number.MAX_SAFE_INTEGER)) {\n        throw new globalThis.Error(\"Value is larger than Number.MAX_SAFE_INTEGER\");\n    }\n    return long.toNumber();\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=timestamp.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGl2ZWtpdC1zZXJ2ZXItc2RrL2Rpc3QvcHJvdG8vZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGlCQUFpQixHQUFHLHVCQUF1QjtBQUMzQztBQUNBLCtCQUErQixtQkFBTyxDQUFDLG9EQUFNO0FBQzdDLGtDQUFrQyxtQkFBTyxDQUFDLHNFQUFvQjtBQUM5RCx1QkFBdUI7QUFDdkI7QUFDQSxhQUFhO0FBQ2I7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGl2ZXN0cmVhbS8uL25vZGVfbW9kdWxlcy9saXZla2l0LXNlcnZlci1zZGsvZGlzdC9wcm90by9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLmpzPzljNGYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlRpbWVzdGFtcCA9IGV4cG9ydHMucHJvdG9idWZQYWNrYWdlID0gdm9pZCAwO1xuLyogZXNsaW50LWRpc2FibGUgKi9cbmNvbnN0IGxvbmdfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwibG9uZ1wiKSk7XG5jb25zdCBtaW5pbWFsXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInByb3RvYnVmanMvbWluaW1hbFwiKSk7XG5leHBvcnRzLnByb3RvYnVmUGFja2FnZSA9IFwiZ29vZ2xlLnByb3RvYnVmXCI7XG5mdW5jdGlvbiBjcmVhdGVCYXNlVGltZXN0YW1wKCkge1xuICAgIHJldHVybiB7IHNlY29uZHM6IDAsIG5hbm9zOiAwIH07XG59XG5leHBvcnRzLlRpbWVzdGFtcCA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gbWluaW1hbF8xLmRlZmF1bHQuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLnNlY29uZHMgIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoOCkuaW50NjQobWVzc2FnZS5zZWNvbmRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5uYW5vcyAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxNikuaW50MzIobWVzc2FnZS5uYW5vcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgbWluaW1hbF8xLmRlZmF1bHQuUmVhZGVyID8gaW5wdXQgOiBuZXcgbWluaW1hbF8xLmRlZmF1bHQuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlVGltZXN0YW1wKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5zZWNvbmRzID0gbG9uZ1RvTnVtYmVyKHJlYWRlci5pbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLm5hbm9zID0gcmVhZGVyLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNlY29uZHM6IGlzU2V0KG9iamVjdC5zZWNvbmRzKSA/IE51bWJlcihvYmplY3Quc2Vjb25kcykgOiAwLFxuICAgICAgICAgICAgbmFub3M6IGlzU2V0KG9iamVjdC5uYW5vcykgPyBOdW1iZXIob2JqZWN0Lm5hbm9zKSA6IDAsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS5zZWNvbmRzICE9PSB1bmRlZmluZWQgJiYgKG9iai5zZWNvbmRzID0gTWF0aC5yb3VuZChtZXNzYWdlLnNlY29uZHMpKTtcbiAgICAgICAgbWVzc2FnZS5uYW5vcyAhPT0gdW5kZWZpbmVkICYmIChvYmoubmFub3MgPSBNYXRoLnJvdW5kKG1lc3NhZ2UubmFub3MpKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVRpbWVzdGFtcCgpO1xuICAgICAgICBtZXNzYWdlLnNlY29uZHMgPSAoX2EgPSBvYmplY3Quc2Vjb25kcykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMDtcbiAgICAgICAgbWVzc2FnZS5uYW5vcyA9IChfYiA9IG9iamVjdC5uYW5vcykgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogMDtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG52YXIgZ2xvYmFsVGhpcyA9ICgoKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBnbG9iYWxUaGlzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJldHVybiBnbG9iYWxUaGlzO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJldHVybiB3aW5kb3c7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJldHVybiBnbG9iYWw7XG4gICAgfVxuICAgIHRocm93IFwiVW5hYmxlIHRvIGxvY2F0ZSBnbG9iYWwgb2JqZWN0XCI7XG59KSgpO1xuZnVuY3Rpb24gbG9uZ1RvTnVtYmVyKGxvbmcpIHtcbiAgICBpZiAobG9uZy5ndChOdW1iZXIuTUFYX1NBRkVfSU5URUdFUikpIHtcbiAgICAgICAgdGhyb3cgbmV3IGdsb2JhbFRoaXMuRXJyb3IoXCJWYWx1ZSBpcyBsYXJnZXIgdGhhbiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUlwiKTtcbiAgICB9XG4gICAgcmV0dXJuIGxvbmcudG9OdW1iZXIoKTtcbn1cbmlmIChtaW5pbWFsXzEuZGVmYXVsdC51dGlsLkxvbmcgIT09IGxvbmdfMS5kZWZhdWx0KSB7XG4gICAgbWluaW1hbF8xLmRlZmF1bHQudXRpbC5Mb25nID0gbG9uZ18xLmRlZmF1bHQ7XG4gICAgbWluaW1hbF8xLmRlZmF1bHQuY29uZmlndXJlKCk7XG59XG5mdW5jdGlvbiBpc1NldCh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGltZXN0YW1wLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/livekit-server-sdk/dist/proto/google/protobuf/timestamp.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/livekit-server-sdk/dist/proto/livekit_egress.js":
/*!**********************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/proto/livekit_egress.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StreamInfo = exports.StreamInfoList = exports.EgressInfo = exports.StopEgressRequest = exports.ListEgressResponse = exports.ListEgressRequest = exports.UpdateOutputsRequest = exports.UpdateStreamRequest = exports.UpdateLayoutRequest = exports.EncodingOptions = exports.StreamOutput = exports.AliOSSUpload = exports.AzureBlobUpload = exports.GCPUpload = exports.S3Upload_MetadataEntry = exports.S3Upload = exports.ImageOutput = exports.DirectFileOutput = exports.SegmentedFileOutput = exports.EncodedFileOutput = exports.TrackEgressRequest = exports.TrackCompositeEgressRequest = exports.ParticipantEgressRequest = exports.WebEgressRequest = exports.RoomCompositeEgressRequest = exports.streamInfo_StatusToJSON = exports.streamInfo_StatusFromJSON = exports.StreamInfo_Status = exports.egressStatusToJSON = exports.egressStatusFromJSON = exports.EgressStatus = exports.encodingOptionsPresetToJSON = exports.encodingOptionsPresetFromJSON = exports.EncodingOptionsPreset = exports.streamProtocolToJSON = exports.streamProtocolFromJSON = exports.StreamProtocol = exports.imageFileSuffixToJSON = exports.imageFileSuffixFromJSON = exports.ImageFileSuffix = exports.segmentedFileSuffixToJSON = exports.segmentedFileSuffixFromJSON = exports.SegmentedFileSuffix = exports.segmentedFileProtocolToJSON = exports.segmentedFileProtocolFromJSON = exports.SegmentedFileProtocol = exports.encodedFileTypeToJSON = exports.encodedFileTypeFromJSON = exports.EncodedFileType = exports.protobufPackage = void 0;\nexports.AutoTrackEgress = exports.AutoParticipantEgress = exports.ImagesInfo = exports.SegmentsInfo = exports.FileInfo = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(__webpack_require__(/*! long */ \"(ssr)/./node_modules/long/umd/index.js\"));\nconst minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\"));\nconst livekit_models_1 = __webpack_require__(/*! ./livekit_models */ \"(ssr)/./node_modules/livekit-server-sdk/dist/proto/livekit_models.js\");\nexports.protobufPackage = \"livekit\";\nvar EncodedFileType;\n(function (EncodedFileType) {\n    /** DEFAULT_FILETYPE - file type chosen based on codecs */\n    EncodedFileType[EncodedFileType[\"DEFAULT_FILETYPE\"] = 0] = \"DEFAULT_FILETYPE\";\n    EncodedFileType[EncodedFileType[\"MP4\"] = 1] = \"MP4\";\n    EncodedFileType[EncodedFileType[\"OGG\"] = 2] = \"OGG\";\n    EncodedFileType[EncodedFileType[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(EncodedFileType = exports.EncodedFileType || (exports.EncodedFileType = {}));\nfunction encodedFileTypeFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"DEFAULT_FILETYPE\":\n            return EncodedFileType.DEFAULT_FILETYPE;\n        case 1:\n        case \"MP4\":\n            return EncodedFileType.MP4;\n        case 2:\n        case \"OGG\":\n            return EncodedFileType.OGG;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return EncodedFileType.UNRECOGNIZED;\n    }\n}\nexports.encodedFileTypeFromJSON = encodedFileTypeFromJSON;\nfunction encodedFileTypeToJSON(object) {\n    switch (object) {\n        case EncodedFileType.DEFAULT_FILETYPE:\n            return \"DEFAULT_FILETYPE\";\n        case EncodedFileType.MP4:\n            return \"MP4\";\n        case EncodedFileType.OGG:\n            return \"OGG\";\n        case EncodedFileType.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.encodedFileTypeToJSON = encodedFileTypeToJSON;\nvar SegmentedFileProtocol;\n(function (SegmentedFileProtocol) {\n    SegmentedFileProtocol[SegmentedFileProtocol[\"DEFAULT_SEGMENTED_FILE_PROTOCOL\"] = 0] = \"DEFAULT_SEGMENTED_FILE_PROTOCOL\";\n    SegmentedFileProtocol[SegmentedFileProtocol[\"HLS_PROTOCOL\"] = 1] = \"HLS_PROTOCOL\";\n    SegmentedFileProtocol[SegmentedFileProtocol[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(SegmentedFileProtocol = exports.SegmentedFileProtocol || (exports.SegmentedFileProtocol = {}));\nfunction segmentedFileProtocolFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"DEFAULT_SEGMENTED_FILE_PROTOCOL\":\n            return SegmentedFileProtocol.DEFAULT_SEGMENTED_FILE_PROTOCOL;\n        case 1:\n        case \"HLS_PROTOCOL\":\n            return SegmentedFileProtocol.HLS_PROTOCOL;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return SegmentedFileProtocol.UNRECOGNIZED;\n    }\n}\nexports.segmentedFileProtocolFromJSON = segmentedFileProtocolFromJSON;\nfunction segmentedFileProtocolToJSON(object) {\n    switch (object) {\n        case SegmentedFileProtocol.DEFAULT_SEGMENTED_FILE_PROTOCOL:\n            return \"DEFAULT_SEGMENTED_FILE_PROTOCOL\";\n        case SegmentedFileProtocol.HLS_PROTOCOL:\n            return \"HLS_PROTOCOL\";\n        case SegmentedFileProtocol.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.segmentedFileProtocolToJSON = segmentedFileProtocolToJSON;\nvar SegmentedFileSuffix;\n(function (SegmentedFileSuffix) {\n    SegmentedFileSuffix[SegmentedFileSuffix[\"INDEX\"] = 0] = \"INDEX\";\n    SegmentedFileSuffix[SegmentedFileSuffix[\"TIMESTAMP\"] = 1] = \"TIMESTAMP\";\n    SegmentedFileSuffix[SegmentedFileSuffix[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(SegmentedFileSuffix = exports.SegmentedFileSuffix || (exports.SegmentedFileSuffix = {}));\nfunction segmentedFileSuffixFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"INDEX\":\n            return SegmentedFileSuffix.INDEX;\n        case 1:\n        case \"TIMESTAMP\":\n            return SegmentedFileSuffix.TIMESTAMP;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return SegmentedFileSuffix.UNRECOGNIZED;\n    }\n}\nexports.segmentedFileSuffixFromJSON = segmentedFileSuffixFromJSON;\nfunction segmentedFileSuffixToJSON(object) {\n    switch (object) {\n        case SegmentedFileSuffix.INDEX:\n            return \"INDEX\";\n        case SegmentedFileSuffix.TIMESTAMP:\n            return \"TIMESTAMP\";\n        case SegmentedFileSuffix.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.segmentedFileSuffixToJSON = segmentedFileSuffixToJSON;\nvar ImageFileSuffix;\n(function (ImageFileSuffix) {\n    ImageFileSuffix[ImageFileSuffix[\"IMAGE_SUFFIX_INDEX\"] = 0] = \"IMAGE_SUFFIX_INDEX\";\n    ImageFileSuffix[ImageFileSuffix[\"IMAGE_SUFFIX_TIMESTAMP\"] = 1] = \"IMAGE_SUFFIX_TIMESTAMP\";\n    ImageFileSuffix[ImageFileSuffix[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(ImageFileSuffix = exports.ImageFileSuffix || (exports.ImageFileSuffix = {}));\nfunction imageFileSuffixFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"IMAGE_SUFFIX_INDEX\":\n            return ImageFileSuffix.IMAGE_SUFFIX_INDEX;\n        case 1:\n        case \"IMAGE_SUFFIX_TIMESTAMP\":\n            return ImageFileSuffix.IMAGE_SUFFIX_TIMESTAMP;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return ImageFileSuffix.UNRECOGNIZED;\n    }\n}\nexports.imageFileSuffixFromJSON = imageFileSuffixFromJSON;\nfunction imageFileSuffixToJSON(object) {\n    switch (object) {\n        case ImageFileSuffix.IMAGE_SUFFIX_INDEX:\n            return \"IMAGE_SUFFIX_INDEX\";\n        case ImageFileSuffix.IMAGE_SUFFIX_TIMESTAMP:\n            return \"IMAGE_SUFFIX_TIMESTAMP\";\n        case ImageFileSuffix.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.imageFileSuffixToJSON = imageFileSuffixToJSON;\nvar StreamProtocol;\n(function (StreamProtocol) {\n    /** DEFAULT_PROTOCOL - protocol chosen based on urls */\n    StreamProtocol[StreamProtocol[\"DEFAULT_PROTOCOL\"] = 0] = \"DEFAULT_PROTOCOL\";\n    StreamProtocol[StreamProtocol[\"RTMP\"] = 1] = \"RTMP\";\n    StreamProtocol[StreamProtocol[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(StreamProtocol = exports.StreamProtocol || (exports.StreamProtocol = {}));\nfunction streamProtocolFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"DEFAULT_PROTOCOL\":\n            return StreamProtocol.DEFAULT_PROTOCOL;\n        case 1:\n        case \"RTMP\":\n            return StreamProtocol.RTMP;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return StreamProtocol.UNRECOGNIZED;\n    }\n}\nexports.streamProtocolFromJSON = streamProtocolFromJSON;\nfunction streamProtocolToJSON(object) {\n    switch (object) {\n        case StreamProtocol.DEFAULT_PROTOCOL:\n            return \"DEFAULT_PROTOCOL\";\n        case StreamProtocol.RTMP:\n            return \"RTMP\";\n        case StreamProtocol.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.streamProtocolToJSON = streamProtocolToJSON;\nvar EncodingOptionsPreset;\n(function (EncodingOptionsPreset) {\n    /** H264_720P_30 - 1280x720, 30fps, 3000kpbs, H.264_MAIN / OPUS */\n    EncodingOptionsPreset[EncodingOptionsPreset[\"H264_720P_30\"] = 0] = \"H264_720P_30\";\n    /** H264_720P_60 - 1280x720, 60fps, 4500kbps, H.264_MAIN / OPUS */\n    EncodingOptionsPreset[EncodingOptionsPreset[\"H264_720P_60\"] = 1] = \"H264_720P_60\";\n    /** H264_1080P_30 - 1920x1080, 30fps, 4500kbps, H.264_MAIN / OPUS */\n    EncodingOptionsPreset[EncodingOptionsPreset[\"H264_1080P_30\"] = 2] = \"H264_1080P_30\";\n    /** H264_1080P_60 - 1920x1080, 60fps, 6000kbps, H.264_MAIN / OPUS */\n    EncodingOptionsPreset[EncodingOptionsPreset[\"H264_1080P_60\"] = 3] = \"H264_1080P_60\";\n    /** PORTRAIT_H264_720P_30 - 720x1280, 30fps, 3000kpbs, H.264_MAIN / OPUS */\n    EncodingOptionsPreset[EncodingOptionsPreset[\"PORTRAIT_H264_720P_30\"] = 4] = \"PORTRAIT_H264_720P_30\";\n    /** PORTRAIT_H264_720P_60 - 720x1280, 60fps, 4500kbps, H.264_MAIN / OPUS */\n    EncodingOptionsPreset[EncodingOptionsPreset[\"PORTRAIT_H264_720P_60\"] = 5] = \"PORTRAIT_H264_720P_60\";\n    /** PORTRAIT_H264_1080P_30 - 1080x1920, 30fps, 4500kbps, H.264_MAIN / OPUS */\n    EncodingOptionsPreset[EncodingOptionsPreset[\"PORTRAIT_H264_1080P_30\"] = 6] = \"PORTRAIT_H264_1080P_30\";\n    /** PORTRAIT_H264_1080P_60 - 1080x1920, 60fps, 6000kbps, H.264_MAIN / OPUS */\n    EncodingOptionsPreset[EncodingOptionsPreset[\"PORTRAIT_H264_1080P_60\"] = 7] = \"PORTRAIT_H264_1080P_60\";\n    EncodingOptionsPreset[EncodingOptionsPreset[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(EncodingOptionsPreset = exports.EncodingOptionsPreset || (exports.EncodingOptionsPreset = {}));\nfunction encodingOptionsPresetFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"H264_720P_30\":\n            return EncodingOptionsPreset.H264_720P_30;\n        case 1:\n        case \"H264_720P_60\":\n            return EncodingOptionsPreset.H264_720P_60;\n        case 2:\n        case \"H264_1080P_30\":\n            return EncodingOptionsPreset.H264_1080P_30;\n        case 3:\n        case \"H264_1080P_60\":\n            return EncodingOptionsPreset.H264_1080P_60;\n        case 4:\n        case \"PORTRAIT_H264_720P_30\":\n            return EncodingOptionsPreset.PORTRAIT_H264_720P_30;\n        case 5:\n        case \"PORTRAIT_H264_720P_60\":\n            return EncodingOptionsPreset.PORTRAIT_H264_720P_60;\n        case 6:\n        case \"PORTRAIT_H264_1080P_30\":\n            return EncodingOptionsPreset.PORTRAIT_H264_1080P_30;\n        case 7:\n        case \"PORTRAIT_H264_1080P_60\":\n            return EncodingOptionsPreset.PORTRAIT_H264_1080P_60;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return EncodingOptionsPreset.UNRECOGNIZED;\n    }\n}\nexports.encodingOptionsPresetFromJSON = encodingOptionsPresetFromJSON;\nfunction encodingOptionsPresetToJSON(object) {\n    switch (object) {\n        case EncodingOptionsPreset.H264_720P_30:\n            return \"H264_720P_30\";\n        case EncodingOptionsPreset.H264_720P_60:\n            return \"H264_720P_60\";\n        case EncodingOptionsPreset.H264_1080P_30:\n            return \"H264_1080P_30\";\n        case EncodingOptionsPreset.H264_1080P_60:\n            return \"H264_1080P_60\";\n        case EncodingOptionsPreset.PORTRAIT_H264_720P_30:\n            return \"PORTRAIT_H264_720P_30\";\n        case EncodingOptionsPreset.PORTRAIT_H264_720P_60:\n            return \"PORTRAIT_H264_720P_60\";\n        case EncodingOptionsPreset.PORTRAIT_H264_1080P_30:\n            return \"PORTRAIT_H264_1080P_30\";\n        case EncodingOptionsPreset.PORTRAIT_H264_1080P_60:\n            return \"PORTRAIT_H264_1080P_60\";\n        case EncodingOptionsPreset.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.encodingOptionsPresetToJSON = encodingOptionsPresetToJSON;\nvar EgressStatus;\n(function (EgressStatus) {\n    EgressStatus[EgressStatus[\"EGRESS_STARTING\"] = 0] = \"EGRESS_STARTING\";\n    EgressStatus[EgressStatus[\"EGRESS_ACTIVE\"] = 1] = \"EGRESS_ACTIVE\";\n    EgressStatus[EgressStatus[\"EGRESS_ENDING\"] = 2] = \"EGRESS_ENDING\";\n    EgressStatus[EgressStatus[\"EGRESS_COMPLETE\"] = 3] = \"EGRESS_COMPLETE\";\n    EgressStatus[EgressStatus[\"EGRESS_FAILED\"] = 4] = \"EGRESS_FAILED\";\n    EgressStatus[EgressStatus[\"EGRESS_ABORTED\"] = 5] = \"EGRESS_ABORTED\";\n    EgressStatus[EgressStatus[\"EGRESS_LIMIT_REACHED\"] = 6] = \"EGRESS_LIMIT_REACHED\";\n    EgressStatus[EgressStatus[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(EgressStatus = exports.EgressStatus || (exports.EgressStatus = {}));\nfunction egressStatusFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"EGRESS_STARTING\":\n            return EgressStatus.EGRESS_STARTING;\n        case 1:\n        case \"EGRESS_ACTIVE\":\n            return EgressStatus.EGRESS_ACTIVE;\n        case 2:\n        case \"EGRESS_ENDING\":\n            return EgressStatus.EGRESS_ENDING;\n        case 3:\n        case \"EGRESS_COMPLETE\":\n            return EgressStatus.EGRESS_COMPLETE;\n        case 4:\n        case \"EGRESS_FAILED\":\n            return EgressStatus.EGRESS_FAILED;\n        case 5:\n        case \"EGRESS_ABORTED\":\n            return EgressStatus.EGRESS_ABORTED;\n        case 6:\n        case \"EGRESS_LIMIT_REACHED\":\n            return EgressStatus.EGRESS_LIMIT_REACHED;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return EgressStatus.UNRECOGNIZED;\n    }\n}\nexports.egressStatusFromJSON = egressStatusFromJSON;\nfunction egressStatusToJSON(object) {\n    switch (object) {\n        case EgressStatus.EGRESS_STARTING:\n            return \"EGRESS_STARTING\";\n        case EgressStatus.EGRESS_ACTIVE:\n            return \"EGRESS_ACTIVE\";\n        case EgressStatus.EGRESS_ENDING:\n            return \"EGRESS_ENDING\";\n        case EgressStatus.EGRESS_COMPLETE:\n            return \"EGRESS_COMPLETE\";\n        case EgressStatus.EGRESS_FAILED:\n            return \"EGRESS_FAILED\";\n        case EgressStatus.EGRESS_ABORTED:\n            return \"EGRESS_ABORTED\";\n        case EgressStatus.EGRESS_LIMIT_REACHED:\n            return \"EGRESS_LIMIT_REACHED\";\n        case EgressStatus.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.egressStatusToJSON = egressStatusToJSON;\nvar StreamInfo_Status;\n(function (StreamInfo_Status) {\n    StreamInfo_Status[StreamInfo_Status[\"ACTIVE\"] = 0] = \"ACTIVE\";\n    StreamInfo_Status[StreamInfo_Status[\"FINISHED\"] = 1] = \"FINISHED\";\n    StreamInfo_Status[StreamInfo_Status[\"FAILED\"] = 2] = \"FAILED\";\n    StreamInfo_Status[StreamInfo_Status[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(StreamInfo_Status = exports.StreamInfo_Status || (exports.StreamInfo_Status = {}));\nfunction streamInfo_StatusFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"ACTIVE\":\n            return StreamInfo_Status.ACTIVE;\n        case 1:\n        case \"FINISHED\":\n            return StreamInfo_Status.FINISHED;\n        case 2:\n        case \"FAILED\":\n            return StreamInfo_Status.FAILED;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return StreamInfo_Status.UNRECOGNIZED;\n    }\n}\nexports.streamInfo_StatusFromJSON = streamInfo_StatusFromJSON;\nfunction streamInfo_StatusToJSON(object) {\n    switch (object) {\n        case StreamInfo_Status.ACTIVE:\n            return \"ACTIVE\";\n        case StreamInfo_Status.FINISHED:\n            return \"FINISHED\";\n        case StreamInfo_Status.FAILED:\n            return \"FAILED\";\n        case StreamInfo_Status.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.streamInfo_StatusToJSON = streamInfo_StatusToJSON;\nfunction createBaseRoomCompositeEgressRequest() {\n    return {\n        roomName: \"\",\n        layout: \"\",\n        audioOnly: false,\n        videoOnly: false,\n        customBaseUrl: \"\",\n        file: undefined,\n        stream: undefined,\n        segments: undefined,\n        preset: undefined,\n        advanced: undefined,\n        fileOutputs: [],\n        streamOutputs: [],\n        segmentOutputs: [],\n        imageOutputs: [],\n    };\n}\nexports.RoomCompositeEgressRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.roomName !== undefined && message.roomName !== \"\") {\n            writer.uint32(10).string(message.roomName);\n        }\n        if (message.layout !== undefined && message.layout !== \"\") {\n            writer.uint32(18).string(message.layout);\n        }\n        if (message.audioOnly === true) {\n            writer.uint32(24).bool(message.audioOnly);\n        }\n        if (message.videoOnly === true) {\n            writer.uint32(32).bool(message.videoOnly);\n        }\n        if (message.customBaseUrl !== undefined && message.customBaseUrl !== \"\") {\n            writer.uint32(42).string(message.customBaseUrl);\n        }\n        if (message.file !== undefined) {\n            exports.EncodedFileOutput.encode(message.file, writer.uint32(50).fork()).ldelim();\n        }\n        if (message.stream !== undefined) {\n            exports.StreamOutput.encode(message.stream, writer.uint32(58).fork()).ldelim();\n        }\n        if (message.segments !== undefined) {\n            exports.SegmentedFileOutput.encode(message.segments, writer.uint32(82).fork()).ldelim();\n        }\n        if (message.preset !== undefined) {\n            writer.uint32(64).int32(message.preset);\n        }\n        if (message.advanced !== undefined) {\n            exports.EncodingOptions.encode(message.advanced, writer.uint32(74).fork()).ldelim();\n        }\n        if (message.fileOutputs !== undefined && message.fileOutputs.length !== 0) {\n            for (const v of message.fileOutputs) {\n                exports.EncodedFileOutput.encode(v, writer.uint32(90).fork()).ldelim();\n            }\n        }\n        if (message.streamOutputs !== undefined && message.streamOutputs.length !== 0) {\n            for (const v of message.streamOutputs) {\n                exports.StreamOutput.encode(v, writer.uint32(98).fork()).ldelim();\n            }\n        }\n        if (message.segmentOutputs !== undefined && message.segmentOutputs.length !== 0) {\n            for (const v of message.segmentOutputs) {\n                exports.SegmentedFileOutput.encode(v, writer.uint32(106).fork()).ldelim();\n            }\n        }\n        if (message.imageOutputs !== undefined && message.imageOutputs.length !== 0) {\n            for (const v of message.imageOutputs) {\n                exports.ImageOutput.encode(v, writer.uint32(114).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseRoomCompositeEgressRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.roomName = reader.string();\n                    break;\n                case 2:\n                    message.layout = reader.string();\n                    break;\n                case 3:\n                    message.audioOnly = reader.bool();\n                    break;\n                case 4:\n                    message.videoOnly = reader.bool();\n                    break;\n                case 5:\n                    message.customBaseUrl = reader.string();\n                    break;\n                case 6:\n                    message.file = exports.EncodedFileOutput.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.stream = exports.StreamOutput.decode(reader, reader.uint32());\n                    break;\n                case 10:\n                    message.segments = exports.SegmentedFileOutput.decode(reader, reader.uint32());\n                    break;\n                case 8:\n                    message.preset = reader.int32();\n                    break;\n                case 9:\n                    message.advanced = exports.EncodingOptions.decode(reader, reader.uint32());\n                    break;\n                case 11:\n                    message.fileOutputs.push(exports.EncodedFileOutput.decode(reader, reader.uint32()));\n                    break;\n                case 12:\n                    message.streamOutputs.push(exports.StreamOutput.decode(reader, reader.uint32()));\n                    break;\n                case 13:\n                    message.segmentOutputs.push(exports.SegmentedFileOutput.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    message.imageOutputs.push(exports.ImageOutput.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            roomName: isSet(object.roomName) ? String(object.roomName) : \"\",\n            layout: isSet(object.layout) ? String(object.layout) : \"\",\n            audioOnly: isSet(object.audioOnly) ? Boolean(object.audioOnly) : false,\n            videoOnly: isSet(object.videoOnly) ? Boolean(object.videoOnly) : false,\n            customBaseUrl: isSet(object.customBaseUrl) ? String(object.customBaseUrl) : \"\",\n            file: isSet(object.file) ? exports.EncodedFileOutput.fromJSON(object.file) : undefined,\n            stream: isSet(object.stream) ? exports.StreamOutput.fromJSON(object.stream) : undefined,\n            segments: isSet(object.segments) ? exports.SegmentedFileOutput.fromJSON(object.segments) : undefined,\n            preset: isSet(object.preset) ? encodingOptionsPresetFromJSON(object.preset) : undefined,\n            advanced: isSet(object.advanced) ? exports.EncodingOptions.fromJSON(object.advanced) : undefined,\n            fileOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.fileOutputs)\n                ? object.fileOutputs.map((e) => exports.EncodedFileOutput.fromJSON(e))\n                : [],\n            streamOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.streamOutputs)\n                ? object.streamOutputs.map((e) => exports.StreamOutput.fromJSON(e))\n                : [],\n            segmentOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.segmentOutputs)\n                ? object.segmentOutputs.map((e) => exports.SegmentedFileOutput.fromJSON(e))\n                : [],\n            imageOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.imageOutputs)\n                ? object.imageOutputs.map((e) => exports.ImageOutput.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.roomName !== undefined && (obj.roomName = message.roomName);\n        message.layout !== undefined && (obj.layout = message.layout);\n        message.audioOnly !== undefined && (obj.audioOnly = message.audioOnly);\n        message.videoOnly !== undefined && (obj.videoOnly = message.videoOnly);\n        message.customBaseUrl !== undefined && (obj.customBaseUrl = message.customBaseUrl);\n        message.file !== undefined && (obj.file = message.file ? exports.EncodedFileOutput.toJSON(message.file) : undefined);\n        message.stream !== undefined && (obj.stream = message.stream ? exports.StreamOutput.toJSON(message.stream) : undefined);\n        message.segments !== undefined &&\n            (obj.segments = message.segments ? exports.SegmentedFileOutput.toJSON(message.segments) : undefined);\n        message.preset !== undefined &&\n            (obj.preset = message.preset !== undefined ? encodingOptionsPresetToJSON(message.preset) : undefined);\n        message.advanced !== undefined &&\n            (obj.advanced = message.advanced ? exports.EncodingOptions.toJSON(message.advanced) : undefined);\n        if (message.fileOutputs) {\n            obj.fileOutputs = message.fileOutputs.map((e) => e ? exports.EncodedFileOutput.toJSON(e) : undefined);\n        }\n        else {\n            obj.fileOutputs = [];\n        }\n        if (message.streamOutputs) {\n            obj.streamOutputs = message.streamOutputs.map((e) => e ? exports.StreamOutput.toJSON(e) : undefined);\n        }\n        else {\n            obj.streamOutputs = [];\n        }\n        if (message.segmentOutputs) {\n            obj.segmentOutputs = message.segmentOutputs.map((e) => e ? exports.SegmentedFileOutput.toJSON(e) : undefined);\n        }\n        else {\n            obj.segmentOutputs = [];\n        }\n        if (message.imageOutputs) {\n            obj.imageOutputs = message.imageOutputs.map((e) => e ? exports.ImageOutput.toJSON(e) : undefined);\n        }\n        else {\n            obj.imageOutputs = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n        const message = createBaseRoomCompositeEgressRequest();\n        message.roomName = (_a = object.roomName) !== null && _a !== void 0 ? _a : \"\";\n        message.layout = (_b = object.layout) !== null && _b !== void 0 ? _b : \"\";\n        message.audioOnly = (_c = object.audioOnly) !== null && _c !== void 0 ? _c : false;\n        message.videoOnly = (_d = object.videoOnly) !== null && _d !== void 0 ? _d : false;\n        message.customBaseUrl = (_e = object.customBaseUrl) !== null && _e !== void 0 ? _e : \"\";\n        message.file = (object.file !== undefined && object.file !== null)\n            ? exports.EncodedFileOutput.fromPartial(object.file)\n            : undefined;\n        message.stream = (object.stream !== undefined && object.stream !== null)\n            ? exports.StreamOutput.fromPartial(object.stream)\n            : undefined;\n        message.segments = (object.segments !== undefined && object.segments !== null)\n            ? exports.SegmentedFileOutput.fromPartial(object.segments)\n            : undefined;\n        message.preset = (_f = object.preset) !== null && _f !== void 0 ? _f : undefined;\n        message.advanced = (object.advanced !== undefined && object.advanced !== null)\n            ? exports.EncodingOptions.fromPartial(object.advanced)\n            : undefined;\n        message.fileOutputs = ((_g = object.fileOutputs) === null || _g === void 0 ? void 0 : _g.map((e) => exports.EncodedFileOutput.fromPartial(e))) || [];\n        message.streamOutputs = ((_h = object.streamOutputs) === null || _h === void 0 ? void 0 : _h.map((e) => exports.StreamOutput.fromPartial(e))) || [];\n        message.segmentOutputs = ((_j = object.segmentOutputs) === null || _j === void 0 ? void 0 : _j.map((e) => exports.SegmentedFileOutput.fromPartial(e))) || [];\n        message.imageOutputs = ((_k = object.imageOutputs) === null || _k === void 0 ? void 0 : _k.map((e) => exports.ImageOutput.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseWebEgressRequest() {\n    return {\n        url: \"\",\n        audioOnly: false,\n        videoOnly: false,\n        awaitStartSignal: false,\n        file: undefined,\n        stream: undefined,\n        segments: undefined,\n        preset: undefined,\n        advanced: undefined,\n        fileOutputs: [],\n        streamOutputs: [],\n        segmentOutputs: [],\n        imageOutputs: [],\n    };\n}\nexports.WebEgressRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.url !== undefined && message.url !== \"\") {\n            writer.uint32(10).string(message.url);\n        }\n        if (message.audioOnly === true) {\n            writer.uint32(16).bool(message.audioOnly);\n        }\n        if (message.videoOnly === true) {\n            writer.uint32(24).bool(message.videoOnly);\n        }\n        if (message.awaitStartSignal === true) {\n            writer.uint32(96).bool(message.awaitStartSignal);\n        }\n        if (message.file !== undefined) {\n            exports.EncodedFileOutput.encode(message.file, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.stream !== undefined) {\n            exports.StreamOutput.encode(message.stream, writer.uint32(42).fork()).ldelim();\n        }\n        if (message.segments !== undefined) {\n            exports.SegmentedFileOutput.encode(message.segments, writer.uint32(50).fork()).ldelim();\n        }\n        if (message.preset !== undefined) {\n            writer.uint32(56).int32(message.preset);\n        }\n        if (message.advanced !== undefined) {\n            exports.EncodingOptions.encode(message.advanced, writer.uint32(66).fork()).ldelim();\n        }\n        if (message.fileOutputs !== undefined && message.fileOutputs.length !== 0) {\n            for (const v of message.fileOutputs) {\n                exports.EncodedFileOutput.encode(v, writer.uint32(74).fork()).ldelim();\n            }\n        }\n        if (message.streamOutputs !== undefined && message.streamOutputs.length !== 0) {\n            for (const v of message.streamOutputs) {\n                exports.StreamOutput.encode(v, writer.uint32(82).fork()).ldelim();\n            }\n        }\n        if (message.segmentOutputs !== undefined && message.segmentOutputs.length !== 0) {\n            for (const v of message.segmentOutputs) {\n                exports.SegmentedFileOutput.encode(v, writer.uint32(90).fork()).ldelim();\n            }\n        }\n        if (message.imageOutputs !== undefined && message.imageOutputs.length !== 0) {\n            for (const v of message.imageOutputs) {\n                exports.ImageOutput.encode(v, writer.uint32(106).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseWebEgressRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.url = reader.string();\n                    break;\n                case 2:\n                    message.audioOnly = reader.bool();\n                    break;\n                case 3:\n                    message.videoOnly = reader.bool();\n                    break;\n                case 12:\n                    message.awaitStartSignal = reader.bool();\n                    break;\n                case 4:\n                    message.file = exports.EncodedFileOutput.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.stream = exports.StreamOutput.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.segments = exports.SegmentedFileOutput.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.preset = reader.int32();\n                    break;\n                case 8:\n                    message.advanced = exports.EncodingOptions.decode(reader, reader.uint32());\n                    break;\n                case 9:\n                    message.fileOutputs.push(exports.EncodedFileOutput.decode(reader, reader.uint32()));\n                    break;\n                case 10:\n                    message.streamOutputs.push(exports.StreamOutput.decode(reader, reader.uint32()));\n                    break;\n                case 11:\n                    message.segmentOutputs.push(exports.SegmentedFileOutput.decode(reader, reader.uint32()));\n                    break;\n                case 13:\n                    message.imageOutputs.push(exports.ImageOutput.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            url: isSet(object.url) ? String(object.url) : \"\",\n            audioOnly: isSet(object.audioOnly) ? Boolean(object.audioOnly) : false,\n            videoOnly: isSet(object.videoOnly) ? Boolean(object.videoOnly) : false,\n            awaitStartSignal: isSet(object.awaitStartSignal) ? Boolean(object.awaitStartSignal) : false,\n            file: isSet(object.file) ? exports.EncodedFileOutput.fromJSON(object.file) : undefined,\n            stream: isSet(object.stream) ? exports.StreamOutput.fromJSON(object.stream) : undefined,\n            segments: isSet(object.segments) ? exports.SegmentedFileOutput.fromJSON(object.segments) : undefined,\n            preset: isSet(object.preset) ? encodingOptionsPresetFromJSON(object.preset) : undefined,\n            advanced: isSet(object.advanced) ? exports.EncodingOptions.fromJSON(object.advanced) : undefined,\n            fileOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.fileOutputs)\n                ? object.fileOutputs.map((e) => exports.EncodedFileOutput.fromJSON(e))\n                : [],\n            streamOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.streamOutputs)\n                ? object.streamOutputs.map((e) => exports.StreamOutput.fromJSON(e))\n                : [],\n            segmentOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.segmentOutputs)\n                ? object.segmentOutputs.map((e) => exports.SegmentedFileOutput.fromJSON(e))\n                : [],\n            imageOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.imageOutputs)\n                ? object.imageOutputs.map((e) => exports.ImageOutput.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.url !== undefined && (obj.url = message.url);\n        message.audioOnly !== undefined && (obj.audioOnly = message.audioOnly);\n        message.videoOnly !== undefined && (obj.videoOnly = message.videoOnly);\n        message.awaitStartSignal !== undefined && (obj.awaitStartSignal = message.awaitStartSignal);\n        message.file !== undefined && (obj.file = message.file ? exports.EncodedFileOutput.toJSON(message.file) : undefined);\n        message.stream !== undefined && (obj.stream = message.stream ? exports.StreamOutput.toJSON(message.stream) : undefined);\n        message.segments !== undefined &&\n            (obj.segments = message.segments ? exports.SegmentedFileOutput.toJSON(message.segments) : undefined);\n        message.preset !== undefined &&\n            (obj.preset = message.preset !== undefined ? encodingOptionsPresetToJSON(message.preset) : undefined);\n        message.advanced !== undefined &&\n            (obj.advanced = message.advanced ? exports.EncodingOptions.toJSON(message.advanced) : undefined);\n        if (message.fileOutputs) {\n            obj.fileOutputs = message.fileOutputs.map((e) => e ? exports.EncodedFileOutput.toJSON(e) : undefined);\n        }\n        else {\n            obj.fileOutputs = [];\n        }\n        if (message.streamOutputs) {\n            obj.streamOutputs = message.streamOutputs.map((e) => e ? exports.StreamOutput.toJSON(e) : undefined);\n        }\n        else {\n            obj.streamOutputs = [];\n        }\n        if (message.segmentOutputs) {\n            obj.segmentOutputs = message.segmentOutputs.map((e) => e ? exports.SegmentedFileOutput.toJSON(e) : undefined);\n        }\n        else {\n            obj.segmentOutputs = [];\n        }\n        if (message.imageOutputs) {\n            obj.imageOutputs = message.imageOutputs.map((e) => e ? exports.ImageOutput.toJSON(e) : undefined);\n        }\n        else {\n            obj.imageOutputs = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        const message = createBaseWebEgressRequest();\n        message.url = (_a = object.url) !== null && _a !== void 0 ? _a : \"\";\n        message.audioOnly = (_b = object.audioOnly) !== null && _b !== void 0 ? _b : false;\n        message.videoOnly = (_c = object.videoOnly) !== null && _c !== void 0 ? _c : false;\n        message.awaitStartSignal = (_d = object.awaitStartSignal) !== null && _d !== void 0 ? _d : false;\n        message.file = (object.file !== undefined && object.file !== null)\n            ? exports.EncodedFileOutput.fromPartial(object.file)\n            : undefined;\n        message.stream = (object.stream !== undefined && object.stream !== null)\n            ? exports.StreamOutput.fromPartial(object.stream)\n            : undefined;\n        message.segments = (object.segments !== undefined && object.segments !== null)\n            ? exports.SegmentedFileOutput.fromPartial(object.segments)\n            : undefined;\n        message.preset = (_e = object.preset) !== null && _e !== void 0 ? _e : undefined;\n        message.advanced = (object.advanced !== undefined && object.advanced !== null)\n            ? exports.EncodingOptions.fromPartial(object.advanced)\n            : undefined;\n        message.fileOutputs = ((_f = object.fileOutputs) === null || _f === void 0 ? void 0 : _f.map((e) => exports.EncodedFileOutput.fromPartial(e))) || [];\n        message.streamOutputs = ((_g = object.streamOutputs) === null || _g === void 0 ? void 0 : _g.map((e) => exports.StreamOutput.fromPartial(e))) || [];\n        message.segmentOutputs = ((_h = object.segmentOutputs) === null || _h === void 0 ? void 0 : _h.map((e) => exports.SegmentedFileOutput.fromPartial(e))) || [];\n        message.imageOutputs = ((_j = object.imageOutputs) === null || _j === void 0 ? void 0 : _j.map((e) => exports.ImageOutput.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseParticipantEgressRequest() {\n    return {\n        roomName: \"\",\n        identity: \"\",\n        screenShare: false,\n        preset: undefined,\n        advanced: undefined,\n        fileOutputs: [],\n        streamOutputs: [],\n        segmentOutputs: [],\n        imageOutputs: [],\n    };\n}\nexports.ParticipantEgressRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.roomName !== undefined && message.roomName !== \"\") {\n            writer.uint32(10).string(message.roomName);\n        }\n        if (message.identity !== undefined && message.identity !== \"\") {\n            writer.uint32(18).string(message.identity);\n        }\n        if (message.screenShare === true) {\n            writer.uint32(24).bool(message.screenShare);\n        }\n        if (message.preset !== undefined) {\n            writer.uint32(32).int32(message.preset);\n        }\n        if (message.advanced !== undefined) {\n            exports.EncodingOptions.encode(message.advanced, writer.uint32(42).fork()).ldelim();\n        }\n        if (message.fileOutputs !== undefined && message.fileOutputs.length !== 0) {\n            for (const v of message.fileOutputs) {\n                exports.EncodedFileOutput.encode(v, writer.uint32(50).fork()).ldelim();\n            }\n        }\n        if (message.streamOutputs !== undefined && message.streamOutputs.length !== 0) {\n            for (const v of message.streamOutputs) {\n                exports.StreamOutput.encode(v, writer.uint32(58).fork()).ldelim();\n            }\n        }\n        if (message.segmentOutputs !== undefined && message.segmentOutputs.length !== 0) {\n            for (const v of message.segmentOutputs) {\n                exports.SegmentedFileOutput.encode(v, writer.uint32(66).fork()).ldelim();\n            }\n        }\n        if (message.imageOutputs !== undefined && message.imageOutputs.length !== 0) {\n            for (const v of message.imageOutputs) {\n                exports.ImageOutput.encode(v, writer.uint32(74).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseParticipantEgressRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.roomName = reader.string();\n                    break;\n                case 2:\n                    message.identity = reader.string();\n                    break;\n                case 3:\n                    message.screenShare = reader.bool();\n                    break;\n                case 4:\n                    message.preset = reader.int32();\n                    break;\n                case 5:\n                    message.advanced = exports.EncodingOptions.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.fileOutputs.push(exports.EncodedFileOutput.decode(reader, reader.uint32()));\n                    break;\n                case 7:\n                    message.streamOutputs.push(exports.StreamOutput.decode(reader, reader.uint32()));\n                    break;\n                case 8:\n                    message.segmentOutputs.push(exports.SegmentedFileOutput.decode(reader, reader.uint32()));\n                    break;\n                case 9:\n                    message.imageOutputs.push(exports.ImageOutput.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            roomName: isSet(object.roomName) ? String(object.roomName) : \"\",\n            identity: isSet(object.identity) ? String(object.identity) : \"\",\n            screenShare: isSet(object.screenShare) ? Boolean(object.screenShare) : false,\n            preset: isSet(object.preset) ? encodingOptionsPresetFromJSON(object.preset) : undefined,\n            advanced: isSet(object.advanced) ? exports.EncodingOptions.fromJSON(object.advanced) : undefined,\n            fileOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.fileOutputs)\n                ? object.fileOutputs.map((e) => exports.EncodedFileOutput.fromJSON(e))\n                : [],\n            streamOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.streamOutputs)\n                ? object.streamOutputs.map((e) => exports.StreamOutput.fromJSON(e))\n                : [],\n            segmentOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.segmentOutputs)\n                ? object.segmentOutputs.map((e) => exports.SegmentedFileOutput.fromJSON(e))\n                : [],\n            imageOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.imageOutputs)\n                ? object.imageOutputs.map((e) => exports.ImageOutput.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.roomName !== undefined && (obj.roomName = message.roomName);\n        message.identity !== undefined && (obj.identity = message.identity);\n        message.screenShare !== undefined && (obj.screenShare = message.screenShare);\n        message.preset !== undefined &&\n            (obj.preset = message.preset !== undefined ? encodingOptionsPresetToJSON(message.preset) : undefined);\n        message.advanced !== undefined &&\n            (obj.advanced = message.advanced ? exports.EncodingOptions.toJSON(message.advanced) : undefined);\n        if (message.fileOutputs) {\n            obj.fileOutputs = message.fileOutputs.map((e) => e ? exports.EncodedFileOutput.toJSON(e) : undefined);\n        }\n        else {\n            obj.fileOutputs = [];\n        }\n        if (message.streamOutputs) {\n            obj.streamOutputs = message.streamOutputs.map((e) => e ? exports.StreamOutput.toJSON(e) : undefined);\n        }\n        else {\n            obj.streamOutputs = [];\n        }\n        if (message.segmentOutputs) {\n            obj.segmentOutputs = message.segmentOutputs.map((e) => e ? exports.SegmentedFileOutput.toJSON(e) : undefined);\n        }\n        else {\n            obj.segmentOutputs = [];\n        }\n        if (message.imageOutputs) {\n            obj.imageOutputs = message.imageOutputs.map((e) => e ? exports.ImageOutput.toJSON(e) : undefined);\n        }\n        else {\n            obj.imageOutputs = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        const message = createBaseParticipantEgressRequest();\n        message.roomName = (_a = object.roomName) !== null && _a !== void 0 ? _a : \"\";\n        message.identity = (_b = object.identity) !== null && _b !== void 0 ? _b : \"\";\n        message.screenShare = (_c = object.screenShare) !== null && _c !== void 0 ? _c : false;\n        message.preset = (_d = object.preset) !== null && _d !== void 0 ? _d : undefined;\n        message.advanced = (object.advanced !== undefined && object.advanced !== null)\n            ? exports.EncodingOptions.fromPartial(object.advanced)\n            : undefined;\n        message.fileOutputs = ((_e = object.fileOutputs) === null || _e === void 0 ? void 0 : _e.map((e) => exports.EncodedFileOutput.fromPartial(e))) || [];\n        message.streamOutputs = ((_f = object.streamOutputs) === null || _f === void 0 ? void 0 : _f.map((e) => exports.StreamOutput.fromPartial(e))) || [];\n        message.segmentOutputs = ((_g = object.segmentOutputs) === null || _g === void 0 ? void 0 : _g.map((e) => exports.SegmentedFileOutput.fromPartial(e))) || [];\n        message.imageOutputs = ((_h = object.imageOutputs) === null || _h === void 0 ? void 0 : _h.map((e) => exports.ImageOutput.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseTrackCompositeEgressRequest() {\n    return {\n        roomName: \"\",\n        audioTrackId: \"\",\n        videoTrackId: \"\",\n        file: undefined,\n        stream: undefined,\n        segments: undefined,\n        preset: undefined,\n        advanced: undefined,\n        fileOutputs: [],\n        streamOutputs: [],\n        segmentOutputs: [],\n        imageOutputs: [],\n    };\n}\nexports.TrackCompositeEgressRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.roomName !== undefined && message.roomName !== \"\") {\n            writer.uint32(10).string(message.roomName);\n        }\n        if (message.audioTrackId !== undefined && message.audioTrackId !== \"\") {\n            writer.uint32(18).string(message.audioTrackId);\n        }\n        if (message.videoTrackId !== undefined && message.videoTrackId !== \"\") {\n            writer.uint32(26).string(message.videoTrackId);\n        }\n        if (message.file !== undefined) {\n            exports.EncodedFileOutput.encode(message.file, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.stream !== undefined) {\n            exports.StreamOutput.encode(message.stream, writer.uint32(42).fork()).ldelim();\n        }\n        if (message.segments !== undefined) {\n            exports.SegmentedFileOutput.encode(message.segments, writer.uint32(66).fork()).ldelim();\n        }\n        if (message.preset !== undefined) {\n            writer.uint32(48).int32(message.preset);\n        }\n        if (message.advanced !== undefined) {\n            exports.EncodingOptions.encode(message.advanced, writer.uint32(58).fork()).ldelim();\n        }\n        if (message.fileOutputs !== undefined && message.fileOutputs.length !== 0) {\n            for (const v of message.fileOutputs) {\n                exports.EncodedFileOutput.encode(v, writer.uint32(90).fork()).ldelim();\n            }\n        }\n        if (message.streamOutputs !== undefined && message.streamOutputs.length !== 0) {\n            for (const v of message.streamOutputs) {\n                exports.StreamOutput.encode(v, writer.uint32(98).fork()).ldelim();\n            }\n        }\n        if (message.segmentOutputs !== undefined && message.segmentOutputs.length !== 0) {\n            for (const v of message.segmentOutputs) {\n                exports.SegmentedFileOutput.encode(v, writer.uint32(106).fork()).ldelim();\n            }\n        }\n        if (message.imageOutputs !== undefined && message.imageOutputs.length !== 0) {\n            for (const v of message.imageOutputs) {\n                exports.ImageOutput.encode(v, writer.uint32(114).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTrackCompositeEgressRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.roomName = reader.string();\n                    break;\n                case 2:\n                    message.audioTrackId = reader.string();\n                    break;\n                case 3:\n                    message.videoTrackId = reader.string();\n                    break;\n                case 4:\n                    message.file = exports.EncodedFileOutput.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.stream = exports.StreamOutput.decode(reader, reader.uint32());\n                    break;\n                case 8:\n                    message.segments = exports.SegmentedFileOutput.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.preset = reader.int32();\n                    break;\n                case 7:\n                    message.advanced = exports.EncodingOptions.decode(reader, reader.uint32());\n                    break;\n                case 11:\n                    message.fileOutputs.push(exports.EncodedFileOutput.decode(reader, reader.uint32()));\n                    break;\n                case 12:\n                    message.streamOutputs.push(exports.StreamOutput.decode(reader, reader.uint32()));\n                    break;\n                case 13:\n                    message.segmentOutputs.push(exports.SegmentedFileOutput.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    message.imageOutputs.push(exports.ImageOutput.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            roomName: isSet(object.roomName) ? String(object.roomName) : \"\",\n            audioTrackId: isSet(object.audioTrackId) ? String(object.audioTrackId) : \"\",\n            videoTrackId: isSet(object.videoTrackId) ? String(object.videoTrackId) : \"\",\n            file: isSet(object.file) ? exports.EncodedFileOutput.fromJSON(object.file) : undefined,\n            stream: isSet(object.stream) ? exports.StreamOutput.fromJSON(object.stream) : undefined,\n            segments: isSet(object.segments) ? exports.SegmentedFileOutput.fromJSON(object.segments) : undefined,\n            preset: isSet(object.preset) ? encodingOptionsPresetFromJSON(object.preset) : undefined,\n            advanced: isSet(object.advanced) ? exports.EncodingOptions.fromJSON(object.advanced) : undefined,\n            fileOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.fileOutputs)\n                ? object.fileOutputs.map((e) => exports.EncodedFileOutput.fromJSON(e))\n                : [],\n            streamOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.streamOutputs)\n                ? object.streamOutputs.map((e) => exports.StreamOutput.fromJSON(e))\n                : [],\n            segmentOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.segmentOutputs)\n                ? object.segmentOutputs.map((e) => exports.SegmentedFileOutput.fromJSON(e))\n                : [],\n            imageOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.imageOutputs)\n                ? object.imageOutputs.map((e) => exports.ImageOutput.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.roomName !== undefined && (obj.roomName = message.roomName);\n        message.audioTrackId !== undefined && (obj.audioTrackId = message.audioTrackId);\n        message.videoTrackId !== undefined && (obj.videoTrackId = message.videoTrackId);\n        message.file !== undefined && (obj.file = message.file ? exports.EncodedFileOutput.toJSON(message.file) : undefined);\n        message.stream !== undefined && (obj.stream = message.stream ? exports.StreamOutput.toJSON(message.stream) : undefined);\n        message.segments !== undefined &&\n            (obj.segments = message.segments ? exports.SegmentedFileOutput.toJSON(message.segments) : undefined);\n        message.preset !== undefined &&\n            (obj.preset = message.preset !== undefined ? encodingOptionsPresetToJSON(message.preset) : undefined);\n        message.advanced !== undefined &&\n            (obj.advanced = message.advanced ? exports.EncodingOptions.toJSON(message.advanced) : undefined);\n        if (message.fileOutputs) {\n            obj.fileOutputs = message.fileOutputs.map((e) => e ? exports.EncodedFileOutput.toJSON(e) : undefined);\n        }\n        else {\n            obj.fileOutputs = [];\n        }\n        if (message.streamOutputs) {\n            obj.streamOutputs = message.streamOutputs.map((e) => e ? exports.StreamOutput.toJSON(e) : undefined);\n        }\n        else {\n            obj.streamOutputs = [];\n        }\n        if (message.segmentOutputs) {\n            obj.segmentOutputs = message.segmentOutputs.map((e) => e ? exports.SegmentedFileOutput.toJSON(e) : undefined);\n        }\n        else {\n            obj.segmentOutputs = [];\n        }\n        if (message.imageOutputs) {\n            obj.imageOutputs = message.imageOutputs.map((e) => e ? exports.ImageOutput.toJSON(e) : undefined);\n        }\n        else {\n            obj.imageOutputs = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        const message = createBaseTrackCompositeEgressRequest();\n        message.roomName = (_a = object.roomName) !== null && _a !== void 0 ? _a : \"\";\n        message.audioTrackId = (_b = object.audioTrackId) !== null && _b !== void 0 ? _b : \"\";\n        message.videoTrackId = (_c = object.videoTrackId) !== null && _c !== void 0 ? _c : \"\";\n        message.file = (object.file !== undefined && object.file !== null)\n            ? exports.EncodedFileOutput.fromPartial(object.file)\n            : undefined;\n        message.stream = (object.stream !== undefined && object.stream !== null)\n            ? exports.StreamOutput.fromPartial(object.stream)\n            : undefined;\n        message.segments = (object.segments !== undefined && object.segments !== null)\n            ? exports.SegmentedFileOutput.fromPartial(object.segments)\n            : undefined;\n        message.preset = (_d = object.preset) !== null && _d !== void 0 ? _d : undefined;\n        message.advanced = (object.advanced !== undefined && object.advanced !== null)\n            ? exports.EncodingOptions.fromPartial(object.advanced)\n            : undefined;\n        message.fileOutputs = ((_e = object.fileOutputs) === null || _e === void 0 ? void 0 : _e.map((e) => exports.EncodedFileOutput.fromPartial(e))) || [];\n        message.streamOutputs = ((_f = object.streamOutputs) === null || _f === void 0 ? void 0 : _f.map((e) => exports.StreamOutput.fromPartial(e))) || [];\n        message.segmentOutputs = ((_g = object.segmentOutputs) === null || _g === void 0 ? void 0 : _g.map((e) => exports.SegmentedFileOutput.fromPartial(e))) || [];\n        message.imageOutputs = ((_h = object.imageOutputs) === null || _h === void 0 ? void 0 : _h.map((e) => exports.ImageOutput.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseTrackEgressRequest() {\n    return { roomName: \"\", trackId: \"\", file: undefined, websocketUrl: undefined };\n}\nexports.TrackEgressRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.roomName !== undefined && message.roomName !== \"\") {\n            writer.uint32(10).string(message.roomName);\n        }\n        if (message.trackId !== undefined && message.trackId !== \"\") {\n            writer.uint32(18).string(message.trackId);\n        }\n        if (message.file !== undefined) {\n            exports.DirectFileOutput.encode(message.file, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.websocketUrl !== undefined) {\n            writer.uint32(34).string(message.websocketUrl);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTrackEgressRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.roomName = reader.string();\n                    break;\n                case 2:\n                    message.trackId = reader.string();\n                    break;\n                case 3:\n                    message.file = exports.DirectFileOutput.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.websocketUrl = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            roomName: isSet(object.roomName) ? String(object.roomName) : \"\",\n            trackId: isSet(object.trackId) ? String(object.trackId) : \"\",\n            file: isSet(object.file) ? exports.DirectFileOutput.fromJSON(object.file) : undefined,\n            websocketUrl: isSet(object.websocketUrl) ? String(object.websocketUrl) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.roomName !== undefined && (obj.roomName = message.roomName);\n        message.trackId !== undefined && (obj.trackId = message.trackId);\n        message.file !== undefined && (obj.file = message.file ? exports.DirectFileOutput.toJSON(message.file) : undefined);\n        message.websocketUrl !== undefined && (obj.websocketUrl = message.websocketUrl);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseTrackEgressRequest();\n        message.roomName = (_a = object.roomName) !== null && _a !== void 0 ? _a : \"\";\n        message.trackId = (_b = object.trackId) !== null && _b !== void 0 ? _b : \"\";\n        message.file = (object.file !== undefined && object.file !== null)\n            ? exports.DirectFileOutput.fromPartial(object.file)\n            : undefined;\n        message.websocketUrl = (_c = object.websocketUrl) !== null && _c !== void 0 ? _c : undefined;\n        return message;\n    },\n};\nfunction createBaseEncodedFileOutput() {\n    return {\n        fileType: 0,\n        filepath: \"\",\n        disableManifest: false,\n        s3: undefined,\n        gcp: undefined,\n        azure: undefined,\n        aliOSS: undefined,\n    };\n}\nexports.EncodedFileOutput = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.fileType !== undefined && message.fileType !== 0) {\n            writer.uint32(8).int32(message.fileType);\n        }\n        if (message.filepath !== undefined && message.filepath !== \"\") {\n            writer.uint32(18).string(message.filepath);\n        }\n        if (message.disableManifest === true) {\n            writer.uint32(48).bool(message.disableManifest);\n        }\n        if (message.s3 !== undefined) {\n            exports.S3Upload.encode(message.s3, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.gcp !== undefined) {\n            exports.GCPUpload.encode(message.gcp, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.azure !== undefined) {\n            exports.AzureBlobUpload.encode(message.azure, writer.uint32(42).fork()).ldelim();\n        }\n        if (message.aliOSS !== undefined) {\n            exports.AliOSSUpload.encode(message.aliOSS, writer.uint32(58).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseEncodedFileOutput();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.fileType = reader.int32();\n                    break;\n                case 2:\n                    message.filepath = reader.string();\n                    break;\n                case 6:\n                    message.disableManifest = reader.bool();\n                    break;\n                case 3:\n                    message.s3 = exports.S3Upload.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.gcp = exports.GCPUpload.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.azure = exports.AzureBlobUpload.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.aliOSS = exports.AliOSSUpload.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            fileType: isSet(object.fileType) ? encodedFileTypeFromJSON(object.fileType) : 0,\n            filepath: isSet(object.filepath) ? String(object.filepath) : \"\",\n            disableManifest: isSet(object.disableManifest) ? Boolean(object.disableManifest) : false,\n            s3: isSet(object.s3) ? exports.S3Upload.fromJSON(object.s3) : undefined,\n            gcp: isSet(object.gcp) ? exports.GCPUpload.fromJSON(object.gcp) : undefined,\n            azure: isSet(object.azure) ? exports.AzureBlobUpload.fromJSON(object.azure) : undefined,\n            aliOSS: isSet(object.aliOSS) ? exports.AliOSSUpload.fromJSON(object.aliOSS) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.fileType !== undefined && (obj.fileType = encodedFileTypeToJSON(message.fileType));\n        message.filepath !== undefined && (obj.filepath = message.filepath);\n        message.disableManifest !== undefined && (obj.disableManifest = message.disableManifest);\n        message.s3 !== undefined && (obj.s3 = message.s3 ? exports.S3Upload.toJSON(message.s3) : undefined);\n        message.gcp !== undefined && (obj.gcp = message.gcp ? exports.GCPUpload.toJSON(message.gcp) : undefined);\n        message.azure !== undefined && (obj.azure = message.azure ? exports.AzureBlobUpload.toJSON(message.azure) : undefined);\n        message.aliOSS !== undefined && (obj.aliOSS = message.aliOSS ? exports.AliOSSUpload.toJSON(message.aliOSS) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseEncodedFileOutput();\n        message.fileType = (_a = object.fileType) !== null && _a !== void 0 ? _a : 0;\n        message.filepath = (_b = object.filepath) !== null && _b !== void 0 ? _b : \"\";\n        message.disableManifest = (_c = object.disableManifest) !== null && _c !== void 0 ? _c : false;\n        message.s3 = (object.s3 !== undefined && object.s3 !== null) ? exports.S3Upload.fromPartial(object.s3) : undefined;\n        message.gcp = (object.gcp !== undefined && object.gcp !== null) ? exports.GCPUpload.fromPartial(object.gcp) : undefined;\n        message.azure = (object.azure !== undefined && object.azure !== null)\n            ? exports.AzureBlobUpload.fromPartial(object.azure)\n            : undefined;\n        message.aliOSS = (object.aliOSS !== undefined && object.aliOSS !== null)\n            ? exports.AliOSSUpload.fromPartial(object.aliOSS)\n            : undefined;\n        return message;\n    },\n};\nfunction createBaseSegmentedFileOutput() {\n    return {\n        protocol: 0,\n        filenamePrefix: \"\",\n        playlistName: \"\",\n        livePlaylistName: \"\",\n        segmentDuration: 0,\n        filenameSuffix: 0,\n        disableManifest: false,\n        s3: undefined,\n        gcp: undefined,\n        azure: undefined,\n        aliOSS: undefined,\n    };\n}\nexports.SegmentedFileOutput = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.protocol !== undefined && message.protocol !== 0) {\n            writer.uint32(8).int32(message.protocol);\n        }\n        if (message.filenamePrefix !== undefined && message.filenamePrefix !== \"\") {\n            writer.uint32(18).string(message.filenamePrefix);\n        }\n        if (message.playlistName !== undefined && message.playlistName !== \"\") {\n            writer.uint32(26).string(message.playlistName);\n        }\n        if (message.livePlaylistName !== undefined && message.livePlaylistName !== \"\") {\n            writer.uint32(90).string(message.livePlaylistName);\n        }\n        if (message.segmentDuration !== undefined && message.segmentDuration !== 0) {\n            writer.uint32(32).uint32(message.segmentDuration);\n        }\n        if (message.filenameSuffix !== undefined && message.filenameSuffix !== 0) {\n            writer.uint32(80).int32(message.filenameSuffix);\n        }\n        if (message.disableManifest === true) {\n            writer.uint32(64).bool(message.disableManifest);\n        }\n        if (message.s3 !== undefined) {\n            exports.S3Upload.encode(message.s3, writer.uint32(42).fork()).ldelim();\n        }\n        if (message.gcp !== undefined) {\n            exports.GCPUpload.encode(message.gcp, writer.uint32(50).fork()).ldelim();\n        }\n        if (message.azure !== undefined) {\n            exports.AzureBlobUpload.encode(message.azure, writer.uint32(58).fork()).ldelim();\n        }\n        if (message.aliOSS !== undefined) {\n            exports.AliOSSUpload.encode(message.aliOSS, writer.uint32(74).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSegmentedFileOutput();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.protocol = reader.int32();\n                    break;\n                case 2:\n                    message.filenamePrefix = reader.string();\n                    break;\n                case 3:\n                    message.playlistName = reader.string();\n                    break;\n                case 11:\n                    message.livePlaylistName = reader.string();\n                    break;\n                case 4:\n                    message.segmentDuration = reader.uint32();\n                    break;\n                case 10:\n                    message.filenameSuffix = reader.int32();\n                    break;\n                case 8:\n                    message.disableManifest = reader.bool();\n                    break;\n                case 5:\n                    message.s3 = exports.S3Upload.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.gcp = exports.GCPUpload.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.azure = exports.AzureBlobUpload.decode(reader, reader.uint32());\n                    break;\n                case 9:\n                    message.aliOSS = exports.AliOSSUpload.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            protocol: isSet(object.protocol) ? segmentedFileProtocolFromJSON(object.protocol) : 0,\n            filenamePrefix: isSet(object.filenamePrefix) ? String(object.filenamePrefix) : \"\",\n            playlistName: isSet(object.playlistName) ? String(object.playlistName) : \"\",\n            livePlaylistName: isSet(object.livePlaylistName) ? String(object.livePlaylistName) : \"\",\n            segmentDuration: isSet(object.segmentDuration) ? Number(object.segmentDuration) : 0,\n            filenameSuffix: isSet(object.filenameSuffix) ? segmentedFileSuffixFromJSON(object.filenameSuffix) : 0,\n            disableManifest: isSet(object.disableManifest) ? Boolean(object.disableManifest) : false,\n            s3: isSet(object.s3) ? exports.S3Upload.fromJSON(object.s3) : undefined,\n            gcp: isSet(object.gcp) ? exports.GCPUpload.fromJSON(object.gcp) : undefined,\n            azure: isSet(object.azure) ? exports.AzureBlobUpload.fromJSON(object.azure) : undefined,\n            aliOSS: isSet(object.aliOSS) ? exports.AliOSSUpload.fromJSON(object.aliOSS) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.protocol !== undefined && (obj.protocol = segmentedFileProtocolToJSON(message.protocol));\n        message.filenamePrefix !== undefined && (obj.filenamePrefix = message.filenamePrefix);\n        message.playlistName !== undefined && (obj.playlistName = message.playlistName);\n        message.livePlaylistName !== undefined && (obj.livePlaylistName = message.livePlaylistName);\n        message.segmentDuration !== undefined && (obj.segmentDuration = Math.round(message.segmentDuration));\n        message.filenameSuffix !== undefined && (obj.filenameSuffix = segmentedFileSuffixToJSON(message.filenameSuffix));\n        message.disableManifest !== undefined && (obj.disableManifest = message.disableManifest);\n        message.s3 !== undefined && (obj.s3 = message.s3 ? exports.S3Upload.toJSON(message.s3) : undefined);\n        message.gcp !== undefined && (obj.gcp = message.gcp ? exports.GCPUpload.toJSON(message.gcp) : undefined);\n        message.azure !== undefined && (obj.azure = message.azure ? exports.AzureBlobUpload.toJSON(message.azure) : undefined);\n        message.aliOSS !== undefined && (obj.aliOSS = message.aliOSS ? exports.AliOSSUpload.toJSON(message.aliOSS) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const message = createBaseSegmentedFileOutput();\n        message.protocol = (_a = object.protocol) !== null && _a !== void 0 ? _a : 0;\n        message.filenamePrefix = (_b = object.filenamePrefix) !== null && _b !== void 0 ? _b : \"\";\n        message.playlistName = (_c = object.playlistName) !== null && _c !== void 0 ? _c : \"\";\n        message.livePlaylistName = (_d = object.livePlaylistName) !== null && _d !== void 0 ? _d : \"\";\n        message.segmentDuration = (_e = object.segmentDuration) !== null && _e !== void 0 ? _e : 0;\n        message.filenameSuffix = (_f = object.filenameSuffix) !== null && _f !== void 0 ? _f : 0;\n        message.disableManifest = (_g = object.disableManifest) !== null && _g !== void 0 ? _g : false;\n        message.s3 = (object.s3 !== undefined && object.s3 !== null) ? exports.S3Upload.fromPartial(object.s3) : undefined;\n        message.gcp = (object.gcp !== undefined && object.gcp !== null) ? exports.GCPUpload.fromPartial(object.gcp) : undefined;\n        message.azure = (object.azure !== undefined && object.azure !== null)\n            ? exports.AzureBlobUpload.fromPartial(object.azure)\n            : undefined;\n        message.aliOSS = (object.aliOSS !== undefined && object.aliOSS !== null)\n            ? exports.AliOSSUpload.fromPartial(object.aliOSS)\n            : undefined;\n        return message;\n    },\n};\nfunction createBaseDirectFileOutput() {\n    return { filepath: \"\", disableManifest: false, s3: undefined, gcp: undefined, azure: undefined, aliOSS: undefined };\n}\nexports.DirectFileOutput = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.filepath !== undefined && message.filepath !== \"\") {\n            writer.uint32(10).string(message.filepath);\n        }\n        if (message.disableManifest === true) {\n            writer.uint32(40).bool(message.disableManifest);\n        }\n        if (message.s3 !== undefined) {\n            exports.S3Upload.encode(message.s3, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.gcp !== undefined) {\n            exports.GCPUpload.encode(message.gcp, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.azure !== undefined) {\n            exports.AzureBlobUpload.encode(message.azure, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.aliOSS !== undefined) {\n            exports.AliOSSUpload.encode(message.aliOSS, writer.uint32(50).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDirectFileOutput();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.filepath = reader.string();\n                    break;\n                case 5:\n                    message.disableManifest = reader.bool();\n                    break;\n                case 2:\n                    message.s3 = exports.S3Upload.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.gcp = exports.GCPUpload.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.azure = exports.AzureBlobUpload.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.aliOSS = exports.AliOSSUpload.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            filepath: isSet(object.filepath) ? String(object.filepath) : \"\",\n            disableManifest: isSet(object.disableManifest) ? Boolean(object.disableManifest) : false,\n            s3: isSet(object.s3) ? exports.S3Upload.fromJSON(object.s3) : undefined,\n            gcp: isSet(object.gcp) ? exports.GCPUpload.fromJSON(object.gcp) : undefined,\n            azure: isSet(object.azure) ? exports.AzureBlobUpload.fromJSON(object.azure) : undefined,\n            aliOSS: isSet(object.aliOSS) ? exports.AliOSSUpload.fromJSON(object.aliOSS) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.filepath !== undefined && (obj.filepath = message.filepath);\n        message.disableManifest !== undefined && (obj.disableManifest = message.disableManifest);\n        message.s3 !== undefined && (obj.s3 = message.s3 ? exports.S3Upload.toJSON(message.s3) : undefined);\n        message.gcp !== undefined && (obj.gcp = message.gcp ? exports.GCPUpload.toJSON(message.gcp) : undefined);\n        message.azure !== undefined && (obj.azure = message.azure ? exports.AzureBlobUpload.toJSON(message.azure) : undefined);\n        message.aliOSS !== undefined && (obj.aliOSS = message.aliOSS ? exports.AliOSSUpload.toJSON(message.aliOSS) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseDirectFileOutput();\n        message.filepath = (_a = object.filepath) !== null && _a !== void 0 ? _a : \"\";\n        message.disableManifest = (_b = object.disableManifest) !== null && _b !== void 0 ? _b : false;\n        message.s3 = (object.s3 !== undefined && object.s3 !== null) ? exports.S3Upload.fromPartial(object.s3) : undefined;\n        message.gcp = (object.gcp !== undefined && object.gcp !== null) ? exports.GCPUpload.fromPartial(object.gcp) : undefined;\n        message.azure = (object.azure !== undefined && object.azure !== null)\n            ? exports.AzureBlobUpload.fromPartial(object.azure)\n            : undefined;\n        message.aliOSS = (object.aliOSS !== undefined && object.aliOSS !== null)\n            ? exports.AliOSSUpload.fromPartial(object.aliOSS)\n            : undefined;\n        return message;\n    },\n};\nfunction createBaseImageOutput() {\n    return {\n        captureInterval: 0,\n        width: 0,\n        height: 0,\n        filenamePrefix: \"\",\n        filenameSuffix: 0,\n        imageCodec: 0,\n        disableManifest: false,\n        s3: undefined,\n        gcp: undefined,\n        azure: undefined,\n        aliOSS: undefined,\n    };\n}\nexports.ImageOutput = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.captureInterval !== undefined && message.captureInterval !== 0) {\n            writer.uint32(8).uint32(message.captureInterval);\n        }\n        if (message.width !== undefined && message.width !== 0) {\n            writer.uint32(16).int32(message.width);\n        }\n        if (message.height !== undefined && message.height !== 0) {\n            writer.uint32(24).int32(message.height);\n        }\n        if (message.filenamePrefix !== undefined && message.filenamePrefix !== \"\") {\n            writer.uint32(34).string(message.filenamePrefix);\n        }\n        if (message.filenameSuffix !== undefined && message.filenameSuffix !== 0) {\n            writer.uint32(40).int32(message.filenameSuffix);\n        }\n        if (message.imageCodec !== undefined && message.imageCodec !== 0) {\n            writer.uint32(48).int32(message.imageCodec);\n        }\n        if (message.disableManifest === true) {\n            writer.uint32(56).bool(message.disableManifest);\n        }\n        if (message.s3 !== undefined) {\n            exports.S3Upload.encode(message.s3, writer.uint32(66).fork()).ldelim();\n        }\n        if (message.gcp !== undefined) {\n            exports.GCPUpload.encode(message.gcp, writer.uint32(74).fork()).ldelim();\n        }\n        if (message.azure !== undefined) {\n            exports.AzureBlobUpload.encode(message.azure, writer.uint32(82).fork()).ldelim();\n        }\n        if (message.aliOSS !== undefined) {\n            exports.AliOSSUpload.encode(message.aliOSS, writer.uint32(90).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseImageOutput();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.captureInterval = reader.uint32();\n                    break;\n                case 2:\n                    message.width = reader.int32();\n                    break;\n                case 3:\n                    message.height = reader.int32();\n                    break;\n                case 4:\n                    message.filenamePrefix = reader.string();\n                    break;\n                case 5:\n                    message.filenameSuffix = reader.int32();\n                    break;\n                case 6:\n                    message.imageCodec = reader.int32();\n                    break;\n                case 7:\n                    message.disableManifest = reader.bool();\n                    break;\n                case 8:\n                    message.s3 = exports.S3Upload.decode(reader, reader.uint32());\n                    break;\n                case 9:\n                    message.gcp = exports.GCPUpload.decode(reader, reader.uint32());\n                    break;\n                case 10:\n                    message.azure = exports.AzureBlobUpload.decode(reader, reader.uint32());\n                    break;\n                case 11:\n                    message.aliOSS = exports.AliOSSUpload.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            captureInterval: isSet(object.captureInterval) ? Number(object.captureInterval) : 0,\n            width: isSet(object.width) ? Number(object.width) : 0,\n            height: isSet(object.height) ? Number(object.height) : 0,\n            filenamePrefix: isSet(object.filenamePrefix) ? String(object.filenamePrefix) : \"\",\n            filenameSuffix: isSet(object.filenameSuffix) ? imageFileSuffixFromJSON(object.filenameSuffix) : 0,\n            imageCodec: isSet(object.imageCodec) ? livekit_models_1.imageCodecFromJSON(object.imageCodec) : 0,\n            disableManifest: isSet(object.disableManifest) ? Boolean(object.disableManifest) : false,\n            s3: isSet(object.s3) ? exports.S3Upload.fromJSON(object.s3) : undefined,\n            gcp: isSet(object.gcp) ? exports.GCPUpload.fromJSON(object.gcp) : undefined,\n            azure: isSet(object.azure) ? exports.AzureBlobUpload.fromJSON(object.azure) : undefined,\n            aliOSS: isSet(object.aliOSS) ? exports.AliOSSUpload.fromJSON(object.aliOSS) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.captureInterval !== undefined && (obj.captureInterval = Math.round(message.captureInterval));\n        message.width !== undefined && (obj.width = Math.round(message.width));\n        message.height !== undefined && (obj.height = Math.round(message.height));\n        message.filenamePrefix !== undefined && (obj.filenamePrefix = message.filenamePrefix);\n        message.filenameSuffix !== undefined && (obj.filenameSuffix = imageFileSuffixToJSON(message.filenameSuffix));\n        message.imageCodec !== undefined && (obj.imageCodec = livekit_models_1.imageCodecToJSON(message.imageCodec));\n        message.disableManifest !== undefined && (obj.disableManifest = message.disableManifest);\n        message.s3 !== undefined && (obj.s3 = message.s3 ? exports.S3Upload.toJSON(message.s3) : undefined);\n        message.gcp !== undefined && (obj.gcp = message.gcp ? exports.GCPUpload.toJSON(message.gcp) : undefined);\n        message.azure !== undefined && (obj.azure = message.azure ? exports.AzureBlobUpload.toJSON(message.azure) : undefined);\n        message.aliOSS !== undefined && (obj.aliOSS = message.aliOSS ? exports.AliOSSUpload.toJSON(message.aliOSS) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const message = createBaseImageOutput();\n        message.captureInterval = (_a = object.captureInterval) !== null && _a !== void 0 ? _a : 0;\n        message.width = (_b = object.width) !== null && _b !== void 0 ? _b : 0;\n        message.height = (_c = object.height) !== null && _c !== void 0 ? _c : 0;\n        message.filenamePrefix = (_d = object.filenamePrefix) !== null && _d !== void 0 ? _d : \"\";\n        message.filenameSuffix = (_e = object.filenameSuffix) !== null && _e !== void 0 ? _e : 0;\n        message.imageCodec = (_f = object.imageCodec) !== null && _f !== void 0 ? _f : 0;\n        message.disableManifest = (_g = object.disableManifest) !== null && _g !== void 0 ? _g : false;\n        message.s3 = (object.s3 !== undefined && object.s3 !== null) ? exports.S3Upload.fromPartial(object.s3) : undefined;\n        message.gcp = (object.gcp !== undefined && object.gcp !== null) ? exports.GCPUpload.fromPartial(object.gcp) : undefined;\n        message.azure = (object.azure !== undefined && object.azure !== null)\n            ? exports.AzureBlobUpload.fromPartial(object.azure)\n            : undefined;\n        message.aliOSS = (object.aliOSS !== undefined && object.aliOSS !== null)\n            ? exports.AliOSSUpload.fromPartial(object.aliOSS)\n            : undefined;\n        return message;\n    },\n};\nfunction createBaseS3Upload() {\n    return {\n        accessKey: \"\",\n        secret: \"\",\n        region: \"\",\n        endpoint: \"\",\n        bucket: \"\",\n        forcePathStyle: false,\n        metadata: {},\n        tagging: \"\",\n    };\n}\nexports.S3Upload = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.accessKey !== undefined && message.accessKey !== \"\") {\n            writer.uint32(10).string(message.accessKey);\n        }\n        if (message.secret !== undefined && message.secret !== \"\") {\n            writer.uint32(18).string(message.secret);\n        }\n        if (message.region !== undefined && message.region !== \"\") {\n            writer.uint32(26).string(message.region);\n        }\n        if (message.endpoint !== undefined && message.endpoint !== \"\") {\n            writer.uint32(34).string(message.endpoint);\n        }\n        if (message.bucket !== undefined && message.bucket !== \"\") {\n            writer.uint32(42).string(message.bucket);\n        }\n        if (message.forcePathStyle === true) {\n            writer.uint32(48).bool(message.forcePathStyle);\n        }\n        Object.entries(message.metadata || {}).forEach(([key, value]) => {\n            exports.S3Upload_MetadataEntry.encode({ key: key, value }, writer.uint32(58).fork()).ldelim();\n        });\n        if (message.tagging !== undefined && message.tagging !== \"\") {\n            writer.uint32(66).string(message.tagging);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseS3Upload();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.accessKey = reader.string();\n                    break;\n                case 2:\n                    message.secret = reader.string();\n                    break;\n                case 3:\n                    message.region = reader.string();\n                    break;\n                case 4:\n                    message.endpoint = reader.string();\n                    break;\n                case 5:\n                    message.bucket = reader.string();\n                    break;\n                case 6:\n                    message.forcePathStyle = reader.bool();\n                    break;\n                case 7:\n                    const entry7 = exports.S3Upload_MetadataEntry.decode(reader, reader.uint32());\n                    if (entry7.value !== undefined) {\n                        message.metadata[entry7.key] = entry7.value;\n                    }\n                    break;\n                case 8:\n                    message.tagging = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            accessKey: isSet(object.accessKey) ? String(object.accessKey) : \"\",\n            secret: isSet(object.secret) ? String(object.secret) : \"\",\n            region: isSet(object.region) ? String(object.region) : \"\",\n            endpoint: isSet(object.endpoint) ? String(object.endpoint) : \"\",\n            bucket: isSet(object.bucket) ? String(object.bucket) : \"\",\n            forcePathStyle: isSet(object.forcePathStyle) ? Boolean(object.forcePathStyle) : false,\n            metadata: isObject(object.metadata)\n                ? Object.entries(object.metadata).reduce((acc, [key, value]) => {\n                    acc[key] = String(value);\n                    return acc;\n                }, {})\n                : {},\n            tagging: isSet(object.tagging) ? String(object.tagging) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.accessKey !== undefined && (obj.accessKey = message.accessKey);\n        message.secret !== undefined && (obj.secret = message.secret);\n        message.region !== undefined && (obj.region = message.region);\n        message.endpoint !== undefined && (obj.endpoint = message.endpoint);\n        message.bucket !== undefined && (obj.bucket = message.bucket);\n        message.forcePathStyle !== undefined && (obj.forcePathStyle = message.forcePathStyle);\n        obj.metadata = {};\n        if (message.metadata) {\n            Object.entries(message.metadata).forEach(([k, v]) => {\n                obj.metadata[k] = v;\n            });\n        }\n        message.tagging !== undefined && (obj.tagging = message.tagging);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        const message = createBaseS3Upload();\n        message.accessKey = (_a = object.accessKey) !== null && _a !== void 0 ? _a : \"\";\n        message.secret = (_b = object.secret) !== null && _b !== void 0 ? _b : \"\";\n        message.region = (_c = object.region) !== null && _c !== void 0 ? _c : \"\";\n        message.endpoint = (_d = object.endpoint) !== null && _d !== void 0 ? _d : \"\";\n        message.bucket = (_e = object.bucket) !== null && _e !== void 0 ? _e : \"\";\n        message.forcePathStyle = (_f = object.forcePathStyle) !== null && _f !== void 0 ? _f : false;\n        message.metadata = Object.entries((_g = object.metadata) !== null && _g !== void 0 ? _g : {}).reduce((acc, [key, value]) => {\n            if (value !== undefined) {\n                acc[key] = String(value);\n            }\n            return acc;\n        }, {});\n        message.tagging = (_h = object.tagging) !== null && _h !== void 0 ? _h : \"\";\n        return message;\n    },\n};\nfunction createBaseS3Upload_MetadataEntry() {\n    return { key: \"\", value: \"\" };\n}\nexports.S3Upload_MetadataEntry = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.key !== \"\") {\n            writer.uint32(10).string(message.key);\n        }\n        if (message.value !== \"\") {\n            writer.uint32(18).string(message.value);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseS3Upload_MetadataEntry();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.value = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return { key: isSet(object.key) ? String(object.key) : \"\", value: isSet(object.value) ? String(object.value) : \"\" };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.key !== undefined && (obj.key = message.key);\n        message.value !== undefined && (obj.value = message.value);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseS3Upload_MetadataEntry();\n        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : \"\";\n        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    },\n};\nfunction createBaseGCPUpload() {\n    return { credentials: \"\", bucket: \"\" };\n}\nexports.GCPUpload = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.credentials !== undefined && message.credentials !== \"\") {\n            writer.uint32(10).string(message.credentials);\n        }\n        if (message.bucket !== undefined && message.bucket !== \"\") {\n            writer.uint32(18).string(message.bucket);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGCPUpload();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.credentials = reader.string();\n                    break;\n                case 2:\n                    message.bucket = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            credentials: isSet(object.credentials) ? String(object.credentials) : \"\",\n            bucket: isSet(object.bucket) ? String(object.bucket) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.credentials !== undefined && (obj.credentials = message.credentials);\n        message.bucket !== undefined && (obj.bucket = message.bucket);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseGCPUpload();\n        message.credentials = (_a = object.credentials) !== null && _a !== void 0 ? _a : \"\";\n        message.bucket = (_b = object.bucket) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    },\n};\nfunction createBaseAzureBlobUpload() {\n    return { accountName: \"\", accountKey: \"\", containerName: \"\" };\n}\nexports.AzureBlobUpload = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.accountName !== undefined && message.accountName !== \"\") {\n            writer.uint32(10).string(message.accountName);\n        }\n        if (message.accountKey !== undefined && message.accountKey !== \"\") {\n            writer.uint32(18).string(message.accountKey);\n        }\n        if (message.containerName !== undefined && message.containerName !== \"\") {\n            writer.uint32(26).string(message.containerName);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseAzureBlobUpload();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.accountName = reader.string();\n                    break;\n                case 2:\n                    message.accountKey = reader.string();\n                    break;\n                case 3:\n                    message.containerName = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            accountName: isSet(object.accountName) ? String(object.accountName) : \"\",\n            accountKey: isSet(object.accountKey) ? String(object.accountKey) : \"\",\n            containerName: isSet(object.containerName) ? String(object.containerName) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.accountName !== undefined && (obj.accountName = message.accountName);\n        message.accountKey !== undefined && (obj.accountKey = message.accountKey);\n        message.containerName !== undefined && (obj.containerName = message.containerName);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseAzureBlobUpload();\n        message.accountName = (_a = object.accountName) !== null && _a !== void 0 ? _a : \"\";\n        message.accountKey = (_b = object.accountKey) !== null && _b !== void 0 ? _b : \"\";\n        message.containerName = (_c = object.containerName) !== null && _c !== void 0 ? _c : \"\";\n        return message;\n    },\n};\nfunction createBaseAliOSSUpload() {\n    return { accessKey: \"\", secret: \"\", region: \"\", endpoint: \"\", bucket: \"\" };\n}\nexports.AliOSSUpload = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.accessKey !== undefined && message.accessKey !== \"\") {\n            writer.uint32(10).string(message.accessKey);\n        }\n        if (message.secret !== undefined && message.secret !== \"\") {\n            writer.uint32(18).string(message.secret);\n        }\n        if (message.region !== undefined && message.region !== \"\") {\n            writer.uint32(26).string(message.region);\n        }\n        if (message.endpoint !== undefined && message.endpoint !== \"\") {\n            writer.uint32(34).string(message.endpoint);\n        }\n        if (message.bucket !== undefined && message.bucket !== \"\") {\n            writer.uint32(42).string(message.bucket);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseAliOSSUpload();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.accessKey = reader.string();\n                    break;\n                case 2:\n                    message.secret = reader.string();\n                    break;\n                case 3:\n                    message.region = reader.string();\n                    break;\n                case 4:\n                    message.endpoint = reader.string();\n                    break;\n                case 5:\n                    message.bucket = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            accessKey: isSet(object.accessKey) ? String(object.accessKey) : \"\",\n            secret: isSet(object.secret) ? String(object.secret) : \"\",\n            region: isSet(object.region) ? String(object.region) : \"\",\n            endpoint: isSet(object.endpoint) ? String(object.endpoint) : \"\",\n            bucket: isSet(object.bucket) ? String(object.bucket) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.accessKey !== undefined && (obj.accessKey = message.accessKey);\n        message.secret !== undefined && (obj.secret = message.secret);\n        message.region !== undefined && (obj.region = message.region);\n        message.endpoint !== undefined && (obj.endpoint = message.endpoint);\n        message.bucket !== undefined && (obj.bucket = message.bucket);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e;\n        const message = createBaseAliOSSUpload();\n        message.accessKey = (_a = object.accessKey) !== null && _a !== void 0 ? _a : \"\";\n        message.secret = (_b = object.secret) !== null && _b !== void 0 ? _b : \"\";\n        message.region = (_c = object.region) !== null && _c !== void 0 ? _c : \"\";\n        message.endpoint = (_d = object.endpoint) !== null && _d !== void 0 ? _d : \"\";\n        message.bucket = (_e = object.bucket) !== null && _e !== void 0 ? _e : \"\";\n        return message;\n    },\n};\nfunction createBaseStreamOutput() {\n    return { protocol: 0, urls: [] };\n}\nexports.StreamOutput = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.protocol !== undefined && message.protocol !== 0) {\n            writer.uint32(8).int32(message.protocol);\n        }\n        if (message.urls !== undefined && message.urls.length !== 0) {\n            for (const v of message.urls) {\n                writer.uint32(18).string(v);\n            }\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseStreamOutput();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.protocol = reader.int32();\n                    break;\n                case 2:\n                    message.urls.push(reader.string());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            protocol: isSet(object.protocol) ? streamProtocolFromJSON(object.protocol) : 0,\n            urls: Array.isArray(object === null || object === void 0 ? void 0 : object.urls) ? object.urls.map((e) => String(e)) : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.protocol !== undefined && (obj.protocol = streamProtocolToJSON(message.protocol));\n        if (message.urls) {\n            obj.urls = message.urls.map((e) => e);\n        }\n        else {\n            obj.urls = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseStreamOutput();\n        message.protocol = (_a = object.protocol) !== null && _a !== void 0 ? _a : 0;\n        message.urls = ((_b = object.urls) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];\n        return message;\n    },\n};\nfunction createBaseEncodingOptions() {\n    return {\n        width: 0,\n        height: 0,\n        depth: 0,\n        framerate: 0,\n        audioCodec: 0,\n        audioBitrate: 0,\n        audioFrequency: 0,\n        videoCodec: 0,\n        videoBitrate: 0,\n        keyFrameInterval: 0,\n    };\n}\nexports.EncodingOptions = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.width !== undefined && message.width !== 0) {\n            writer.uint32(8).int32(message.width);\n        }\n        if (message.height !== undefined && message.height !== 0) {\n            writer.uint32(16).int32(message.height);\n        }\n        if (message.depth !== undefined && message.depth !== 0) {\n            writer.uint32(24).int32(message.depth);\n        }\n        if (message.framerate !== undefined && message.framerate !== 0) {\n            writer.uint32(32).int32(message.framerate);\n        }\n        if (message.audioCodec !== undefined && message.audioCodec !== 0) {\n            writer.uint32(40).int32(message.audioCodec);\n        }\n        if (message.audioBitrate !== undefined && message.audioBitrate !== 0) {\n            writer.uint32(48).int32(message.audioBitrate);\n        }\n        if (message.audioFrequency !== undefined && message.audioFrequency !== 0) {\n            writer.uint32(56).int32(message.audioFrequency);\n        }\n        if (message.videoCodec !== undefined && message.videoCodec !== 0) {\n            writer.uint32(64).int32(message.videoCodec);\n        }\n        if (message.videoBitrate !== undefined && message.videoBitrate !== 0) {\n            writer.uint32(72).int32(message.videoBitrate);\n        }\n        if (message.keyFrameInterval !== undefined && message.keyFrameInterval !== 0) {\n            writer.uint32(81).double(message.keyFrameInterval);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseEncodingOptions();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.width = reader.int32();\n                    break;\n                case 2:\n                    message.height = reader.int32();\n                    break;\n                case 3:\n                    message.depth = reader.int32();\n                    break;\n                case 4:\n                    message.framerate = reader.int32();\n                    break;\n                case 5:\n                    message.audioCodec = reader.int32();\n                    break;\n                case 6:\n                    message.audioBitrate = reader.int32();\n                    break;\n                case 7:\n                    message.audioFrequency = reader.int32();\n                    break;\n                case 8:\n                    message.videoCodec = reader.int32();\n                    break;\n                case 9:\n                    message.videoBitrate = reader.int32();\n                    break;\n                case 10:\n                    message.keyFrameInterval = reader.double();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            width: isSet(object.width) ? Number(object.width) : 0,\n            height: isSet(object.height) ? Number(object.height) : 0,\n            depth: isSet(object.depth) ? Number(object.depth) : 0,\n            framerate: isSet(object.framerate) ? Number(object.framerate) : 0,\n            audioCodec: isSet(object.audioCodec) ? livekit_models_1.audioCodecFromJSON(object.audioCodec) : 0,\n            audioBitrate: isSet(object.audioBitrate) ? Number(object.audioBitrate) : 0,\n            audioFrequency: isSet(object.audioFrequency) ? Number(object.audioFrequency) : 0,\n            videoCodec: isSet(object.videoCodec) ? livekit_models_1.videoCodecFromJSON(object.videoCodec) : 0,\n            videoBitrate: isSet(object.videoBitrate) ? Number(object.videoBitrate) : 0,\n            keyFrameInterval: isSet(object.keyFrameInterval) ? Number(object.keyFrameInterval) : 0,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.width !== undefined && (obj.width = Math.round(message.width));\n        message.height !== undefined && (obj.height = Math.round(message.height));\n        message.depth !== undefined && (obj.depth = Math.round(message.depth));\n        message.framerate !== undefined && (obj.framerate = Math.round(message.framerate));\n        message.audioCodec !== undefined && (obj.audioCodec = livekit_models_1.audioCodecToJSON(message.audioCodec));\n        message.audioBitrate !== undefined && (obj.audioBitrate = Math.round(message.audioBitrate));\n        message.audioFrequency !== undefined && (obj.audioFrequency = Math.round(message.audioFrequency));\n        message.videoCodec !== undefined && (obj.videoCodec = livekit_models_1.videoCodecToJSON(message.videoCodec));\n        message.videoBitrate !== undefined && (obj.videoBitrate = Math.round(message.videoBitrate));\n        message.keyFrameInterval !== undefined && (obj.keyFrameInterval = message.keyFrameInterval);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n        const message = createBaseEncodingOptions();\n        message.width = (_a = object.width) !== null && _a !== void 0 ? _a : 0;\n        message.height = (_b = object.height) !== null && _b !== void 0 ? _b : 0;\n        message.depth = (_c = object.depth) !== null && _c !== void 0 ? _c : 0;\n        message.framerate = (_d = object.framerate) !== null && _d !== void 0 ? _d : 0;\n        message.audioCodec = (_e = object.audioCodec) !== null && _e !== void 0 ? _e : 0;\n        message.audioBitrate = (_f = object.audioBitrate) !== null && _f !== void 0 ? _f : 0;\n        message.audioFrequency = (_g = object.audioFrequency) !== null && _g !== void 0 ? _g : 0;\n        message.videoCodec = (_h = object.videoCodec) !== null && _h !== void 0 ? _h : 0;\n        message.videoBitrate = (_j = object.videoBitrate) !== null && _j !== void 0 ? _j : 0;\n        message.keyFrameInterval = (_k = object.keyFrameInterval) !== null && _k !== void 0 ? _k : 0;\n        return message;\n    },\n};\nfunction createBaseUpdateLayoutRequest() {\n    return { egressId: \"\", layout: \"\" };\n}\nexports.UpdateLayoutRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.egressId !== undefined && message.egressId !== \"\") {\n            writer.uint32(10).string(message.egressId);\n        }\n        if (message.layout !== undefined && message.layout !== \"\") {\n            writer.uint32(18).string(message.layout);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUpdateLayoutRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.egressId = reader.string();\n                    break;\n                case 2:\n                    message.layout = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            egressId: isSet(object.egressId) ? String(object.egressId) : \"\",\n            layout: isSet(object.layout) ? String(object.layout) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.egressId !== undefined && (obj.egressId = message.egressId);\n        message.layout !== undefined && (obj.layout = message.layout);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseUpdateLayoutRequest();\n        message.egressId = (_a = object.egressId) !== null && _a !== void 0 ? _a : \"\";\n        message.layout = (_b = object.layout) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    },\n};\nfunction createBaseUpdateStreamRequest() {\n    return { egressId: \"\", addOutputUrls: [], removeOutputUrls: [] };\n}\nexports.UpdateStreamRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.egressId !== undefined && message.egressId !== \"\") {\n            writer.uint32(10).string(message.egressId);\n        }\n        if (message.addOutputUrls !== undefined && message.addOutputUrls.length !== 0) {\n            for (const v of message.addOutputUrls) {\n                writer.uint32(18).string(v);\n            }\n        }\n        if (message.removeOutputUrls !== undefined && message.removeOutputUrls.length !== 0) {\n            for (const v of message.removeOutputUrls) {\n                writer.uint32(26).string(v);\n            }\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUpdateStreamRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.egressId = reader.string();\n                    break;\n                case 2:\n                    message.addOutputUrls.push(reader.string());\n                    break;\n                case 3:\n                    message.removeOutputUrls.push(reader.string());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            egressId: isSet(object.egressId) ? String(object.egressId) : \"\",\n            addOutputUrls: Array.isArray(object === null || object === void 0 ? void 0 : object.addOutputUrls) ? object.addOutputUrls.map((e) => String(e)) : [],\n            removeOutputUrls: Array.isArray(object === null || object === void 0 ? void 0 : object.removeOutputUrls)\n                ? object.removeOutputUrls.map((e) => String(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.egressId !== undefined && (obj.egressId = message.egressId);\n        if (message.addOutputUrls) {\n            obj.addOutputUrls = message.addOutputUrls.map((e) => e);\n        }\n        else {\n            obj.addOutputUrls = [];\n        }\n        if (message.removeOutputUrls) {\n            obj.removeOutputUrls = message.removeOutputUrls.map((e) => e);\n        }\n        else {\n            obj.removeOutputUrls = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseUpdateStreamRequest();\n        message.egressId = (_a = object.egressId) !== null && _a !== void 0 ? _a : \"\";\n        message.addOutputUrls = ((_b = object.addOutputUrls) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];\n        message.removeOutputUrls = ((_c = object.removeOutputUrls) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];\n        return message;\n    },\n};\nfunction createBaseUpdateOutputsRequest() {\n    return { egressId: \"\", addImageOutputs: [], removeImageOutputs: [] };\n}\nexports.UpdateOutputsRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.egressId !== undefined && message.egressId !== \"\") {\n            writer.uint32(10).string(message.egressId);\n        }\n        if (message.addImageOutputs !== undefined && message.addImageOutputs.length !== 0) {\n            for (const v of message.addImageOutputs) {\n                exports.ImageOutput.encode(v, writer.uint32(18).fork()).ldelim();\n            }\n        }\n        if (message.removeImageOutputs !== undefined && message.removeImageOutputs.length !== 0) {\n            for (const v of message.removeImageOutputs) {\n                exports.ImageOutput.encode(v, writer.uint32(26).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUpdateOutputsRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.egressId = reader.string();\n                    break;\n                case 2:\n                    message.addImageOutputs.push(exports.ImageOutput.decode(reader, reader.uint32()));\n                    break;\n                case 3:\n                    message.removeImageOutputs.push(exports.ImageOutput.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            egressId: isSet(object.egressId) ? String(object.egressId) : \"\",\n            addImageOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.addImageOutputs)\n                ? object.addImageOutputs.map((e) => exports.ImageOutput.fromJSON(e))\n                : [],\n            removeImageOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.removeImageOutputs)\n                ? object.removeImageOutputs.map((e) => exports.ImageOutput.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.egressId !== undefined && (obj.egressId = message.egressId);\n        if (message.addImageOutputs) {\n            obj.addImageOutputs = message.addImageOutputs.map((e) => e ? exports.ImageOutput.toJSON(e) : undefined);\n        }\n        else {\n            obj.addImageOutputs = [];\n        }\n        if (message.removeImageOutputs) {\n            obj.removeImageOutputs = message.removeImageOutputs.map((e) => e ? exports.ImageOutput.toJSON(e) : undefined);\n        }\n        else {\n            obj.removeImageOutputs = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseUpdateOutputsRequest();\n        message.egressId = (_a = object.egressId) !== null && _a !== void 0 ? _a : \"\";\n        message.addImageOutputs = ((_b = object.addImageOutputs) === null || _b === void 0 ? void 0 : _b.map((e) => exports.ImageOutput.fromPartial(e))) || [];\n        message.removeImageOutputs = ((_c = object.removeImageOutputs) === null || _c === void 0 ? void 0 : _c.map((e) => exports.ImageOutput.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseListEgressRequest() {\n    return { roomName: \"\", egressId: \"\", active: false };\n}\nexports.ListEgressRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.roomName !== undefined && message.roomName !== \"\") {\n            writer.uint32(10).string(message.roomName);\n        }\n        if (message.egressId !== undefined && message.egressId !== \"\") {\n            writer.uint32(18).string(message.egressId);\n        }\n        if (message.active === true) {\n            writer.uint32(24).bool(message.active);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseListEgressRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.roomName = reader.string();\n                    break;\n                case 2:\n                    message.egressId = reader.string();\n                    break;\n                case 3:\n                    message.active = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            roomName: isSet(object.roomName) ? String(object.roomName) : \"\",\n            egressId: isSet(object.egressId) ? String(object.egressId) : \"\",\n            active: isSet(object.active) ? Boolean(object.active) : false,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.roomName !== undefined && (obj.roomName = message.roomName);\n        message.egressId !== undefined && (obj.egressId = message.egressId);\n        message.active !== undefined && (obj.active = message.active);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseListEgressRequest();\n        message.roomName = (_a = object.roomName) !== null && _a !== void 0 ? _a : \"\";\n        message.egressId = (_b = object.egressId) !== null && _b !== void 0 ? _b : \"\";\n        message.active = (_c = object.active) !== null && _c !== void 0 ? _c : false;\n        return message;\n    },\n};\nfunction createBaseListEgressResponse() {\n    return { items: [] };\n}\nexports.ListEgressResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.items !== undefined && message.items.length !== 0) {\n            for (const v of message.items) {\n                exports.EgressInfo.encode(v, writer.uint32(10).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseListEgressResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.items.push(exports.EgressInfo.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return { items: Array.isArray(object === null || object === void 0 ? void 0 : object.items) ? object.items.map((e) => exports.EgressInfo.fromJSON(e)) : [] };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.items) {\n            obj.items = message.items.map((e) => e ? exports.EgressInfo.toJSON(e) : undefined);\n        }\n        else {\n            obj.items = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseListEgressResponse();\n        message.items = ((_a = object.items) === null || _a === void 0 ? void 0 : _a.map((e) => exports.EgressInfo.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseStopEgressRequest() {\n    return { egressId: \"\" };\n}\nexports.StopEgressRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.egressId !== undefined && message.egressId !== \"\") {\n            writer.uint32(10).string(message.egressId);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseStopEgressRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.egressId = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return { egressId: isSet(object.egressId) ? String(object.egressId) : \"\" };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.egressId !== undefined && (obj.egressId = message.egressId);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseStopEgressRequest();\n        message.egressId = (_a = object.egressId) !== null && _a !== void 0 ? _a : \"\";\n        return message;\n    },\n};\nfunction createBaseEgressInfo() {\n    return {\n        egressId: \"\",\n        roomId: \"\",\n        roomName: \"\",\n        status: 0,\n        startedAt: 0,\n        endedAt: 0,\n        updatedAt: 0,\n        error: \"\",\n        roomComposite: undefined,\n        web: undefined,\n        participant: undefined,\n        trackComposite: undefined,\n        track: undefined,\n        stream: undefined,\n        file: undefined,\n        segments: undefined,\n        streamResults: [],\n        fileResults: [],\n        segmentResults: [],\n        imageResults: [],\n    };\n}\nexports.EgressInfo = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.egressId !== undefined && message.egressId !== \"\") {\n            writer.uint32(10).string(message.egressId);\n        }\n        if (message.roomId !== undefined && message.roomId !== \"\") {\n            writer.uint32(18).string(message.roomId);\n        }\n        if (message.roomName !== undefined && message.roomName !== \"\") {\n            writer.uint32(106).string(message.roomName);\n        }\n        if (message.status !== undefined && message.status !== 0) {\n            writer.uint32(24).int32(message.status);\n        }\n        if (message.startedAt !== undefined && message.startedAt !== 0) {\n            writer.uint32(80).int64(message.startedAt);\n        }\n        if (message.endedAt !== undefined && message.endedAt !== 0) {\n            writer.uint32(88).int64(message.endedAt);\n        }\n        if (message.updatedAt !== undefined && message.updatedAt !== 0) {\n            writer.uint32(144).int64(message.updatedAt);\n        }\n        if (message.error !== undefined && message.error !== \"\") {\n            writer.uint32(74).string(message.error);\n        }\n        if (message.roomComposite !== undefined) {\n            exports.RoomCompositeEgressRequest.encode(message.roomComposite, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.web !== undefined) {\n            exports.WebEgressRequest.encode(message.web, writer.uint32(114).fork()).ldelim();\n        }\n        if (message.participant !== undefined) {\n            exports.ParticipantEgressRequest.encode(message.participant, writer.uint32(154).fork()).ldelim();\n        }\n        if (message.trackComposite !== undefined) {\n            exports.TrackCompositeEgressRequest.encode(message.trackComposite, writer.uint32(42).fork()).ldelim();\n        }\n        if (message.track !== undefined) {\n            exports.TrackEgressRequest.encode(message.track, writer.uint32(50).fork()).ldelim();\n        }\n        if (message.stream !== undefined) {\n            exports.StreamInfoList.encode(message.stream, writer.uint32(58).fork()).ldelim();\n        }\n        if (message.file !== undefined) {\n            exports.FileInfo.encode(message.file, writer.uint32(66).fork()).ldelim();\n        }\n        if (message.segments !== undefined) {\n            exports.SegmentsInfo.encode(message.segments, writer.uint32(98).fork()).ldelim();\n        }\n        if (message.streamResults !== undefined && message.streamResults.length !== 0) {\n            for (const v of message.streamResults) {\n                exports.StreamInfo.encode(v, writer.uint32(122).fork()).ldelim();\n            }\n        }\n        if (message.fileResults !== undefined && message.fileResults.length !== 0) {\n            for (const v of message.fileResults) {\n                exports.FileInfo.encode(v, writer.uint32(130).fork()).ldelim();\n            }\n        }\n        if (message.segmentResults !== undefined && message.segmentResults.length !== 0) {\n            for (const v of message.segmentResults) {\n                exports.SegmentsInfo.encode(v, writer.uint32(138).fork()).ldelim();\n            }\n        }\n        if (message.imageResults !== undefined && message.imageResults.length !== 0) {\n            for (const v of message.imageResults) {\n                exports.ImagesInfo.encode(v, writer.uint32(162).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseEgressInfo();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.egressId = reader.string();\n                    break;\n                case 2:\n                    message.roomId = reader.string();\n                    break;\n                case 13:\n                    message.roomName = reader.string();\n                    break;\n                case 3:\n                    message.status = reader.int32();\n                    break;\n                case 10:\n                    message.startedAt = longToNumber(reader.int64());\n                    break;\n                case 11:\n                    message.endedAt = longToNumber(reader.int64());\n                    break;\n                case 18:\n                    message.updatedAt = longToNumber(reader.int64());\n                    break;\n                case 9:\n                    message.error = reader.string();\n                    break;\n                case 4:\n                    message.roomComposite = exports.RoomCompositeEgressRequest.decode(reader, reader.uint32());\n                    break;\n                case 14:\n                    message.web = exports.WebEgressRequest.decode(reader, reader.uint32());\n                    break;\n                case 19:\n                    message.participant = exports.ParticipantEgressRequest.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.trackComposite = exports.TrackCompositeEgressRequest.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.track = exports.TrackEgressRequest.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.stream = exports.StreamInfoList.decode(reader, reader.uint32());\n                    break;\n                case 8:\n                    message.file = exports.FileInfo.decode(reader, reader.uint32());\n                    break;\n                case 12:\n                    message.segments = exports.SegmentsInfo.decode(reader, reader.uint32());\n                    break;\n                case 15:\n                    message.streamResults.push(exports.StreamInfo.decode(reader, reader.uint32()));\n                    break;\n                case 16:\n                    message.fileResults.push(exports.FileInfo.decode(reader, reader.uint32()));\n                    break;\n                case 17:\n                    message.segmentResults.push(exports.SegmentsInfo.decode(reader, reader.uint32()));\n                    break;\n                case 20:\n                    message.imageResults.push(exports.ImagesInfo.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            egressId: isSet(object.egressId) ? String(object.egressId) : \"\",\n            roomId: isSet(object.roomId) ? String(object.roomId) : \"\",\n            roomName: isSet(object.roomName) ? String(object.roomName) : \"\",\n            status: isSet(object.status) ? egressStatusFromJSON(object.status) : 0,\n            startedAt: isSet(object.startedAt) ? Number(object.startedAt) : 0,\n            endedAt: isSet(object.endedAt) ? Number(object.endedAt) : 0,\n            updatedAt: isSet(object.updatedAt) ? Number(object.updatedAt) : 0,\n            error: isSet(object.error) ? String(object.error) : \"\",\n            roomComposite: isSet(object.roomComposite)\n                ? exports.RoomCompositeEgressRequest.fromJSON(object.roomComposite)\n                : undefined,\n            web: isSet(object.web) ? exports.WebEgressRequest.fromJSON(object.web) : undefined,\n            participant: isSet(object.participant) ? exports.ParticipantEgressRequest.fromJSON(object.participant) : undefined,\n            trackComposite: isSet(object.trackComposite)\n                ? exports.TrackCompositeEgressRequest.fromJSON(object.trackComposite)\n                : undefined,\n            track: isSet(object.track) ? exports.TrackEgressRequest.fromJSON(object.track) : undefined,\n            stream: isSet(object.stream) ? exports.StreamInfoList.fromJSON(object.stream) : undefined,\n            file: isSet(object.file) ? exports.FileInfo.fromJSON(object.file) : undefined,\n            segments: isSet(object.segments) ? exports.SegmentsInfo.fromJSON(object.segments) : undefined,\n            streamResults: Array.isArray(object === null || object === void 0 ? void 0 : object.streamResults)\n                ? object.streamResults.map((e) => exports.StreamInfo.fromJSON(e))\n                : [],\n            fileResults: Array.isArray(object === null || object === void 0 ? void 0 : object.fileResults) ? object.fileResults.map((e) => exports.FileInfo.fromJSON(e)) : [],\n            segmentResults: Array.isArray(object === null || object === void 0 ? void 0 : object.segmentResults)\n                ? object.segmentResults.map((e) => exports.SegmentsInfo.fromJSON(e))\n                : [],\n            imageResults: Array.isArray(object === null || object === void 0 ? void 0 : object.imageResults)\n                ? object.imageResults.map((e) => exports.ImagesInfo.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.egressId !== undefined && (obj.egressId = message.egressId);\n        message.roomId !== undefined && (obj.roomId = message.roomId);\n        message.roomName !== undefined && (obj.roomName = message.roomName);\n        message.status !== undefined && (obj.status = egressStatusToJSON(message.status));\n        message.startedAt !== undefined && (obj.startedAt = Math.round(message.startedAt));\n        message.endedAt !== undefined && (obj.endedAt = Math.round(message.endedAt));\n        message.updatedAt !== undefined && (obj.updatedAt = Math.round(message.updatedAt));\n        message.error !== undefined && (obj.error = message.error);\n        message.roomComposite !== undefined &&\n            (obj.roomComposite = message.roomComposite\n                ? exports.RoomCompositeEgressRequest.toJSON(message.roomComposite)\n                : undefined);\n        message.web !== undefined && (obj.web = message.web ? exports.WebEgressRequest.toJSON(message.web) : undefined);\n        message.participant !== undefined &&\n            (obj.participant = message.participant ? exports.ParticipantEgressRequest.toJSON(message.participant) : undefined);\n        message.trackComposite !== undefined && (obj.trackComposite = message.trackComposite\n            ? exports.TrackCompositeEgressRequest.toJSON(message.trackComposite)\n            : undefined);\n        message.track !== undefined && (obj.track = message.track ? exports.TrackEgressRequest.toJSON(message.track) : undefined);\n        message.stream !== undefined && (obj.stream = message.stream ? exports.StreamInfoList.toJSON(message.stream) : undefined);\n        message.file !== undefined && (obj.file = message.file ? exports.FileInfo.toJSON(message.file) : undefined);\n        message.segments !== undefined &&\n            (obj.segments = message.segments ? exports.SegmentsInfo.toJSON(message.segments) : undefined);\n        if (message.streamResults) {\n            obj.streamResults = message.streamResults.map((e) => e ? exports.StreamInfo.toJSON(e) : undefined);\n        }\n        else {\n            obj.streamResults = [];\n        }\n        if (message.fileResults) {\n            obj.fileResults = message.fileResults.map((e) => e ? exports.FileInfo.toJSON(e) : undefined);\n        }\n        else {\n            obj.fileResults = [];\n        }\n        if (message.segmentResults) {\n            obj.segmentResults = message.segmentResults.map((e) => e ? exports.SegmentsInfo.toJSON(e) : undefined);\n        }\n        else {\n            obj.segmentResults = [];\n        }\n        if (message.imageResults) {\n            obj.imageResults = message.imageResults.map((e) => e ? exports.ImagesInfo.toJSON(e) : undefined);\n        }\n        else {\n            obj.imageResults = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n        const message = createBaseEgressInfo();\n        message.egressId = (_a = object.egressId) !== null && _a !== void 0 ? _a : \"\";\n        message.roomId = (_b = object.roomId) !== null && _b !== void 0 ? _b : \"\";\n        message.roomName = (_c = object.roomName) !== null && _c !== void 0 ? _c : \"\";\n        message.status = (_d = object.status) !== null && _d !== void 0 ? _d : 0;\n        message.startedAt = (_e = object.startedAt) !== null && _e !== void 0 ? _e : 0;\n        message.endedAt = (_f = object.endedAt) !== null && _f !== void 0 ? _f : 0;\n        message.updatedAt = (_g = object.updatedAt) !== null && _g !== void 0 ? _g : 0;\n        message.error = (_h = object.error) !== null && _h !== void 0 ? _h : \"\";\n        message.roomComposite = (object.roomComposite !== undefined && object.roomComposite !== null)\n            ? exports.RoomCompositeEgressRequest.fromPartial(object.roomComposite)\n            : undefined;\n        message.web = (object.web !== undefined && object.web !== null)\n            ? exports.WebEgressRequest.fromPartial(object.web)\n            : undefined;\n        message.participant = (object.participant !== undefined && object.participant !== null)\n            ? exports.ParticipantEgressRequest.fromPartial(object.participant)\n            : undefined;\n        message.trackComposite = (object.trackComposite !== undefined && object.trackComposite !== null)\n            ? exports.TrackCompositeEgressRequest.fromPartial(object.trackComposite)\n            : undefined;\n        message.track = (object.track !== undefined && object.track !== null)\n            ? exports.TrackEgressRequest.fromPartial(object.track)\n            : undefined;\n        message.stream = (object.stream !== undefined && object.stream !== null)\n            ? exports.StreamInfoList.fromPartial(object.stream)\n            : undefined;\n        message.file = (object.file !== undefined && object.file !== null) ? exports.FileInfo.fromPartial(object.file) : undefined;\n        message.segments = (object.segments !== undefined && object.segments !== null)\n            ? exports.SegmentsInfo.fromPartial(object.segments)\n            : undefined;\n        message.streamResults = ((_j = object.streamResults) === null || _j === void 0 ? void 0 : _j.map((e) => exports.StreamInfo.fromPartial(e))) || [];\n        message.fileResults = ((_k = object.fileResults) === null || _k === void 0 ? void 0 : _k.map((e) => exports.FileInfo.fromPartial(e))) || [];\n        message.segmentResults = ((_l = object.segmentResults) === null || _l === void 0 ? void 0 : _l.map((e) => exports.SegmentsInfo.fromPartial(e))) || [];\n        message.imageResults = ((_m = object.imageResults) === null || _m === void 0 ? void 0 : _m.map((e) => exports.ImagesInfo.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseStreamInfoList() {\n    return { info: [] };\n}\nexports.StreamInfoList = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.info !== undefined && message.info.length !== 0) {\n            for (const v of message.info) {\n                exports.StreamInfo.encode(v, writer.uint32(10).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseStreamInfoList();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.info.push(exports.StreamInfo.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return { info: Array.isArray(object === null || object === void 0 ? void 0 : object.info) ? object.info.map((e) => exports.StreamInfo.fromJSON(e)) : [] };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.info) {\n            obj.info = message.info.map((e) => e ? exports.StreamInfo.toJSON(e) : undefined);\n        }\n        else {\n            obj.info = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseStreamInfoList();\n        message.info = ((_a = object.info) === null || _a === void 0 ? void 0 : _a.map((e) => exports.StreamInfo.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseStreamInfo() {\n    return { url: \"\", startedAt: 0, endedAt: 0, duration: 0, status: 0, error: \"\" };\n}\nexports.StreamInfo = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.url !== undefined && message.url !== \"\") {\n            writer.uint32(10).string(message.url);\n        }\n        if (message.startedAt !== undefined && message.startedAt !== 0) {\n            writer.uint32(16).int64(message.startedAt);\n        }\n        if (message.endedAt !== undefined && message.endedAt !== 0) {\n            writer.uint32(24).int64(message.endedAt);\n        }\n        if (message.duration !== undefined && message.duration !== 0) {\n            writer.uint32(32).int64(message.duration);\n        }\n        if (message.status !== undefined && message.status !== 0) {\n            writer.uint32(40).int32(message.status);\n        }\n        if (message.error !== undefined && message.error !== \"\") {\n            writer.uint32(50).string(message.error);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseStreamInfo();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.url = reader.string();\n                    break;\n                case 2:\n                    message.startedAt = longToNumber(reader.int64());\n                    break;\n                case 3:\n                    message.endedAt = longToNumber(reader.int64());\n                    break;\n                case 4:\n                    message.duration = longToNumber(reader.int64());\n                    break;\n                case 5:\n                    message.status = reader.int32();\n                    break;\n                case 6:\n                    message.error = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            url: isSet(object.url) ? String(object.url) : \"\",\n            startedAt: isSet(object.startedAt) ? Number(object.startedAt) : 0,\n            endedAt: isSet(object.endedAt) ? Number(object.endedAt) : 0,\n            duration: isSet(object.duration) ? Number(object.duration) : 0,\n            status: isSet(object.status) ? streamInfo_StatusFromJSON(object.status) : 0,\n            error: isSet(object.error) ? String(object.error) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.url !== undefined && (obj.url = message.url);\n        message.startedAt !== undefined && (obj.startedAt = Math.round(message.startedAt));\n        message.endedAt !== undefined && (obj.endedAt = Math.round(message.endedAt));\n        message.duration !== undefined && (obj.duration = Math.round(message.duration));\n        message.status !== undefined && (obj.status = streamInfo_StatusToJSON(message.status));\n        message.error !== undefined && (obj.error = message.error);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f;\n        const message = createBaseStreamInfo();\n        message.url = (_a = object.url) !== null && _a !== void 0 ? _a : \"\";\n        message.startedAt = (_b = object.startedAt) !== null && _b !== void 0 ? _b : 0;\n        message.endedAt = (_c = object.endedAt) !== null && _c !== void 0 ? _c : 0;\n        message.duration = (_d = object.duration) !== null && _d !== void 0 ? _d : 0;\n        message.status = (_e = object.status) !== null && _e !== void 0 ? _e : 0;\n        message.error = (_f = object.error) !== null && _f !== void 0 ? _f : \"\";\n        return message;\n    },\n};\nfunction createBaseFileInfo() {\n    return { filename: \"\", startedAt: 0, endedAt: 0, duration: 0, size: 0, location: \"\" };\n}\nexports.FileInfo = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.filename !== undefined && message.filename !== \"\") {\n            writer.uint32(10).string(message.filename);\n        }\n        if (message.startedAt !== undefined && message.startedAt !== 0) {\n            writer.uint32(16).int64(message.startedAt);\n        }\n        if (message.endedAt !== undefined && message.endedAt !== 0) {\n            writer.uint32(24).int64(message.endedAt);\n        }\n        if (message.duration !== undefined && message.duration !== 0) {\n            writer.uint32(48).int64(message.duration);\n        }\n        if (message.size !== undefined && message.size !== 0) {\n            writer.uint32(32).int64(message.size);\n        }\n        if (message.location !== undefined && message.location !== \"\") {\n            writer.uint32(42).string(message.location);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseFileInfo();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.filename = reader.string();\n                    break;\n                case 2:\n                    message.startedAt = longToNumber(reader.int64());\n                    break;\n                case 3:\n                    message.endedAt = longToNumber(reader.int64());\n                    break;\n                case 6:\n                    message.duration = longToNumber(reader.int64());\n                    break;\n                case 4:\n                    message.size = longToNumber(reader.int64());\n                    break;\n                case 5:\n                    message.location = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            filename: isSet(object.filename) ? String(object.filename) : \"\",\n            startedAt: isSet(object.startedAt) ? Number(object.startedAt) : 0,\n            endedAt: isSet(object.endedAt) ? Number(object.endedAt) : 0,\n            duration: isSet(object.duration) ? Number(object.duration) : 0,\n            size: isSet(object.size) ? Number(object.size) : 0,\n            location: isSet(object.location) ? String(object.location) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.filename !== undefined && (obj.filename = message.filename);\n        message.startedAt !== undefined && (obj.startedAt = Math.round(message.startedAt));\n        message.endedAt !== undefined && (obj.endedAt = Math.round(message.endedAt));\n        message.duration !== undefined && (obj.duration = Math.round(message.duration));\n        message.size !== undefined && (obj.size = Math.round(message.size));\n        message.location !== undefined && (obj.location = message.location);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f;\n        const message = createBaseFileInfo();\n        message.filename = (_a = object.filename) !== null && _a !== void 0 ? _a : \"\";\n        message.startedAt = (_b = object.startedAt) !== null && _b !== void 0 ? _b : 0;\n        message.endedAt = (_c = object.endedAt) !== null && _c !== void 0 ? _c : 0;\n        message.duration = (_d = object.duration) !== null && _d !== void 0 ? _d : 0;\n        message.size = (_e = object.size) !== null && _e !== void 0 ? _e : 0;\n        message.location = (_f = object.location) !== null && _f !== void 0 ? _f : \"\";\n        return message;\n    },\n};\nfunction createBaseSegmentsInfo() {\n    return {\n        playlistName: \"\",\n        livePlaylistName: \"\",\n        duration: 0,\n        size: 0,\n        playlistLocation: \"\",\n        livePlaylistLocation: \"\",\n        segmentCount: 0,\n        startedAt: 0,\n        endedAt: 0,\n    };\n}\nexports.SegmentsInfo = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.playlistName !== undefined && message.playlistName !== \"\") {\n            writer.uint32(10).string(message.playlistName);\n        }\n        if (message.livePlaylistName !== undefined && message.livePlaylistName !== \"\") {\n            writer.uint32(66).string(message.livePlaylistName);\n        }\n        if (message.duration !== undefined && message.duration !== 0) {\n            writer.uint32(16).int64(message.duration);\n        }\n        if (message.size !== undefined && message.size !== 0) {\n            writer.uint32(24).int64(message.size);\n        }\n        if (message.playlistLocation !== undefined && message.playlistLocation !== \"\") {\n            writer.uint32(34).string(message.playlistLocation);\n        }\n        if (message.livePlaylistLocation !== undefined && message.livePlaylistLocation !== \"\") {\n            writer.uint32(74).string(message.livePlaylistLocation);\n        }\n        if (message.segmentCount !== undefined && message.segmentCount !== 0) {\n            writer.uint32(40).int64(message.segmentCount);\n        }\n        if (message.startedAt !== undefined && message.startedAt !== 0) {\n            writer.uint32(48).int64(message.startedAt);\n        }\n        if (message.endedAt !== undefined && message.endedAt !== 0) {\n            writer.uint32(56).int64(message.endedAt);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSegmentsInfo();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.playlistName = reader.string();\n                    break;\n                case 8:\n                    message.livePlaylistName = reader.string();\n                    break;\n                case 2:\n                    message.duration = longToNumber(reader.int64());\n                    break;\n                case 3:\n                    message.size = longToNumber(reader.int64());\n                    break;\n                case 4:\n                    message.playlistLocation = reader.string();\n                    break;\n                case 9:\n                    message.livePlaylistLocation = reader.string();\n                    break;\n                case 5:\n                    message.segmentCount = longToNumber(reader.int64());\n                    break;\n                case 6:\n                    message.startedAt = longToNumber(reader.int64());\n                    break;\n                case 7:\n                    message.endedAt = longToNumber(reader.int64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            playlistName: isSet(object.playlistName) ? String(object.playlistName) : \"\",\n            livePlaylistName: isSet(object.livePlaylistName) ? String(object.livePlaylistName) : \"\",\n            duration: isSet(object.duration) ? Number(object.duration) : 0,\n            size: isSet(object.size) ? Number(object.size) : 0,\n            playlistLocation: isSet(object.playlistLocation) ? String(object.playlistLocation) : \"\",\n            livePlaylistLocation: isSet(object.livePlaylistLocation) ? String(object.livePlaylistLocation) : \"\",\n            segmentCount: isSet(object.segmentCount) ? Number(object.segmentCount) : 0,\n            startedAt: isSet(object.startedAt) ? Number(object.startedAt) : 0,\n            endedAt: isSet(object.endedAt) ? Number(object.endedAt) : 0,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.playlistName !== undefined && (obj.playlistName = message.playlistName);\n        message.livePlaylistName !== undefined && (obj.livePlaylistName = message.livePlaylistName);\n        message.duration !== undefined && (obj.duration = Math.round(message.duration));\n        message.size !== undefined && (obj.size = Math.round(message.size));\n        message.playlistLocation !== undefined && (obj.playlistLocation = message.playlistLocation);\n        message.livePlaylistLocation !== undefined && (obj.livePlaylistLocation = message.livePlaylistLocation);\n        message.segmentCount !== undefined && (obj.segmentCount = Math.round(message.segmentCount));\n        message.startedAt !== undefined && (obj.startedAt = Math.round(message.startedAt));\n        message.endedAt !== undefined && (obj.endedAt = Math.round(message.endedAt));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        const message = createBaseSegmentsInfo();\n        message.playlistName = (_a = object.playlistName) !== null && _a !== void 0 ? _a : \"\";\n        message.livePlaylistName = (_b = object.livePlaylistName) !== null && _b !== void 0 ? _b : \"\";\n        message.duration = (_c = object.duration) !== null && _c !== void 0 ? _c : 0;\n        message.size = (_d = object.size) !== null && _d !== void 0 ? _d : 0;\n        message.playlistLocation = (_e = object.playlistLocation) !== null && _e !== void 0 ? _e : \"\";\n        message.livePlaylistLocation = (_f = object.livePlaylistLocation) !== null && _f !== void 0 ? _f : \"\";\n        message.segmentCount = (_g = object.segmentCount) !== null && _g !== void 0 ? _g : 0;\n        message.startedAt = (_h = object.startedAt) !== null && _h !== void 0 ? _h : 0;\n        message.endedAt = (_j = object.endedAt) !== null && _j !== void 0 ? _j : 0;\n        return message;\n    },\n};\nfunction createBaseImagesInfo() {\n    return { imageCount: 0, startedAt: 0, endedAt: 0 };\n}\nexports.ImagesInfo = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.imageCount !== undefined && message.imageCount !== 0) {\n            writer.uint32(8).int64(message.imageCount);\n        }\n        if (message.startedAt !== undefined && message.startedAt !== 0) {\n            writer.uint32(16).int64(message.startedAt);\n        }\n        if (message.endedAt !== undefined && message.endedAt !== 0) {\n            writer.uint32(24).int64(message.endedAt);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseImagesInfo();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.imageCount = longToNumber(reader.int64());\n                    break;\n                case 2:\n                    message.startedAt = longToNumber(reader.int64());\n                    break;\n                case 3:\n                    message.endedAt = longToNumber(reader.int64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            imageCount: isSet(object.imageCount) ? Number(object.imageCount) : 0,\n            startedAt: isSet(object.startedAt) ? Number(object.startedAt) : 0,\n            endedAt: isSet(object.endedAt) ? Number(object.endedAt) : 0,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.imageCount !== undefined && (obj.imageCount = Math.round(message.imageCount));\n        message.startedAt !== undefined && (obj.startedAt = Math.round(message.startedAt));\n        message.endedAt !== undefined && (obj.endedAt = Math.round(message.endedAt));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseImagesInfo();\n        message.imageCount = (_a = object.imageCount) !== null && _a !== void 0 ? _a : 0;\n        message.startedAt = (_b = object.startedAt) !== null && _b !== void 0 ? _b : 0;\n        message.endedAt = (_c = object.endedAt) !== null && _c !== void 0 ? _c : 0;\n        return message;\n    },\n};\nfunction createBaseAutoParticipantEgress() {\n    return { preset: undefined, advanced: undefined, fileOutputs: [], segmentOutputs: [] };\n}\nexports.AutoParticipantEgress = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.preset !== undefined) {\n            writer.uint32(8).int32(message.preset);\n        }\n        if (message.advanced !== undefined) {\n            exports.EncodingOptions.encode(message.advanced, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.fileOutputs !== undefined && message.fileOutputs.length !== 0) {\n            for (const v of message.fileOutputs) {\n                exports.EncodedFileOutput.encode(v, writer.uint32(26).fork()).ldelim();\n            }\n        }\n        if (message.segmentOutputs !== undefined && message.segmentOutputs.length !== 0) {\n            for (const v of message.segmentOutputs) {\n                exports.SegmentedFileOutput.encode(v, writer.uint32(34).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseAutoParticipantEgress();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.preset = reader.int32();\n                    break;\n                case 2:\n                    message.advanced = exports.EncodingOptions.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.fileOutputs.push(exports.EncodedFileOutput.decode(reader, reader.uint32()));\n                    break;\n                case 4:\n                    message.segmentOutputs.push(exports.SegmentedFileOutput.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            preset: isSet(object.preset) ? encodingOptionsPresetFromJSON(object.preset) : undefined,\n            advanced: isSet(object.advanced) ? exports.EncodingOptions.fromJSON(object.advanced) : undefined,\n            fileOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.fileOutputs)\n                ? object.fileOutputs.map((e) => exports.EncodedFileOutput.fromJSON(e))\n                : [],\n            segmentOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.segmentOutputs)\n                ? object.segmentOutputs.map((e) => exports.SegmentedFileOutput.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.preset !== undefined &&\n            (obj.preset = message.preset !== undefined ? encodingOptionsPresetToJSON(message.preset) : undefined);\n        message.advanced !== undefined &&\n            (obj.advanced = message.advanced ? exports.EncodingOptions.toJSON(message.advanced) : undefined);\n        if (message.fileOutputs) {\n            obj.fileOutputs = message.fileOutputs.map((e) => e ? exports.EncodedFileOutput.toJSON(e) : undefined);\n        }\n        else {\n            obj.fileOutputs = [];\n        }\n        if (message.segmentOutputs) {\n            obj.segmentOutputs = message.segmentOutputs.map((e) => e ? exports.SegmentedFileOutput.toJSON(e) : undefined);\n        }\n        else {\n            obj.segmentOutputs = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseAutoParticipantEgress();\n        message.preset = (_a = object.preset) !== null && _a !== void 0 ? _a : undefined;\n        message.advanced = (object.advanced !== undefined && object.advanced !== null)\n            ? exports.EncodingOptions.fromPartial(object.advanced)\n            : undefined;\n        message.fileOutputs = ((_b = object.fileOutputs) === null || _b === void 0 ? void 0 : _b.map((e) => exports.EncodedFileOutput.fromPartial(e))) || [];\n        message.segmentOutputs = ((_c = object.segmentOutputs) === null || _c === void 0 ? void 0 : _c.map((e) => exports.SegmentedFileOutput.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseAutoTrackEgress() {\n    return { filepath: \"\", disableManifest: false, s3: undefined, gcp: undefined, azure: undefined };\n}\nexports.AutoTrackEgress = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.filepath !== undefined && message.filepath !== \"\") {\n            writer.uint32(10).string(message.filepath);\n        }\n        if (message.disableManifest === true) {\n            writer.uint32(40).bool(message.disableManifest);\n        }\n        if (message.s3 !== undefined) {\n            exports.S3Upload.encode(message.s3, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.gcp !== undefined) {\n            exports.GCPUpload.encode(message.gcp, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.azure !== undefined) {\n            exports.AzureBlobUpload.encode(message.azure, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseAutoTrackEgress();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.filepath = reader.string();\n                    break;\n                case 5:\n                    message.disableManifest = reader.bool();\n                    break;\n                case 2:\n                    message.s3 = exports.S3Upload.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.gcp = exports.GCPUpload.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.azure = exports.AzureBlobUpload.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            filepath: isSet(object.filepath) ? String(object.filepath) : \"\",\n            disableManifest: isSet(object.disableManifest) ? Boolean(object.disableManifest) : false,\n            s3: isSet(object.s3) ? exports.S3Upload.fromJSON(object.s3) : undefined,\n            gcp: isSet(object.gcp) ? exports.GCPUpload.fromJSON(object.gcp) : undefined,\n            azure: isSet(object.azure) ? exports.AzureBlobUpload.fromJSON(object.azure) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.filepath !== undefined && (obj.filepath = message.filepath);\n        message.disableManifest !== undefined && (obj.disableManifest = message.disableManifest);\n        message.s3 !== undefined && (obj.s3 = message.s3 ? exports.S3Upload.toJSON(message.s3) : undefined);\n        message.gcp !== undefined && (obj.gcp = message.gcp ? exports.GCPUpload.toJSON(message.gcp) : undefined);\n        message.azure !== undefined && (obj.azure = message.azure ? exports.AzureBlobUpload.toJSON(message.azure) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseAutoTrackEgress();\n        message.filepath = (_a = object.filepath) !== null && _a !== void 0 ? _a : \"\";\n        message.disableManifest = (_b = object.disableManifest) !== null && _b !== void 0 ? _b : false;\n        message.s3 = (object.s3 !== undefined && object.s3 !== null) ? exports.S3Upload.fromPartial(object.s3) : undefined;\n        message.gcp = (object.gcp !== undefined && object.gcp !== null) ? exports.GCPUpload.fromPartial(object.gcp) : undefined;\n        message.azure = (object.azure !== undefined && object.azure !== null)\n            ? exports.AzureBlobUpload.fromPartial(object.azure)\n            : undefined;\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\") {\n        return globalThis;\n    }\n    if (typeof self !== \"undefined\") {\n        return self;\n    }\n    if (typeof window !== \"undefined\") {\n        return window;\n    }\n    if (typeof global !== \"undefined\") {\n        return global;\n    }\n    throw \"Unable to locate global object\";\n})();\nfunction longToNumber(long) {\n    if (long.gt(Number.MAX_SAFE_INTEGER)) {\n        throw new globalThis.Error(\"Value is larger than Number.MAX_SAFE_INTEGER\");\n    }\n    return long.toNumber();\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\nfunction isObject(value) {\n    return typeof value === \"object\" && value !== null;\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=livekit_egress.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/livekit-server-sdk/dist/proto/livekit_egress.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/livekit-server-sdk/dist/proto/livekit_ingress.js":
/*!***********************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/proto/livekit_ingress.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DeleteIngressRequest = exports.ListIngressResponse = exports.ListIngressRequest = exports.UpdateIngressRequest = exports.InputAudioState = exports.InputVideoState = exports.IngressState = exports.IngressInfo = exports.IngressVideoEncodingOptions = exports.IngressAudioEncodingOptions = exports.IngressVideoOptions = exports.IngressAudioOptions = exports.CreateIngressRequest = exports.ingressState_StatusToJSON = exports.ingressState_StatusFromJSON = exports.IngressState_Status = exports.ingressVideoEncodingPresetToJSON = exports.ingressVideoEncodingPresetFromJSON = exports.IngressVideoEncodingPreset = exports.ingressAudioEncodingPresetToJSON = exports.ingressAudioEncodingPresetFromJSON = exports.IngressAudioEncodingPreset = exports.ingressInputToJSON = exports.ingressInputFromJSON = exports.IngressInput = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(__webpack_require__(/*! long */ \"(ssr)/./node_modules/long/umd/index.js\"));\nconst minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\"));\nconst livekit_models_1 = __webpack_require__(/*! ./livekit_models */ \"(ssr)/./node_modules/livekit-server-sdk/dist/proto/livekit_models.js\");\nexports.protobufPackage = \"livekit\";\nvar IngressInput;\n(function (IngressInput) {\n    IngressInput[IngressInput[\"RTMP_INPUT\"] = 0] = \"RTMP_INPUT\";\n    IngressInput[IngressInput[\"WHIP_INPUT\"] = 1] = \"WHIP_INPUT\";\n    /** URL_INPUT - Pull from the provided URL. Only HTTP url are supported, serving either a single media file or a HLS stream */\n    IngressInput[IngressInput[\"URL_INPUT\"] = 2] = \"URL_INPUT\";\n    IngressInput[IngressInput[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(IngressInput = exports.IngressInput || (exports.IngressInput = {}));\nfunction ingressInputFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"RTMP_INPUT\":\n            return IngressInput.RTMP_INPUT;\n        case 1:\n        case \"WHIP_INPUT\":\n            return IngressInput.WHIP_INPUT;\n        case 2:\n        case \"URL_INPUT\":\n            return IngressInput.URL_INPUT;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return IngressInput.UNRECOGNIZED;\n    }\n}\nexports.ingressInputFromJSON = ingressInputFromJSON;\nfunction ingressInputToJSON(object) {\n    switch (object) {\n        case IngressInput.RTMP_INPUT:\n            return \"RTMP_INPUT\";\n        case IngressInput.WHIP_INPUT:\n            return \"WHIP_INPUT\";\n        case IngressInput.URL_INPUT:\n            return \"URL_INPUT\";\n        case IngressInput.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.ingressInputToJSON = ingressInputToJSON;\nvar IngressAudioEncodingPreset;\n(function (IngressAudioEncodingPreset) {\n    /** OPUS_STEREO_96KBPS - OPUS, 2 channels, 96kbps */\n    IngressAudioEncodingPreset[IngressAudioEncodingPreset[\"OPUS_STEREO_96KBPS\"] = 0] = \"OPUS_STEREO_96KBPS\";\n    /** OPUS_MONO_64KBS - OPUS, 1 channel, 64kbps */\n    IngressAudioEncodingPreset[IngressAudioEncodingPreset[\"OPUS_MONO_64KBS\"] = 1] = \"OPUS_MONO_64KBS\";\n    IngressAudioEncodingPreset[IngressAudioEncodingPreset[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(IngressAudioEncodingPreset = exports.IngressAudioEncodingPreset || (exports.IngressAudioEncodingPreset = {}));\nfunction ingressAudioEncodingPresetFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"OPUS_STEREO_96KBPS\":\n            return IngressAudioEncodingPreset.OPUS_STEREO_96KBPS;\n        case 1:\n        case \"OPUS_MONO_64KBS\":\n            return IngressAudioEncodingPreset.OPUS_MONO_64KBS;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return IngressAudioEncodingPreset.UNRECOGNIZED;\n    }\n}\nexports.ingressAudioEncodingPresetFromJSON = ingressAudioEncodingPresetFromJSON;\nfunction ingressAudioEncodingPresetToJSON(object) {\n    switch (object) {\n        case IngressAudioEncodingPreset.OPUS_STEREO_96KBPS:\n            return \"OPUS_STEREO_96KBPS\";\n        case IngressAudioEncodingPreset.OPUS_MONO_64KBS:\n            return \"OPUS_MONO_64KBS\";\n        case IngressAudioEncodingPreset.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.ingressAudioEncodingPresetToJSON = ingressAudioEncodingPresetToJSON;\nvar IngressVideoEncodingPreset;\n(function (IngressVideoEncodingPreset) {\n    /** H264_720P_30FPS_3_LAYERS - 1280x720,  30fps, 1900kbps main layer, 3 layers total */\n    IngressVideoEncodingPreset[IngressVideoEncodingPreset[\"H264_720P_30FPS_3_LAYERS\"] = 0] = \"H264_720P_30FPS_3_LAYERS\";\n    /** H264_1080P_30FPS_3_LAYERS - 1980x1080, 30fps, 3500kbps main layer, 3 layers total */\n    IngressVideoEncodingPreset[IngressVideoEncodingPreset[\"H264_1080P_30FPS_3_LAYERS\"] = 1] = \"H264_1080P_30FPS_3_LAYERS\";\n    /** H264_540P_25FPS_2_LAYERS - 960x540,  25fps, 1000kbps  main layer, 2 layers total */\n    IngressVideoEncodingPreset[IngressVideoEncodingPreset[\"H264_540P_25FPS_2_LAYERS\"] = 2] = \"H264_540P_25FPS_2_LAYERS\";\n    /** H264_720P_30FPS_1_LAYER - 1280x720,  30fps, 1900kbps, no simulcast */\n    IngressVideoEncodingPreset[IngressVideoEncodingPreset[\"H264_720P_30FPS_1_LAYER\"] = 3] = \"H264_720P_30FPS_1_LAYER\";\n    /** H264_1080P_30FPS_1_LAYER - 1980x1080, 30fps, 3500kbps, no simulcast */\n    IngressVideoEncodingPreset[IngressVideoEncodingPreset[\"H264_1080P_30FPS_1_LAYER\"] = 4] = \"H264_1080P_30FPS_1_LAYER\";\n    /** H264_720P_30FPS_3_LAYERS_HIGH_MOTION - 1280x720,  30fps, 2500kbps main layer, 3 layers total, higher bitrate for high motion, harder to encode content */\n    IngressVideoEncodingPreset[IngressVideoEncodingPreset[\"H264_720P_30FPS_3_LAYERS_HIGH_MOTION\"] = 5] = \"H264_720P_30FPS_3_LAYERS_HIGH_MOTION\";\n    /** H264_1080P_30FPS_3_LAYERS_HIGH_MOTION - 1980x1080, 30fps, 4500kbps main layer, 3 layers total, higher bitrate for high motion, harder to encode content */\n    IngressVideoEncodingPreset[IngressVideoEncodingPreset[\"H264_1080P_30FPS_3_LAYERS_HIGH_MOTION\"] = 6] = \"H264_1080P_30FPS_3_LAYERS_HIGH_MOTION\";\n    /** H264_540P_25FPS_2_LAYERS_HIGH_MOTION - 960x540,  25fps, 1300kbps  main layer, 2 layers total, higher bitrate for high motion, harder to encode content */\n    IngressVideoEncodingPreset[IngressVideoEncodingPreset[\"H264_540P_25FPS_2_LAYERS_HIGH_MOTION\"] = 7] = \"H264_540P_25FPS_2_LAYERS_HIGH_MOTION\";\n    /** H264_720P_30FPS_1_LAYER_HIGH_MOTION - 1280x720,  30fps, 2500kbps, no simulcast, higher bitrate for high motion, harder to encode content */\n    IngressVideoEncodingPreset[IngressVideoEncodingPreset[\"H264_720P_30FPS_1_LAYER_HIGH_MOTION\"] = 8] = \"H264_720P_30FPS_1_LAYER_HIGH_MOTION\";\n    /** H264_1080P_30FPS_1_LAYER_HIGH_MOTION - 1980x1080, 30fps, 4500kbps, no simulcast, higher bitrate for high motion, harder to encode content */\n    IngressVideoEncodingPreset[IngressVideoEncodingPreset[\"H264_1080P_30FPS_1_LAYER_HIGH_MOTION\"] = 9] = \"H264_1080P_30FPS_1_LAYER_HIGH_MOTION\";\n    IngressVideoEncodingPreset[IngressVideoEncodingPreset[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(IngressVideoEncodingPreset = exports.IngressVideoEncodingPreset || (exports.IngressVideoEncodingPreset = {}));\nfunction ingressVideoEncodingPresetFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"H264_720P_30FPS_3_LAYERS\":\n            return IngressVideoEncodingPreset.H264_720P_30FPS_3_LAYERS;\n        case 1:\n        case \"H264_1080P_30FPS_3_LAYERS\":\n            return IngressVideoEncodingPreset.H264_1080P_30FPS_3_LAYERS;\n        case 2:\n        case \"H264_540P_25FPS_2_LAYERS\":\n            return IngressVideoEncodingPreset.H264_540P_25FPS_2_LAYERS;\n        case 3:\n        case \"H264_720P_30FPS_1_LAYER\":\n            return IngressVideoEncodingPreset.H264_720P_30FPS_1_LAYER;\n        case 4:\n        case \"H264_1080P_30FPS_1_LAYER\":\n            return IngressVideoEncodingPreset.H264_1080P_30FPS_1_LAYER;\n        case 5:\n        case \"H264_720P_30FPS_3_LAYERS_HIGH_MOTION\":\n            return IngressVideoEncodingPreset.H264_720P_30FPS_3_LAYERS_HIGH_MOTION;\n        case 6:\n        case \"H264_1080P_30FPS_3_LAYERS_HIGH_MOTION\":\n            return IngressVideoEncodingPreset.H264_1080P_30FPS_3_LAYERS_HIGH_MOTION;\n        case 7:\n        case \"H264_540P_25FPS_2_LAYERS_HIGH_MOTION\":\n            return IngressVideoEncodingPreset.H264_540P_25FPS_2_LAYERS_HIGH_MOTION;\n        case 8:\n        case \"H264_720P_30FPS_1_LAYER_HIGH_MOTION\":\n            return IngressVideoEncodingPreset.H264_720P_30FPS_1_LAYER_HIGH_MOTION;\n        case 9:\n        case \"H264_1080P_30FPS_1_LAYER_HIGH_MOTION\":\n            return IngressVideoEncodingPreset.H264_1080P_30FPS_1_LAYER_HIGH_MOTION;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return IngressVideoEncodingPreset.UNRECOGNIZED;\n    }\n}\nexports.ingressVideoEncodingPresetFromJSON = ingressVideoEncodingPresetFromJSON;\nfunction ingressVideoEncodingPresetToJSON(object) {\n    switch (object) {\n        case IngressVideoEncodingPreset.H264_720P_30FPS_3_LAYERS:\n            return \"H264_720P_30FPS_3_LAYERS\";\n        case IngressVideoEncodingPreset.H264_1080P_30FPS_3_LAYERS:\n            return \"H264_1080P_30FPS_3_LAYERS\";\n        case IngressVideoEncodingPreset.H264_540P_25FPS_2_LAYERS:\n            return \"H264_540P_25FPS_2_LAYERS\";\n        case IngressVideoEncodingPreset.H264_720P_30FPS_1_LAYER:\n            return \"H264_720P_30FPS_1_LAYER\";\n        case IngressVideoEncodingPreset.H264_1080P_30FPS_1_LAYER:\n            return \"H264_1080P_30FPS_1_LAYER\";\n        case IngressVideoEncodingPreset.H264_720P_30FPS_3_LAYERS_HIGH_MOTION:\n            return \"H264_720P_30FPS_3_LAYERS_HIGH_MOTION\";\n        case IngressVideoEncodingPreset.H264_1080P_30FPS_3_LAYERS_HIGH_MOTION:\n            return \"H264_1080P_30FPS_3_LAYERS_HIGH_MOTION\";\n        case IngressVideoEncodingPreset.H264_540P_25FPS_2_LAYERS_HIGH_MOTION:\n            return \"H264_540P_25FPS_2_LAYERS_HIGH_MOTION\";\n        case IngressVideoEncodingPreset.H264_720P_30FPS_1_LAYER_HIGH_MOTION:\n            return \"H264_720P_30FPS_1_LAYER_HIGH_MOTION\";\n        case IngressVideoEncodingPreset.H264_1080P_30FPS_1_LAYER_HIGH_MOTION:\n            return \"H264_1080P_30FPS_1_LAYER_HIGH_MOTION\";\n        case IngressVideoEncodingPreset.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.ingressVideoEncodingPresetToJSON = ingressVideoEncodingPresetToJSON;\nvar IngressState_Status;\n(function (IngressState_Status) {\n    IngressState_Status[IngressState_Status[\"ENDPOINT_INACTIVE\"] = 0] = \"ENDPOINT_INACTIVE\";\n    IngressState_Status[IngressState_Status[\"ENDPOINT_BUFFERING\"] = 1] = \"ENDPOINT_BUFFERING\";\n    IngressState_Status[IngressState_Status[\"ENDPOINT_PUBLISHING\"] = 2] = \"ENDPOINT_PUBLISHING\";\n    IngressState_Status[IngressState_Status[\"ENDPOINT_ERROR\"] = 3] = \"ENDPOINT_ERROR\";\n    IngressState_Status[IngressState_Status[\"ENDPOINT_COMPLETE\"] = 4] = \"ENDPOINT_COMPLETE\";\n    IngressState_Status[IngressState_Status[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(IngressState_Status = exports.IngressState_Status || (exports.IngressState_Status = {}));\nfunction ingressState_StatusFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"ENDPOINT_INACTIVE\":\n            return IngressState_Status.ENDPOINT_INACTIVE;\n        case 1:\n        case \"ENDPOINT_BUFFERING\":\n            return IngressState_Status.ENDPOINT_BUFFERING;\n        case 2:\n        case \"ENDPOINT_PUBLISHING\":\n            return IngressState_Status.ENDPOINT_PUBLISHING;\n        case 3:\n        case \"ENDPOINT_ERROR\":\n            return IngressState_Status.ENDPOINT_ERROR;\n        case 4:\n        case \"ENDPOINT_COMPLETE\":\n            return IngressState_Status.ENDPOINT_COMPLETE;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return IngressState_Status.UNRECOGNIZED;\n    }\n}\nexports.ingressState_StatusFromJSON = ingressState_StatusFromJSON;\nfunction ingressState_StatusToJSON(object) {\n    switch (object) {\n        case IngressState_Status.ENDPOINT_INACTIVE:\n            return \"ENDPOINT_INACTIVE\";\n        case IngressState_Status.ENDPOINT_BUFFERING:\n            return \"ENDPOINT_BUFFERING\";\n        case IngressState_Status.ENDPOINT_PUBLISHING:\n            return \"ENDPOINT_PUBLISHING\";\n        case IngressState_Status.ENDPOINT_ERROR:\n            return \"ENDPOINT_ERROR\";\n        case IngressState_Status.ENDPOINT_COMPLETE:\n            return \"ENDPOINT_COMPLETE\";\n        case IngressState_Status.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.ingressState_StatusToJSON = ingressState_StatusToJSON;\nfunction createBaseCreateIngressRequest() {\n    return {\n        inputType: 0,\n        url: \"\",\n        name: \"\",\n        roomName: \"\",\n        participantIdentity: \"\",\n        participantName: \"\",\n        bypassTranscoding: false,\n        audio: undefined,\n        video: undefined,\n    };\n}\nexports.CreateIngressRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.inputType !== undefined && message.inputType !== 0) {\n            writer.uint32(8).int32(message.inputType);\n        }\n        if (message.url !== undefined && message.url !== \"\") {\n            writer.uint32(74).string(message.url);\n        }\n        if (message.name !== undefined && message.name !== \"\") {\n            writer.uint32(18).string(message.name);\n        }\n        if (message.roomName !== undefined && message.roomName !== \"\") {\n            writer.uint32(26).string(message.roomName);\n        }\n        if (message.participantIdentity !== undefined && message.participantIdentity !== \"\") {\n            writer.uint32(34).string(message.participantIdentity);\n        }\n        if (message.participantName !== undefined && message.participantName !== \"\") {\n            writer.uint32(42).string(message.participantName);\n        }\n        if (message.bypassTranscoding === true) {\n            writer.uint32(64).bool(message.bypassTranscoding);\n        }\n        if (message.audio !== undefined) {\n            exports.IngressAudioOptions.encode(message.audio, writer.uint32(50).fork()).ldelim();\n        }\n        if (message.video !== undefined) {\n            exports.IngressVideoOptions.encode(message.video, writer.uint32(58).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseCreateIngressRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.inputType = reader.int32();\n                    break;\n                case 9:\n                    message.url = reader.string();\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 3:\n                    message.roomName = reader.string();\n                    break;\n                case 4:\n                    message.participantIdentity = reader.string();\n                    break;\n                case 5:\n                    message.participantName = reader.string();\n                    break;\n                case 8:\n                    message.bypassTranscoding = reader.bool();\n                    break;\n                case 6:\n                    message.audio = exports.IngressAudioOptions.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.video = exports.IngressVideoOptions.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            inputType: isSet(object.inputType) ? ingressInputFromJSON(object.inputType) : 0,\n            url: isSet(object.url) ? String(object.url) : \"\",\n            name: isSet(object.name) ? String(object.name) : \"\",\n            roomName: isSet(object.roomName) ? String(object.roomName) : \"\",\n            participantIdentity: isSet(object.participantIdentity) ? String(object.participantIdentity) : \"\",\n            participantName: isSet(object.participantName) ? String(object.participantName) : \"\",\n            bypassTranscoding: isSet(object.bypassTranscoding) ? Boolean(object.bypassTranscoding) : false,\n            audio: isSet(object.audio) ? exports.IngressAudioOptions.fromJSON(object.audio) : undefined,\n            video: isSet(object.video) ? exports.IngressVideoOptions.fromJSON(object.video) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.inputType !== undefined && (obj.inputType = ingressInputToJSON(message.inputType));\n        message.url !== undefined && (obj.url = message.url);\n        message.name !== undefined && (obj.name = message.name);\n        message.roomName !== undefined && (obj.roomName = message.roomName);\n        message.participantIdentity !== undefined && (obj.participantIdentity = message.participantIdentity);\n        message.participantName !== undefined && (obj.participantName = message.participantName);\n        message.bypassTranscoding !== undefined && (obj.bypassTranscoding = message.bypassTranscoding);\n        message.audio !== undefined && (obj.audio = message.audio ? exports.IngressAudioOptions.toJSON(message.audio) : undefined);\n        message.video !== undefined && (obj.video = message.video ? exports.IngressVideoOptions.toJSON(message.video) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const message = createBaseCreateIngressRequest();\n        message.inputType = (_a = object.inputType) !== null && _a !== void 0 ? _a : 0;\n        message.url = (_b = object.url) !== null && _b !== void 0 ? _b : \"\";\n        message.name = (_c = object.name) !== null && _c !== void 0 ? _c : \"\";\n        message.roomName = (_d = object.roomName) !== null && _d !== void 0 ? _d : \"\";\n        message.participantIdentity = (_e = object.participantIdentity) !== null && _e !== void 0 ? _e : \"\";\n        message.participantName = (_f = object.participantName) !== null && _f !== void 0 ? _f : \"\";\n        message.bypassTranscoding = (_g = object.bypassTranscoding) !== null && _g !== void 0 ? _g : false;\n        message.audio = (object.audio !== undefined && object.audio !== null)\n            ? exports.IngressAudioOptions.fromPartial(object.audio)\n            : undefined;\n        message.video = (object.video !== undefined && object.video !== null)\n            ? exports.IngressVideoOptions.fromPartial(object.video)\n            : undefined;\n        return message;\n    },\n};\nfunction createBaseIngressAudioOptions() {\n    return { name: \"\", source: 0, preset: undefined, options: undefined };\n}\nexports.IngressAudioOptions = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.name !== undefined && message.name !== \"\") {\n            writer.uint32(10).string(message.name);\n        }\n        if (message.source !== undefined && message.source !== 0) {\n            writer.uint32(16).int32(message.source);\n        }\n        if (message.preset !== undefined) {\n            writer.uint32(24).int32(message.preset);\n        }\n        if (message.options !== undefined) {\n            exports.IngressAudioEncodingOptions.encode(message.options, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseIngressAudioOptions();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.source = reader.int32();\n                    break;\n                case 3:\n                    message.preset = reader.int32();\n                    break;\n                case 4:\n                    message.options = exports.IngressAudioEncodingOptions.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            name: isSet(object.name) ? String(object.name) : \"\",\n            source: isSet(object.source) ? livekit_models_1.trackSourceFromJSON(object.source) : 0,\n            preset: isSet(object.preset) ? ingressAudioEncodingPresetFromJSON(object.preset) : undefined,\n            options: isSet(object.options) ? exports.IngressAudioEncodingOptions.fromJSON(object.options) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.name !== undefined && (obj.name = message.name);\n        message.source !== undefined && (obj.source = livekit_models_1.trackSourceToJSON(message.source));\n        message.preset !== undefined &&\n            (obj.preset = message.preset !== undefined ? ingressAudioEncodingPresetToJSON(message.preset) : undefined);\n        message.options !== undefined &&\n            (obj.options = message.options ? exports.IngressAudioEncodingOptions.toJSON(message.options) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseIngressAudioOptions();\n        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : \"\";\n        message.source = (_b = object.source) !== null && _b !== void 0 ? _b : 0;\n        message.preset = (_c = object.preset) !== null && _c !== void 0 ? _c : undefined;\n        message.options = (object.options !== undefined && object.options !== null)\n            ? exports.IngressAudioEncodingOptions.fromPartial(object.options)\n            : undefined;\n        return message;\n    },\n};\nfunction createBaseIngressVideoOptions() {\n    return { name: \"\", source: 0, preset: undefined, options: undefined };\n}\nexports.IngressVideoOptions = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.name !== undefined && message.name !== \"\") {\n            writer.uint32(10).string(message.name);\n        }\n        if (message.source !== undefined && message.source !== 0) {\n            writer.uint32(16).int32(message.source);\n        }\n        if (message.preset !== undefined) {\n            writer.uint32(24).int32(message.preset);\n        }\n        if (message.options !== undefined) {\n            exports.IngressVideoEncodingOptions.encode(message.options, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseIngressVideoOptions();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.source = reader.int32();\n                    break;\n                case 3:\n                    message.preset = reader.int32();\n                    break;\n                case 4:\n                    message.options = exports.IngressVideoEncodingOptions.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            name: isSet(object.name) ? String(object.name) : \"\",\n            source: isSet(object.source) ? livekit_models_1.trackSourceFromJSON(object.source) : 0,\n            preset: isSet(object.preset) ? ingressVideoEncodingPresetFromJSON(object.preset) : undefined,\n            options: isSet(object.options) ? exports.IngressVideoEncodingOptions.fromJSON(object.options) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.name !== undefined && (obj.name = message.name);\n        message.source !== undefined && (obj.source = livekit_models_1.trackSourceToJSON(message.source));\n        message.preset !== undefined &&\n            (obj.preset = message.preset !== undefined ? ingressVideoEncodingPresetToJSON(message.preset) : undefined);\n        message.options !== undefined &&\n            (obj.options = message.options ? exports.IngressVideoEncodingOptions.toJSON(message.options) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseIngressVideoOptions();\n        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : \"\";\n        message.source = (_b = object.source) !== null && _b !== void 0 ? _b : 0;\n        message.preset = (_c = object.preset) !== null && _c !== void 0 ? _c : undefined;\n        message.options = (object.options !== undefined && object.options !== null)\n            ? exports.IngressVideoEncodingOptions.fromPartial(object.options)\n            : undefined;\n        return message;\n    },\n};\nfunction createBaseIngressAudioEncodingOptions() {\n    return { audioCodec: 0, bitrate: 0, disableDtx: false, channels: 0 };\n}\nexports.IngressAudioEncodingOptions = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.audioCodec !== undefined && message.audioCodec !== 0) {\n            writer.uint32(8).int32(message.audioCodec);\n        }\n        if (message.bitrate !== undefined && message.bitrate !== 0) {\n            writer.uint32(16).uint32(message.bitrate);\n        }\n        if (message.disableDtx === true) {\n            writer.uint32(24).bool(message.disableDtx);\n        }\n        if (message.channels !== undefined && message.channels !== 0) {\n            writer.uint32(32).uint32(message.channels);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseIngressAudioEncodingOptions();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.audioCodec = reader.int32();\n                    break;\n                case 2:\n                    message.bitrate = reader.uint32();\n                    break;\n                case 3:\n                    message.disableDtx = reader.bool();\n                    break;\n                case 4:\n                    message.channels = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            audioCodec: isSet(object.audioCodec) ? livekit_models_1.audioCodecFromJSON(object.audioCodec) : 0,\n            bitrate: isSet(object.bitrate) ? Number(object.bitrate) : 0,\n            disableDtx: isSet(object.disableDtx) ? Boolean(object.disableDtx) : false,\n            channels: isSet(object.channels) ? Number(object.channels) : 0,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.audioCodec !== undefined && (obj.audioCodec = livekit_models_1.audioCodecToJSON(message.audioCodec));\n        message.bitrate !== undefined && (obj.bitrate = Math.round(message.bitrate));\n        message.disableDtx !== undefined && (obj.disableDtx = message.disableDtx);\n        message.channels !== undefined && (obj.channels = Math.round(message.channels));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d;\n        const message = createBaseIngressAudioEncodingOptions();\n        message.audioCodec = (_a = object.audioCodec) !== null && _a !== void 0 ? _a : 0;\n        message.bitrate = (_b = object.bitrate) !== null && _b !== void 0 ? _b : 0;\n        message.disableDtx = (_c = object.disableDtx) !== null && _c !== void 0 ? _c : false;\n        message.channels = (_d = object.channels) !== null && _d !== void 0 ? _d : 0;\n        return message;\n    },\n};\nfunction createBaseIngressVideoEncodingOptions() {\n    return { videoCodec: 0, frameRate: 0, layers: [] };\n}\nexports.IngressVideoEncodingOptions = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.videoCodec !== undefined && message.videoCodec !== 0) {\n            writer.uint32(8).int32(message.videoCodec);\n        }\n        if (message.frameRate !== undefined && message.frameRate !== 0) {\n            writer.uint32(17).double(message.frameRate);\n        }\n        if (message.layers !== undefined && message.layers.length !== 0) {\n            for (const v of message.layers) {\n                livekit_models_1.VideoLayer.encode(v, writer.uint32(26).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseIngressVideoEncodingOptions();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.videoCodec = reader.int32();\n                    break;\n                case 2:\n                    message.frameRate = reader.double();\n                    break;\n                case 3:\n                    message.layers.push(livekit_models_1.VideoLayer.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            videoCodec: isSet(object.videoCodec) ? livekit_models_1.videoCodecFromJSON(object.videoCodec) : 0,\n            frameRate: isSet(object.frameRate) ? Number(object.frameRate) : 0,\n            layers: Array.isArray(object === null || object === void 0 ? void 0 : object.layers) ? object.layers.map((e) => livekit_models_1.VideoLayer.fromJSON(e)) : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.videoCodec !== undefined && (obj.videoCodec = livekit_models_1.videoCodecToJSON(message.videoCodec));\n        message.frameRate !== undefined && (obj.frameRate = message.frameRate);\n        if (message.layers) {\n            obj.layers = message.layers.map((e) => e ? livekit_models_1.VideoLayer.toJSON(e) : undefined);\n        }\n        else {\n            obj.layers = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseIngressVideoEncodingOptions();\n        message.videoCodec = (_a = object.videoCodec) !== null && _a !== void 0 ? _a : 0;\n        message.frameRate = (_b = object.frameRate) !== null && _b !== void 0 ? _b : 0;\n        message.layers = ((_c = object.layers) === null || _c === void 0 ? void 0 : _c.map((e) => livekit_models_1.VideoLayer.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseIngressInfo() {\n    return {\n        ingressId: \"\",\n        name: \"\",\n        streamKey: \"\",\n        url: \"\",\n        inputType: 0,\n        bypassTranscoding: false,\n        audio: undefined,\n        video: undefined,\n        roomName: \"\",\n        participantIdentity: \"\",\n        participantName: \"\",\n        reusable: false,\n        state: undefined,\n    };\n}\nexports.IngressInfo = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.ingressId !== undefined && message.ingressId !== \"\") {\n            writer.uint32(10).string(message.ingressId);\n        }\n        if (message.name !== undefined && message.name !== \"\") {\n            writer.uint32(18).string(message.name);\n        }\n        if (message.streamKey !== undefined && message.streamKey !== \"\") {\n            writer.uint32(26).string(message.streamKey);\n        }\n        if (message.url !== undefined && message.url !== \"\") {\n            writer.uint32(34).string(message.url);\n        }\n        if (message.inputType !== undefined && message.inputType !== 0) {\n            writer.uint32(40).int32(message.inputType);\n        }\n        if (message.bypassTranscoding === true) {\n            writer.uint32(104).bool(message.bypassTranscoding);\n        }\n        if (message.audio !== undefined) {\n            exports.IngressAudioOptions.encode(message.audio, writer.uint32(50).fork()).ldelim();\n        }\n        if (message.video !== undefined) {\n            exports.IngressVideoOptions.encode(message.video, writer.uint32(58).fork()).ldelim();\n        }\n        if (message.roomName !== undefined && message.roomName !== \"\") {\n            writer.uint32(66).string(message.roomName);\n        }\n        if (message.participantIdentity !== undefined && message.participantIdentity !== \"\") {\n            writer.uint32(74).string(message.participantIdentity);\n        }\n        if (message.participantName !== undefined && message.participantName !== \"\") {\n            writer.uint32(82).string(message.participantName);\n        }\n        if (message.reusable === true) {\n            writer.uint32(88).bool(message.reusable);\n        }\n        if (message.state !== undefined) {\n            exports.IngressState.encode(message.state, writer.uint32(98).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseIngressInfo();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.ingressId = reader.string();\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 3:\n                    message.streamKey = reader.string();\n                    break;\n                case 4:\n                    message.url = reader.string();\n                    break;\n                case 5:\n                    message.inputType = reader.int32();\n                    break;\n                case 13:\n                    message.bypassTranscoding = reader.bool();\n                    break;\n                case 6:\n                    message.audio = exports.IngressAudioOptions.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.video = exports.IngressVideoOptions.decode(reader, reader.uint32());\n                    break;\n                case 8:\n                    message.roomName = reader.string();\n                    break;\n                case 9:\n                    message.participantIdentity = reader.string();\n                    break;\n                case 10:\n                    message.participantName = reader.string();\n                    break;\n                case 11:\n                    message.reusable = reader.bool();\n                    break;\n                case 12:\n                    message.state = exports.IngressState.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            ingressId: isSet(object.ingressId) ? String(object.ingressId) : \"\",\n            name: isSet(object.name) ? String(object.name) : \"\",\n            streamKey: isSet(object.streamKey) ? String(object.streamKey) : \"\",\n            url: isSet(object.url) ? String(object.url) : \"\",\n            inputType: isSet(object.inputType) ? ingressInputFromJSON(object.inputType) : 0,\n            bypassTranscoding: isSet(object.bypassTranscoding) ? Boolean(object.bypassTranscoding) : false,\n            audio: isSet(object.audio) ? exports.IngressAudioOptions.fromJSON(object.audio) : undefined,\n            video: isSet(object.video) ? exports.IngressVideoOptions.fromJSON(object.video) : undefined,\n            roomName: isSet(object.roomName) ? String(object.roomName) : \"\",\n            participantIdentity: isSet(object.participantIdentity) ? String(object.participantIdentity) : \"\",\n            participantName: isSet(object.participantName) ? String(object.participantName) : \"\",\n            reusable: isSet(object.reusable) ? Boolean(object.reusable) : false,\n            state: isSet(object.state) ? exports.IngressState.fromJSON(object.state) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.ingressId !== undefined && (obj.ingressId = message.ingressId);\n        message.name !== undefined && (obj.name = message.name);\n        message.streamKey !== undefined && (obj.streamKey = message.streamKey);\n        message.url !== undefined && (obj.url = message.url);\n        message.inputType !== undefined && (obj.inputType = ingressInputToJSON(message.inputType));\n        message.bypassTranscoding !== undefined && (obj.bypassTranscoding = message.bypassTranscoding);\n        message.audio !== undefined && (obj.audio = message.audio ? exports.IngressAudioOptions.toJSON(message.audio) : undefined);\n        message.video !== undefined && (obj.video = message.video ? exports.IngressVideoOptions.toJSON(message.video) : undefined);\n        message.roomName !== undefined && (obj.roomName = message.roomName);\n        message.participantIdentity !== undefined && (obj.participantIdentity = message.participantIdentity);\n        message.participantName !== undefined && (obj.participantName = message.participantName);\n        message.reusable !== undefined && (obj.reusable = message.reusable);\n        message.state !== undefined && (obj.state = message.state ? exports.IngressState.toJSON(message.state) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n        const message = createBaseIngressInfo();\n        message.ingressId = (_a = object.ingressId) !== null && _a !== void 0 ? _a : \"\";\n        message.name = (_b = object.name) !== null && _b !== void 0 ? _b : \"\";\n        message.streamKey = (_c = object.streamKey) !== null && _c !== void 0 ? _c : \"\";\n        message.url = (_d = object.url) !== null && _d !== void 0 ? _d : \"\";\n        message.inputType = (_e = object.inputType) !== null && _e !== void 0 ? _e : 0;\n        message.bypassTranscoding = (_f = object.bypassTranscoding) !== null && _f !== void 0 ? _f : false;\n        message.audio = (object.audio !== undefined && object.audio !== null)\n            ? exports.IngressAudioOptions.fromPartial(object.audio)\n            : undefined;\n        message.video = (object.video !== undefined && object.video !== null)\n            ? exports.IngressVideoOptions.fromPartial(object.video)\n            : undefined;\n        message.roomName = (_g = object.roomName) !== null && _g !== void 0 ? _g : \"\";\n        message.participantIdentity = (_h = object.participantIdentity) !== null && _h !== void 0 ? _h : \"\";\n        message.participantName = (_j = object.participantName) !== null && _j !== void 0 ? _j : \"\";\n        message.reusable = (_k = object.reusable) !== null && _k !== void 0 ? _k : false;\n        message.state = (object.state !== undefined && object.state !== null)\n            ? exports.IngressState.fromPartial(object.state)\n            : undefined;\n        return message;\n    },\n};\nfunction createBaseIngressState() {\n    return {\n        status: 0,\n        error: \"\",\n        video: undefined,\n        audio: undefined,\n        roomId: \"\",\n        startedAt: 0,\n        endedAt: 0,\n        resourceId: \"\",\n        tracks: [],\n    };\n}\nexports.IngressState = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.status !== undefined && message.status !== 0) {\n            writer.uint32(8).int32(message.status);\n        }\n        if (message.error !== undefined && message.error !== \"\") {\n            writer.uint32(18).string(message.error);\n        }\n        if (message.video !== undefined) {\n            exports.InputVideoState.encode(message.video, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.audio !== undefined) {\n            exports.InputAudioState.encode(message.audio, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.roomId !== undefined && message.roomId !== \"\") {\n            writer.uint32(42).string(message.roomId);\n        }\n        if (message.startedAt !== undefined && message.startedAt !== 0) {\n            writer.uint32(56).int64(message.startedAt);\n        }\n        if (message.endedAt !== undefined && message.endedAt !== 0) {\n            writer.uint32(64).int64(message.endedAt);\n        }\n        if (message.resourceId !== undefined && message.resourceId !== \"\") {\n            writer.uint32(74).string(message.resourceId);\n        }\n        if (message.tracks !== undefined && message.tracks.length !== 0) {\n            for (const v of message.tracks) {\n                livekit_models_1.TrackInfo.encode(v, writer.uint32(50).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseIngressState();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.status = reader.int32();\n                    break;\n                case 2:\n                    message.error = reader.string();\n                    break;\n                case 3:\n                    message.video = exports.InputVideoState.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.audio = exports.InputAudioState.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.roomId = reader.string();\n                    break;\n                case 7:\n                    message.startedAt = longToNumber(reader.int64());\n                    break;\n                case 8:\n                    message.endedAt = longToNumber(reader.int64());\n                    break;\n                case 9:\n                    message.resourceId = reader.string();\n                    break;\n                case 6:\n                    message.tracks.push(livekit_models_1.TrackInfo.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            status: isSet(object.status) ? ingressState_StatusFromJSON(object.status) : 0,\n            error: isSet(object.error) ? String(object.error) : \"\",\n            video: isSet(object.video) ? exports.InputVideoState.fromJSON(object.video) : undefined,\n            audio: isSet(object.audio) ? exports.InputAudioState.fromJSON(object.audio) : undefined,\n            roomId: isSet(object.roomId) ? String(object.roomId) : \"\",\n            startedAt: isSet(object.startedAt) ? Number(object.startedAt) : 0,\n            endedAt: isSet(object.endedAt) ? Number(object.endedAt) : 0,\n            resourceId: isSet(object.resourceId) ? String(object.resourceId) : \"\",\n            tracks: Array.isArray(object === null || object === void 0 ? void 0 : object.tracks) ? object.tracks.map((e) => livekit_models_1.TrackInfo.fromJSON(e)) : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.status !== undefined && (obj.status = ingressState_StatusToJSON(message.status));\n        message.error !== undefined && (obj.error = message.error);\n        message.video !== undefined && (obj.video = message.video ? exports.InputVideoState.toJSON(message.video) : undefined);\n        message.audio !== undefined && (obj.audio = message.audio ? exports.InputAudioState.toJSON(message.audio) : undefined);\n        message.roomId !== undefined && (obj.roomId = message.roomId);\n        message.startedAt !== undefined && (obj.startedAt = Math.round(message.startedAt));\n        message.endedAt !== undefined && (obj.endedAt = Math.round(message.endedAt));\n        message.resourceId !== undefined && (obj.resourceId = message.resourceId);\n        if (message.tracks) {\n            obj.tracks = message.tracks.map((e) => e ? livekit_models_1.TrackInfo.toJSON(e) : undefined);\n        }\n        else {\n            obj.tracks = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const message = createBaseIngressState();\n        message.status = (_a = object.status) !== null && _a !== void 0 ? _a : 0;\n        message.error = (_b = object.error) !== null && _b !== void 0 ? _b : \"\";\n        message.video = (object.video !== undefined && object.video !== null)\n            ? exports.InputVideoState.fromPartial(object.video)\n            : undefined;\n        message.audio = (object.audio !== undefined && object.audio !== null)\n            ? exports.InputAudioState.fromPartial(object.audio)\n            : undefined;\n        message.roomId = (_c = object.roomId) !== null && _c !== void 0 ? _c : \"\";\n        message.startedAt = (_d = object.startedAt) !== null && _d !== void 0 ? _d : 0;\n        message.endedAt = (_e = object.endedAt) !== null && _e !== void 0 ? _e : 0;\n        message.resourceId = (_f = object.resourceId) !== null && _f !== void 0 ? _f : \"\";\n        message.tracks = ((_g = object.tracks) === null || _g === void 0 ? void 0 : _g.map((e) => livekit_models_1.TrackInfo.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseInputVideoState() {\n    return { mimeType: \"\", averageBitrate: 0, width: 0, height: 0, framerate: 0 };\n}\nexports.InputVideoState = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.mimeType !== undefined && message.mimeType !== \"\") {\n            writer.uint32(10).string(message.mimeType);\n        }\n        if (message.averageBitrate !== undefined && message.averageBitrate !== 0) {\n            writer.uint32(16).uint32(message.averageBitrate);\n        }\n        if (message.width !== undefined && message.width !== 0) {\n            writer.uint32(24).uint32(message.width);\n        }\n        if (message.height !== undefined && message.height !== 0) {\n            writer.uint32(32).uint32(message.height);\n        }\n        if (message.framerate !== undefined && message.framerate !== 0) {\n            writer.uint32(41).double(message.framerate);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseInputVideoState();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.mimeType = reader.string();\n                    break;\n                case 2:\n                    message.averageBitrate = reader.uint32();\n                    break;\n                case 3:\n                    message.width = reader.uint32();\n                    break;\n                case 4:\n                    message.height = reader.uint32();\n                    break;\n                case 5:\n                    message.framerate = reader.double();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            mimeType: isSet(object.mimeType) ? String(object.mimeType) : \"\",\n            averageBitrate: isSet(object.averageBitrate) ? Number(object.averageBitrate) : 0,\n            width: isSet(object.width) ? Number(object.width) : 0,\n            height: isSet(object.height) ? Number(object.height) : 0,\n            framerate: isSet(object.framerate) ? Number(object.framerate) : 0,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.mimeType !== undefined && (obj.mimeType = message.mimeType);\n        message.averageBitrate !== undefined && (obj.averageBitrate = Math.round(message.averageBitrate));\n        message.width !== undefined && (obj.width = Math.round(message.width));\n        message.height !== undefined && (obj.height = Math.round(message.height));\n        message.framerate !== undefined && (obj.framerate = message.framerate);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e;\n        const message = createBaseInputVideoState();\n        message.mimeType = (_a = object.mimeType) !== null && _a !== void 0 ? _a : \"\";\n        message.averageBitrate = (_b = object.averageBitrate) !== null && _b !== void 0 ? _b : 0;\n        message.width = (_c = object.width) !== null && _c !== void 0 ? _c : 0;\n        message.height = (_d = object.height) !== null && _d !== void 0 ? _d : 0;\n        message.framerate = (_e = object.framerate) !== null && _e !== void 0 ? _e : 0;\n        return message;\n    },\n};\nfunction createBaseInputAudioState() {\n    return { mimeType: \"\", averageBitrate: 0, channels: 0, sampleRate: 0 };\n}\nexports.InputAudioState = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.mimeType !== undefined && message.mimeType !== \"\") {\n            writer.uint32(10).string(message.mimeType);\n        }\n        if (message.averageBitrate !== undefined && message.averageBitrate !== 0) {\n            writer.uint32(16).uint32(message.averageBitrate);\n        }\n        if (message.channels !== undefined && message.channels !== 0) {\n            writer.uint32(24).uint32(message.channels);\n        }\n        if (message.sampleRate !== undefined && message.sampleRate !== 0) {\n            writer.uint32(32).uint32(message.sampleRate);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseInputAudioState();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.mimeType = reader.string();\n                    break;\n                case 2:\n                    message.averageBitrate = reader.uint32();\n                    break;\n                case 3:\n                    message.channels = reader.uint32();\n                    break;\n                case 4:\n                    message.sampleRate = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            mimeType: isSet(object.mimeType) ? String(object.mimeType) : \"\",\n            averageBitrate: isSet(object.averageBitrate) ? Number(object.averageBitrate) : 0,\n            channels: isSet(object.channels) ? Number(object.channels) : 0,\n            sampleRate: isSet(object.sampleRate) ? Number(object.sampleRate) : 0,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.mimeType !== undefined && (obj.mimeType = message.mimeType);\n        message.averageBitrate !== undefined && (obj.averageBitrate = Math.round(message.averageBitrate));\n        message.channels !== undefined && (obj.channels = Math.round(message.channels));\n        message.sampleRate !== undefined && (obj.sampleRate = Math.round(message.sampleRate));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d;\n        const message = createBaseInputAudioState();\n        message.mimeType = (_a = object.mimeType) !== null && _a !== void 0 ? _a : \"\";\n        message.averageBitrate = (_b = object.averageBitrate) !== null && _b !== void 0 ? _b : 0;\n        message.channels = (_c = object.channels) !== null && _c !== void 0 ? _c : 0;\n        message.sampleRate = (_d = object.sampleRate) !== null && _d !== void 0 ? _d : 0;\n        return message;\n    },\n};\nfunction createBaseUpdateIngressRequest() {\n    return {\n        ingressId: \"\",\n        name: \"\",\n        roomName: \"\",\n        participantIdentity: \"\",\n        participantName: \"\",\n        bypassTranscoding: undefined,\n        audio: undefined,\n        video: undefined,\n    };\n}\nexports.UpdateIngressRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.ingressId !== undefined && message.ingressId !== \"\") {\n            writer.uint32(10).string(message.ingressId);\n        }\n        if (message.name !== undefined && message.name !== \"\") {\n            writer.uint32(18).string(message.name);\n        }\n        if (message.roomName !== undefined && message.roomName !== \"\") {\n            writer.uint32(26).string(message.roomName);\n        }\n        if (message.participantIdentity !== undefined && message.participantIdentity !== \"\") {\n            writer.uint32(34).string(message.participantIdentity);\n        }\n        if (message.participantName !== undefined && message.participantName !== \"\") {\n            writer.uint32(42).string(message.participantName);\n        }\n        if (message.bypassTranscoding !== undefined) {\n            writer.uint32(64).bool(message.bypassTranscoding);\n        }\n        if (message.audio !== undefined) {\n            exports.IngressAudioOptions.encode(message.audio, writer.uint32(50).fork()).ldelim();\n        }\n        if (message.video !== undefined) {\n            exports.IngressVideoOptions.encode(message.video, writer.uint32(58).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUpdateIngressRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.ingressId = reader.string();\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 3:\n                    message.roomName = reader.string();\n                    break;\n                case 4:\n                    message.participantIdentity = reader.string();\n                    break;\n                case 5:\n                    message.participantName = reader.string();\n                    break;\n                case 8:\n                    message.bypassTranscoding = reader.bool();\n                    break;\n                case 6:\n                    message.audio = exports.IngressAudioOptions.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.video = exports.IngressVideoOptions.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            ingressId: isSet(object.ingressId) ? String(object.ingressId) : \"\",\n            name: isSet(object.name) ? String(object.name) : \"\",\n            roomName: isSet(object.roomName) ? String(object.roomName) : \"\",\n            participantIdentity: isSet(object.participantIdentity) ? String(object.participantIdentity) : \"\",\n            participantName: isSet(object.participantName) ? String(object.participantName) : \"\",\n            bypassTranscoding: isSet(object.bypassTranscoding) ? Boolean(object.bypassTranscoding) : undefined,\n            audio: isSet(object.audio) ? exports.IngressAudioOptions.fromJSON(object.audio) : undefined,\n            video: isSet(object.video) ? exports.IngressVideoOptions.fromJSON(object.video) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.ingressId !== undefined && (obj.ingressId = message.ingressId);\n        message.name !== undefined && (obj.name = message.name);\n        message.roomName !== undefined && (obj.roomName = message.roomName);\n        message.participantIdentity !== undefined && (obj.participantIdentity = message.participantIdentity);\n        message.participantName !== undefined && (obj.participantName = message.participantName);\n        message.bypassTranscoding !== undefined && (obj.bypassTranscoding = message.bypassTranscoding);\n        message.audio !== undefined && (obj.audio = message.audio ? exports.IngressAudioOptions.toJSON(message.audio) : undefined);\n        message.video !== undefined && (obj.video = message.video ? exports.IngressVideoOptions.toJSON(message.video) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f;\n        const message = createBaseUpdateIngressRequest();\n        message.ingressId = (_a = object.ingressId) !== null && _a !== void 0 ? _a : \"\";\n        message.name = (_b = object.name) !== null && _b !== void 0 ? _b : \"\";\n        message.roomName = (_c = object.roomName) !== null && _c !== void 0 ? _c : \"\";\n        message.participantIdentity = (_d = object.participantIdentity) !== null && _d !== void 0 ? _d : \"\";\n        message.participantName = (_e = object.participantName) !== null && _e !== void 0 ? _e : \"\";\n        message.bypassTranscoding = (_f = object.bypassTranscoding) !== null && _f !== void 0 ? _f : undefined;\n        message.audio = (object.audio !== undefined && object.audio !== null)\n            ? exports.IngressAudioOptions.fromPartial(object.audio)\n            : undefined;\n        message.video = (object.video !== undefined && object.video !== null)\n            ? exports.IngressVideoOptions.fromPartial(object.video)\n            : undefined;\n        return message;\n    },\n};\nfunction createBaseListIngressRequest() {\n    return { roomName: \"\", ingressId: \"\" };\n}\nexports.ListIngressRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.roomName !== undefined && message.roomName !== \"\") {\n            writer.uint32(10).string(message.roomName);\n        }\n        if (message.ingressId !== undefined && message.ingressId !== \"\") {\n            writer.uint32(18).string(message.ingressId);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseListIngressRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.roomName = reader.string();\n                    break;\n                case 2:\n                    message.ingressId = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            roomName: isSet(object.roomName) ? String(object.roomName) : \"\",\n            ingressId: isSet(object.ingressId) ? String(object.ingressId) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.roomName !== undefined && (obj.roomName = message.roomName);\n        message.ingressId !== undefined && (obj.ingressId = message.ingressId);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseListIngressRequest();\n        message.roomName = (_a = object.roomName) !== null && _a !== void 0 ? _a : \"\";\n        message.ingressId = (_b = object.ingressId) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    },\n};\nfunction createBaseListIngressResponse() {\n    return { items: [] };\n}\nexports.ListIngressResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.items !== undefined && message.items.length !== 0) {\n            for (const v of message.items) {\n                exports.IngressInfo.encode(v, writer.uint32(10).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseListIngressResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.items.push(exports.IngressInfo.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return { items: Array.isArray(object === null || object === void 0 ? void 0 : object.items) ? object.items.map((e) => exports.IngressInfo.fromJSON(e)) : [] };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.items) {\n            obj.items = message.items.map((e) => e ? exports.IngressInfo.toJSON(e) : undefined);\n        }\n        else {\n            obj.items = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseListIngressResponse();\n        message.items = ((_a = object.items) === null || _a === void 0 ? void 0 : _a.map((e) => exports.IngressInfo.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseDeleteIngressRequest() {\n    return { ingressId: \"\" };\n}\nexports.DeleteIngressRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.ingressId !== undefined && message.ingressId !== \"\") {\n            writer.uint32(10).string(message.ingressId);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDeleteIngressRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.ingressId = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return { ingressId: isSet(object.ingressId) ? String(object.ingressId) : \"\" };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.ingressId !== undefined && (obj.ingressId = message.ingressId);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseDeleteIngressRequest();\n        message.ingressId = (_a = object.ingressId) !== null && _a !== void 0 ? _a : \"\";\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\") {\n        return globalThis;\n    }\n    if (typeof self !== \"undefined\") {\n        return self;\n    }\n    if (typeof window !== \"undefined\") {\n        return window;\n    }\n    if (typeof global !== \"undefined\") {\n        return global;\n    }\n    throw \"Unable to locate global object\";\n})();\nfunction longToNumber(long) {\n    if (long.gt(Number.MAX_SAFE_INTEGER)) {\n        throw new globalThis.Error(\"Value is larger than Number.MAX_SAFE_INTEGER\");\n    }\n    return long.toNumber();\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=livekit_ingress.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/livekit-server-sdk/dist/proto/livekit_ingress.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/livekit-server-sdk/dist/proto/livekit_models.js":
/*!**********************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/proto/livekit_models.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Room = exports.clientInfo_SDKToJSON = exports.clientInfo_SDKFromJSON = exports.ClientInfo_SDK = exports.serverInfo_EditionToJSON = exports.serverInfo_EditionFromJSON = exports.ServerInfo_Edition = exports.dataPacket_KindToJSON = exports.dataPacket_KindFromJSON = exports.DataPacket_Kind = exports.encryption_TypeToJSON = exports.encryption_TypeFromJSON = exports.Encryption_Type = exports.participantInfo_StateToJSON = exports.participantInfo_StateFromJSON = exports.ParticipantInfo_State = exports.subscriptionErrorToJSON = exports.subscriptionErrorFromJSON = exports.SubscriptionError = exports.reconnectReasonToJSON = exports.reconnectReasonFromJSON = exports.ReconnectReason = exports.disconnectReasonToJSON = exports.disconnectReasonFromJSON = exports.DisconnectReason = exports.clientConfigSettingToJSON = exports.clientConfigSettingFromJSON = exports.ClientConfigSetting = exports.connectionQualityToJSON = exports.connectionQualityFromJSON = exports.ConnectionQuality = exports.videoQualityToJSON = exports.videoQualityFromJSON = exports.VideoQuality = exports.trackSourceToJSON = exports.trackSourceFromJSON = exports.TrackSource = exports.trackTypeToJSON = exports.trackTypeFromJSON = exports.TrackType = exports.imageCodecToJSON = exports.imageCodecFromJSON = exports.ImageCodec = exports.videoCodecToJSON = exports.videoCodecFromJSON = exports.VideoCodec = exports.audioCodecToJSON = exports.audioCodecFromJSON = exports.AudioCodec = exports.protobufPackage = void 0;\nexports.TimedVersion = exports.RTPStats_GapHistogramEntry = exports.RTPStats = exports.RTPDrift = exports.DisabledCodecs = exports.VideoConfiguration = exports.ClientConfiguration = exports.ClientInfo = exports.ServerInfo = exports.ParticipantTracks = exports.UserPacket = exports.SpeakerInfo = exports.ActiveSpeakerUpdate = exports.DataPacket = exports.VideoLayer = exports.TrackInfo = exports.SimulcastCodecInfo = exports.Encryption = exports.ParticipantInfo = exports.ParticipantPermission = exports.PlayoutDelay = exports.Codec = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(__webpack_require__(/*! long */ \"(ssr)/./node_modules/long/umd/index.js\"));\nconst minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\"));\nconst timestamp_1 = __webpack_require__(/*! ./google/protobuf/timestamp */ \"(ssr)/./node_modules/livekit-server-sdk/dist/proto/google/protobuf/timestamp.js\");\nexports.protobufPackage = \"livekit\";\nvar AudioCodec;\n(function (AudioCodec) {\n    AudioCodec[AudioCodec[\"DEFAULT_AC\"] = 0] = \"DEFAULT_AC\";\n    AudioCodec[AudioCodec[\"OPUS\"] = 1] = \"OPUS\";\n    AudioCodec[AudioCodec[\"AAC\"] = 2] = \"AAC\";\n    AudioCodec[AudioCodec[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(AudioCodec = exports.AudioCodec || (exports.AudioCodec = {}));\nfunction audioCodecFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"DEFAULT_AC\":\n            return AudioCodec.DEFAULT_AC;\n        case 1:\n        case \"OPUS\":\n            return AudioCodec.OPUS;\n        case 2:\n        case \"AAC\":\n            return AudioCodec.AAC;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return AudioCodec.UNRECOGNIZED;\n    }\n}\nexports.audioCodecFromJSON = audioCodecFromJSON;\nfunction audioCodecToJSON(object) {\n    switch (object) {\n        case AudioCodec.DEFAULT_AC:\n            return \"DEFAULT_AC\";\n        case AudioCodec.OPUS:\n            return \"OPUS\";\n        case AudioCodec.AAC:\n            return \"AAC\";\n        case AudioCodec.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.audioCodecToJSON = audioCodecToJSON;\nvar VideoCodec;\n(function (VideoCodec) {\n    VideoCodec[VideoCodec[\"DEFAULT_VC\"] = 0] = \"DEFAULT_VC\";\n    VideoCodec[VideoCodec[\"H264_BASELINE\"] = 1] = \"H264_BASELINE\";\n    VideoCodec[VideoCodec[\"H264_MAIN\"] = 2] = \"H264_MAIN\";\n    VideoCodec[VideoCodec[\"H264_HIGH\"] = 3] = \"H264_HIGH\";\n    VideoCodec[VideoCodec[\"VP8\"] = 4] = \"VP8\";\n    VideoCodec[VideoCodec[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(VideoCodec = exports.VideoCodec || (exports.VideoCodec = {}));\nfunction videoCodecFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"DEFAULT_VC\":\n            return VideoCodec.DEFAULT_VC;\n        case 1:\n        case \"H264_BASELINE\":\n            return VideoCodec.H264_BASELINE;\n        case 2:\n        case \"H264_MAIN\":\n            return VideoCodec.H264_MAIN;\n        case 3:\n        case \"H264_HIGH\":\n            return VideoCodec.H264_HIGH;\n        case 4:\n        case \"VP8\":\n            return VideoCodec.VP8;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return VideoCodec.UNRECOGNIZED;\n    }\n}\nexports.videoCodecFromJSON = videoCodecFromJSON;\nfunction videoCodecToJSON(object) {\n    switch (object) {\n        case VideoCodec.DEFAULT_VC:\n            return \"DEFAULT_VC\";\n        case VideoCodec.H264_BASELINE:\n            return \"H264_BASELINE\";\n        case VideoCodec.H264_MAIN:\n            return \"H264_MAIN\";\n        case VideoCodec.H264_HIGH:\n            return \"H264_HIGH\";\n        case VideoCodec.VP8:\n            return \"VP8\";\n        case VideoCodec.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.videoCodecToJSON = videoCodecToJSON;\nvar ImageCodec;\n(function (ImageCodec) {\n    ImageCodec[ImageCodec[\"IC_DEFAULT\"] = 0] = \"IC_DEFAULT\";\n    ImageCodec[ImageCodec[\"IC_JPEG\"] = 1] = \"IC_JPEG\";\n    ImageCodec[ImageCodec[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(ImageCodec = exports.ImageCodec || (exports.ImageCodec = {}));\nfunction imageCodecFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"IC_DEFAULT\":\n            return ImageCodec.IC_DEFAULT;\n        case 1:\n        case \"IC_JPEG\":\n            return ImageCodec.IC_JPEG;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return ImageCodec.UNRECOGNIZED;\n    }\n}\nexports.imageCodecFromJSON = imageCodecFromJSON;\nfunction imageCodecToJSON(object) {\n    switch (object) {\n        case ImageCodec.IC_DEFAULT:\n            return \"IC_DEFAULT\";\n        case ImageCodec.IC_JPEG:\n            return \"IC_JPEG\";\n        case ImageCodec.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.imageCodecToJSON = imageCodecToJSON;\nvar TrackType;\n(function (TrackType) {\n    TrackType[TrackType[\"AUDIO\"] = 0] = \"AUDIO\";\n    TrackType[TrackType[\"VIDEO\"] = 1] = \"VIDEO\";\n    TrackType[TrackType[\"DATA\"] = 2] = \"DATA\";\n    TrackType[TrackType[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(TrackType = exports.TrackType || (exports.TrackType = {}));\nfunction trackTypeFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"AUDIO\":\n            return TrackType.AUDIO;\n        case 1:\n        case \"VIDEO\":\n            return TrackType.VIDEO;\n        case 2:\n        case \"DATA\":\n            return TrackType.DATA;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return TrackType.UNRECOGNIZED;\n    }\n}\nexports.trackTypeFromJSON = trackTypeFromJSON;\nfunction trackTypeToJSON(object) {\n    switch (object) {\n        case TrackType.AUDIO:\n            return \"AUDIO\";\n        case TrackType.VIDEO:\n            return \"VIDEO\";\n        case TrackType.DATA:\n            return \"DATA\";\n        case TrackType.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.trackTypeToJSON = trackTypeToJSON;\nvar TrackSource;\n(function (TrackSource) {\n    TrackSource[TrackSource[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    TrackSource[TrackSource[\"CAMERA\"] = 1] = \"CAMERA\";\n    TrackSource[TrackSource[\"MICROPHONE\"] = 2] = \"MICROPHONE\";\n    TrackSource[TrackSource[\"SCREEN_SHARE\"] = 3] = \"SCREEN_SHARE\";\n    TrackSource[TrackSource[\"SCREEN_SHARE_AUDIO\"] = 4] = \"SCREEN_SHARE_AUDIO\";\n    TrackSource[TrackSource[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(TrackSource = exports.TrackSource || (exports.TrackSource = {}));\nfunction trackSourceFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"UNKNOWN\":\n            return TrackSource.UNKNOWN;\n        case 1:\n        case \"CAMERA\":\n            return TrackSource.CAMERA;\n        case 2:\n        case \"MICROPHONE\":\n            return TrackSource.MICROPHONE;\n        case 3:\n        case \"SCREEN_SHARE\":\n            return TrackSource.SCREEN_SHARE;\n        case 4:\n        case \"SCREEN_SHARE_AUDIO\":\n            return TrackSource.SCREEN_SHARE_AUDIO;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return TrackSource.UNRECOGNIZED;\n    }\n}\nexports.trackSourceFromJSON = trackSourceFromJSON;\nfunction trackSourceToJSON(object) {\n    switch (object) {\n        case TrackSource.UNKNOWN:\n            return \"UNKNOWN\";\n        case TrackSource.CAMERA:\n            return \"CAMERA\";\n        case TrackSource.MICROPHONE:\n            return \"MICROPHONE\";\n        case TrackSource.SCREEN_SHARE:\n            return \"SCREEN_SHARE\";\n        case TrackSource.SCREEN_SHARE_AUDIO:\n            return \"SCREEN_SHARE_AUDIO\";\n        case TrackSource.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.trackSourceToJSON = trackSourceToJSON;\nvar VideoQuality;\n(function (VideoQuality) {\n    VideoQuality[VideoQuality[\"LOW\"] = 0] = \"LOW\";\n    VideoQuality[VideoQuality[\"MEDIUM\"] = 1] = \"MEDIUM\";\n    VideoQuality[VideoQuality[\"HIGH\"] = 2] = \"HIGH\";\n    VideoQuality[VideoQuality[\"OFF\"] = 3] = \"OFF\";\n    VideoQuality[VideoQuality[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(VideoQuality = exports.VideoQuality || (exports.VideoQuality = {}));\nfunction videoQualityFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"LOW\":\n            return VideoQuality.LOW;\n        case 1:\n        case \"MEDIUM\":\n            return VideoQuality.MEDIUM;\n        case 2:\n        case \"HIGH\":\n            return VideoQuality.HIGH;\n        case 3:\n        case \"OFF\":\n            return VideoQuality.OFF;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return VideoQuality.UNRECOGNIZED;\n    }\n}\nexports.videoQualityFromJSON = videoQualityFromJSON;\nfunction videoQualityToJSON(object) {\n    switch (object) {\n        case VideoQuality.LOW:\n            return \"LOW\";\n        case VideoQuality.MEDIUM:\n            return \"MEDIUM\";\n        case VideoQuality.HIGH:\n            return \"HIGH\";\n        case VideoQuality.OFF:\n            return \"OFF\";\n        case VideoQuality.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.videoQualityToJSON = videoQualityToJSON;\nvar ConnectionQuality;\n(function (ConnectionQuality) {\n    ConnectionQuality[ConnectionQuality[\"POOR\"] = 0] = \"POOR\";\n    ConnectionQuality[ConnectionQuality[\"GOOD\"] = 1] = \"GOOD\";\n    ConnectionQuality[ConnectionQuality[\"EXCELLENT\"] = 2] = \"EXCELLENT\";\n    ConnectionQuality[ConnectionQuality[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(ConnectionQuality = exports.ConnectionQuality || (exports.ConnectionQuality = {}));\nfunction connectionQualityFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"POOR\":\n            return ConnectionQuality.POOR;\n        case 1:\n        case \"GOOD\":\n            return ConnectionQuality.GOOD;\n        case 2:\n        case \"EXCELLENT\":\n            return ConnectionQuality.EXCELLENT;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return ConnectionQuality.UNRECOGNIZED;\n    }\n}\nexports.connectionQualityFromJSON = connectionQualityFromJSON;\nfunction connectionQualityToJSON(object) {\n    switch (object) {\n        case ConnectionQuality.POOR:\n            return \"POOR\";\n        case ConnectionQuality.GOOD:\n            return \"GOOD\";\n        case ConnectionQuality.EXCELLENT:\n            return \"EXCELLENT\";\n        case ConnectionQuality.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.connectionQualityToJSON = connectionQualityToJSON;\nvar ClientConfigSetting;\n(function (ClientConfigSetting) {\n    ClientConfigSetting[ClientConfigSetting[\"UNSET\"] = 0] = \"UNSET\";\n    ClientConfigSetting[ClientConfigSetting[\"DISABLED\"] = 1] = \"DISABLED\";\n    ClientConfigSetting[ClientConfigSetting[\"ENABLED\"] = 2] = \"ENABLED\";\n    ClientConfigSetting[ClientConfigSetting[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(ClientConfigSetting = exports.ClientConfigSetting || (exports.ClientConfigSetting = {}));\nfunction clientConfigSettingFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"UNSET\":\n            return ClientConfigSetting.UNSET;\n        case 1:\n        case \"DISABLED\":\n            return ClientConfigSetting.DISABLED;\n        case 2:\n        case \"ENABLED\":\n            return ClientConfigSetting.ENABLED;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return ClientConfigSetting.UNRECOGNIZED;\n    }\n}\nexports.clientConfigSettingFromJSON = clientConfigSettingFromJSON;\nfunction clientConfigSettingToJSON(object) {\n    switch (object) {\n        case ClientConfigSetting.UNSET:\n            return \"UNSET\";\n        case ClientConfigSetting.DISABLED:\n            return \"DISABLED\";\n        case ClientConfigSetting.ENABLED:\n            return \"ENABLED\";\n        case ClientConfigSetting.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.clientConfigSettingToJSON = clientConfigSettingToJSON;\nvar DisconnectReason;\n(function (DisconnectReason) {\n    DisconnectReason[DisconnectReason[\"UNKNOWN_REASON\"] = 0] = \"UNKNOWN_REASON\";\n    DisconnectReason[DisconnectReason[\"CLIENT_INITIATED\"] = 1] = \"CLIENT_INITIATED\";\n    DisconnectReason[DisconnectReason[\"DUPLICATE_IDENTITY\"] = 2] = \"DUPLICATE_IDENTITY\";\n    DisconnectReason[DisconnectReason[\"SERVER_SHUTDOWN\"] = 3] = \"SERVER_SHUTDOWN\";\n    DisconnectReason[DisconnectReason[\"PARTICIPANT_REMOVED\"] = 4] = \"PARTICIPANT_REMOVED\";\n    DisconnectReason[DisconnectReason[\"ROOM_DELETED\"] = 5] = \"ROOM_DELETED\";\n    DisconnectReason[DisconnectReason[\"STATE_MISMATCH\"] = 6] = \"STATE_MISMATCH\";\n    DisconnectReason[DisconnectReason[\"JOIN_FAILURE\"] = 7] = \"JOIN_FAILURE\";\n    DisconnectReason[DisconnectReason[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(DisconnectReason = exports.DisconnectReason || (exports.DisconnectReason = {}));\nfunction disconnectReasonFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"UNKNOWN_REASON\":\n            return DisconnectReason.UNKNOWN_REASON;\n        case 1:\n        case \"CLIENT_INITIATED\":\n            return DisconnectReason.CLIENT_INITIATED;\n        case 2:\n        case \"DUPLICATE_IDENTITY\":\n            return DisconnectReason.DUPLICATE_IDENTITY;\n        case 3:\n        case \"SERVER_SHUTDOWN\":\n            return DisconnectReason.SERVER_SHUTDOWN;\n        case 4:\n        case \"PARTICIPANT_REMOVED\":\n            return DisconnectReason.PARTICIPANT_REMOVED;\n        case 5:\n        case \"ROOM_DELETED\":\n            return DisconnectReason.ROOM_DELETED;\n        case 6:\n        case \"STATE_MISMATCH\":\n            return DisconnectReason.STATE_MISMATCH;\n        case 7:\n        case \"JOIN_FAILURE\":\n            return DisconnectReason.JOIN_FAILURE;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return DisconnectReason.UNRECOGNIZED;\n    }\n}\nexports.disconnectReasonFromJSON = disconnectReasonFromJSON;\nfunction disconnectReasonToJSON(object) {\n    switch (object) {\n        case DisconnectReason.UNKNOWN_REASON:\n            return \"UNKNOWN_REASON\";\n        case DisconnectReason.CLIENT_INITIATED:\n            return \"CLIENT_INITIATED\";\n        case DisconnectReason.DUPLICATE_IDENTITY:\n            return \"DUPLICATE_IDENTITY\";\n        case DisconnectReason.SERVER_SHUTDOWN:\n            return \"SERVER_SHUTDOWN\";\n        case DisconnectReason.PARTICIPANT_REMOVED:\n            return \"PARTICIPANT_REMOVED\";\n        case DisconnectReason.ROOM_DELETED:\n            return \"ROOM_DELETED\";\n        case DisconnectReason.STATE_MISMATCH:\n            return \"STATE_MISMATCH\";\n        case DisconnectReason.JOIN_FAILURE:\n            return \"JOIN_FAILURE\";\n        case DisconnectReason.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.disconnectReasonToJSON = disconnectReasonToJSON;\nvar ReconnectReason;\n(function (ReconnectReason) {\n    ReconnectReason[ReconnectReason[\"RR_UNKNOWN\"] = 0] = \"RR_UNKNOWN\";\n    ReconnectReason[ReconnectReason[\"RR_SIGNAL_DISCONNECTED\"] = 1] = \"RR_SIGNAL_DISCONNECTED\";\n    ReconnectReason[ReconnectReason[\"RR_PUBLISHER_FAILED\"] = 2] = \"RR_PUBLISHER_FAILED\";\n    ReconnectReason[ReconnectReason[\"RR_SUBSCRIBER_FAILED\"] = 3] = \"RR_SUBSCRIBER_FAILED\";\n    ReconnectReason[ReconnectReason[\"RR_SWITCH_CANDIDATE\"] = 4] = \"RR_SWITCH_CANDIDATE\";\n    ReconnectReason[ReconnectReason[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(ReconnectReason = exports.ReconnectReason || (exports.ReconnectReason = {}));\nfunction reconnectReasonFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"RR_UNKNOWN\":\n            return ReconnectReason.RR_UNKNOWN;\n        case 1:\n        case \"RR_SIGNAL_DISCONNECTED\":\n            return ReconnectReason.RR_SIGNAL_DISCONNECTED;\n        case 2:\n        case \"RR_PUBLISHER_FAILED\":\n            return ReconnectReason.RR_PUBLISHER_FAILED;\n        case 3:\n        case \"RR_SUBSCRIBER_FAILED\":\n            return ReconnectReason.RR_SUBSCRIBER_FAILED;\n        case 4:\n        case \"RR_SWITCH_CANDIDATE\":\n            return ReconnectReason.RR_SWITCH_CANDIDATE;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return ReconnectReason.UNRECOGNIZED;\n    }\n}\nexports.reconnectReasonFromJSON = reconnectReasonFromJSON;\nfunction reconnectReasonToJSON(object) {\n    switch (object) {\n        case ReconnectReason.RR_UNKNOWN:\n            return \"RR_UNKNOWN\";\n        case ReconnectReason.RR_SIGNAL_DISCONNECTED:\n            return \"RR_SIGNAL_DISCONNECTED\";\n        case ReconnectReason.RR_PUBLISHER_FAILED:\n            return \"RR_PUBLISHER_FAILED\";\n        case ReconnectReason.RR_SUBSCRIBER_FAILED:\n            return \"RR_SUBSCRIBER_FAILED\";\n        case ReconnectReason.RR_SWITCH_CANDIDATE:\n            return \"RR_SWITCH_CANDIDATE\";\n        case ReconnectReason.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.reconnectReasonToJSON = reconnectReasonToJSON;\nvar SubscriptionError;\n(function (SubscriptionError) {\n    SubscriptionError[SubscriptionError[\"SE_UNKNOWN\"] = 0] = \"SE_UNKNOWN\";\n    SubscriptionError[SubscriptionError[\"SE_CODEC_UNSUPPORTED\"] = 1] = \"SE_CODEC_UNSUPPORTED\";\n    SubscriptionError[SubscriptionError[\"SE_TRACK_NOTFOUND\"] = 2] = \"SE_TRACK_NOTFOUND\";\n    SubscriptionError[SubscriptionError[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(SubscriptionError = exports.SubscriptionError || (exports.SubscriptionError = {}));\nfunction subscriptionErrorFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"SE_UNKNOWN\":\n            return SubscriptionError.SE_UNKNOWN;\n        case 1:\n        case \"SE_CODEC_UNSUPPORTED\":\n            return SubscriptionError.SE_CODEC_UNSUPPORTED;\n        case 2:\n        case \"SE_TRACK_NOTFOUND\":\n            return SubscriptionError.SE_TRACK_NOTFOUND;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return SubscriptionError.UNRECOGNIZED;\n    }\n}\nexports.subscriptionErrorFromJSON = subscriptionErrorFromJSON;\nfunction subscriptionErrorToJSON(object) {\n    switch (object) {\n        case SubscriptionError.SE_UNKNOWN:\n            return \"SE_UNKNOWN\";\n        case SubscriptionError.SE_CODEC_UNSUPPORTED:\n            return \"SE_CODEC_UNSUPPORTED\";\n        case SubscriptionError.SE_TRACK_NOTFOUND:\n            return \"SE_TRACK_NOTFOUND\";\n        case SubscriptionError.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.subscriptionErrorToJSON = subscriptionErrorToJSON;\nvar ParticipantInfo_State;\n(function (ParticipantInfo_State) {\n    /** JOINING - websocket' connected, but not offered yet */\n    ParticipantInfo_State[ParticipantInfo_State[\"JOINING\"] = 0] = \"JOINING\";\n    /** JOINED - server received client offer */\n    ParticipantInfo_State[ParticipantInfo_State[\"JOINED\"] = 1] = \"JOINED\";\n    /** ACTIVE - ICE connectivity established */\n    ParticipantInfo_State[ParticipantInfo_State[\"ACTIVE\"] = 2] = \"ACTIVE\";\n    /** DISCONNECTED - WS disconnected */\n    ParticipantInfo_State[ParticipantInfo_State[\"DISCONNECTED\"] = 3] = \"DISCONNECTED\";\n    ParticipantInfo_State[ParticipantInfo_State[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(ParticipantInfo_State = exports.ParticipantInfo_State || (exports.ParticipantInfo_State = {}));\nfunction participantInfo_StateFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"JOINING\":\n            return ParticipantInfo_State.JOINING;\n        case 1:\n        case \"JOINED\":\n            return ParticipantInfo_State.JOINED;\n        case 2:\n        case \"ACTIVE\":\n            return ParticipantInfo_State.ACTIVE;\n        case 3:\n        case \"DISCONNECTED\":\n            return ParticipantInfo_State.DISCONNECTED;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return ParticipantInfo_State.UNRECOGNIZED;\n    }\n}\nexports.participantInfo_StateFromJSON = participantInfo_StateFromJSON;\nfunction participantInfo_StateToJSON(object) {\n    switch (object) {\n        case ParticipantInfo_State.JOINING:\n            return \"JOINING\";\n        case ParticipantInfo_State.JOINED:\n            return \"JOINED\";\n        case ParticipantInfo_State.ACTIVE:\n            return \"ACTIVE\";\n        case ParticipantInfo_State.DISCONNECTED:\n            return \"DISCONNECTED\";\n        case ParticipantInfo_State.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.participantInfo_StateToJSON = participantInfo_StateToJSON;\nvar Encryption_Type;\n(function (Encryption_Type) {\n    Encryption_Type[Encryption_Type[\"NONE\"] = 0] = \"NONE\";\n    Encryption_Type[Encryption_Type[\"GCM\"] = 1] = \"GCM\";\n    Encryption_Type[Encryption_Type[\"CUSTOM\"] = 2] = \"CUSTOM\";\n    Encryption_Type[Encryption_Type[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(Encryption_Type = exports.Encryption_Type || (exports.Encryption_Type = {}));\nfunction encryption_TypeFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"NONE\":\n            return Encryption_Type.NONE;\n        case 1:\n        case \"GCM\":\n            return Encryption_Type.GCM;\n        case 2:\n        case \"CUSTOM\":\n            return Encryption_Type.CUSTOM;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return Encryption_Type.UNRECOGNIZED;\n    }\n}\nexports.encryption_TypeFromJSON = encryption_TypeFromJSON;\nfunction encryption_TypeToJSON(object) {\n    switch (object) {\n        case Encryption_Type.NONE:\n            return \"NONE\";\n        case Encryption_Type.GCM:\n            return \"GCM\";\n        case Encryption_Type.CUSTOM:\n            return \"CUSTOM\";\n        case Encryption_Type.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.encryption_TypeToJSON = encryption_TypeToJSON;\nvar DataPacket_Kind;\n(function (DataPacket_Kind) {\n    DataPacket_Kind[DataPacket_Kind[\"RELIABLE\"] = 0] = \"RELIABLE\";\n    DataPacket_Kind[DataPacket_Kind[\"LOSSY\"] = 1] = \"LOSSY\";\n    DataPacket_Kind[DataPacket_Kind[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(DataPacket_Kind = exports.DataPacket_Kind || (exports.DataPacket_Kind = {}));\nfunction dataPacket_KindFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"RELIABLE\":\n            return DataPacket_Kind.RELIABLE;\n        case 1:\n        case \"LOSSY\":\n            return DataPacket_Kind.LOSSY;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return DataPacket_Kind.UNRECOGNIZED;\n    }\n}\nexports.dataPacket_KindFromJSON = dataPacket_KindFromJSON;\nfunction dataPacket_KindToJSON(object) {\n    switch (object) {\n        case DataPacket_Kind.RELIABLE:\n            return \"RELIABLE\";\n        case DataPacket_Kind.LOSSY:\n            return \"LOSSY\";\n        case DataPacket_Kind.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.dataPacket_KindToJSON = dataPacket_KindToJSON;\nvar ServerInfo_Edition;\n(function (ServerInfo_Edition) {\n    ServerInfo_Edition[ServerInfo_Edition[\"Standard\"] = 0] = \"Standard\";\n    ServerInfo_Edition[ServerInfo_Edition[\"Cloud\"] = 1] = \"Cloud\";\n    ServerInfo_Edition[ServerInfo_Edition[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(ServerInfo_Edition = exports.ServerInfo_Edition || (exports.ServerInfo_Edition = {}));\nfunction serverInfo_EditionFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"Standard\":\n            return ServerInfo_Edition.Standard;\n        case 1:\n        case \"Cloud\":\n            return ServerInfo_Edition.Cloud;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return ServerInfo_Edition.UNRECOGNIZED;\n    }\n}\nexports.serverInfo_EditionFromJSON = serverInfo_EditionFromJSON;\nfunction serverInfo_EditionToJSON(object) {\n    switch (object) {\n        case ServerInfo_Edition.Standard:\n            return \"Standard\";\n        case ServerInfo_Edition.Cloud:\n            return \"Cloud\";\n        case ServerInfo_Edition.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.serverInfo_EditionToJSON = serverInfo_EditionToJSON;\nvar ClientInfo_SDK;\n(function (ClientInfo_SDK) {\n    ClientInfo_SDK[ClientInfo_SDK[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    ClientInfo_SDK[ClientInfo_SDK[\"JS\"] = 1] = \"JS\";\n    ClientInfo_SDK[ClientInfo_SDK[\"SWIFT\"] = 2] = \"SWIFT\";\n    ClientInfo_SDK[ClientInfo_SDK[\"ANDROID\"] = 3] = \"ANDROID\";\n    ClientInfo_SDK[ClientInfo_SDK[\"FLUTTER\"] = 4] = \"FLUTTER\";\n    ClientInfo_SDK[ClientInfo_SDK[\"GO\"] = 5] = \"GO\";\n    ClientInfo_SDK[ClientInfo_SDK[\"UNITY\"] = 6] = \"UNITY\";\n    ClientInfo_SDK[ClientInfo_SDK[\"REACT_NATIVE\"] = 7] = \"REACT_NATIVE\";\n    ClientInfo_SDK[ClientInfo_SDK[\"RUST\"] = 8] = \"RUST\";\n    ClientInfo_SDK[ClientInfo_SDK[\"PYTHON\"] = 9] = \"PYTHON\";\n    ClientInfo_SDK[ClientInfo_SDK[\"CPP\"] = 10] = \"CPP\";\n    ClientInfo_SDK[ClientInfo_SDK[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(ClientInfo_SDK = exports.ClientInfo_SDK || (exports.ClientInfo_SDK = {}));\nfunction clientInfo_SDKFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"UNKNOWN\":\n            return ClientInfo_SDK.UNKNOWN;\n        case 1:\n        case \"JS\":\n            return ClientInfo_SDK.JS;\n        case 2:\n        case \"SWIFT\":\n            return ClientInfo_SDK.SWIFT;\n        case 3:\n        case \"ANDROID\":\n            return ClientInfo_SDK.ANDROID;\n        case 4:\n        case \"FLUTTER\":\n            return ClientInfo_SDK.FLUTTER;\n        case 5:\n        case \"GO\":\n            return ClientInfo_SDK.GO;\n        case 6:\n        case \"UNITY\":\n            return ClientInfo_SDK.UNITY;\n        case 7:\n        case \"REACT_NATIVE\":\n            return ClientInfo_SDK.REACT_NATIVE;\n        case 8:\n        case \"RUST\":\n            return ClientInfo_SDK.RUST;\n        case 9:\n        case \"PYTHON\":\n            return ClientInfo_SDK.PYTHON;\n        case 10:\n        case \"CPP\":\n            return ClientInfo_SDK.CPP;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return ClientInfo_SDK.UNRECOGNIZED;\n    }\n}\nexports.clientInfo_SDKFromJSON = clientInfo_SDKFromJSON;\nfunction clientInfo_SDKToJSON(object) {\n    switch (object) {\n        case ClientInfo_SDK.UNKNOWN:\n            return \"UNKNOWN\";\n        case ClientInfo_SDK.JS:\n            return \"JS\";\n        case ClientInfo_SDK.SWIFT:\n            return \"SWIFT\";\n        case ClientInfo_SDK.ANDROID:\n            return \"ANDROID\";\n        case ClientInfo_SDK.FLUTTER:\n            return \"FLUTTER\";\n        case ClientInfo_SDK.GO:\n            return \"GO\";\n        case ClientInfo_SDK.UNITY:\n            return \"UNITY\";\n        case ClientInfo_SDK.REACT_NATIVE:\n            return \"REACT_NATIVE\";\n        case ClientInfo_SDK.RUST:\n            return \"RUST\";\n        case ClientInfo_SDK.PYTHON:\n            return \"PYTHON\";\n        case ClientInfo_SDK.CPP:\n            return \"CPP\";\n        case ClientInfo_SDK.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.clientInfo_SDKToJSON = clientInfo_SDKToJSON;\nfunction createBaseRoom() {\n    return {\n        sid: \"\",\n        name: \"\",\n        emptyTimeout: 0,\n        maxParticipants: 0,\n        creationTime: 0,\n        turnPassword: \"\",\n        enabledCodecs: [],\n        metadata: \"\",\n        numParticipants: 0,\n        numPublishers: 0,\n        activeRecording: false,\n    };\n}\nexports.Room = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.sid !== \"\") {\n            writer.uint32(10).string(message.sid);\n        }\n        if (message.name !== \"\") {\n            writer.uint32(18).string(message.name);\n        }\n        if (message.emptyTimeout !== 0) {\n            writer.uint32(24).uint32(message.emptyTimeout);\n        }\n        if (message.maxParticipants !== 0) {\n            writer.uint32(32).uint32(message.maxParticipants);\n        }\n        if (message.creationTime !== 0) {\n            writer.uint32(40).int64(message.creationTime);\n        }\n        if (message.turnPassword !== \"\") {\n            writer.uint32(50).string(message.turnPassword);\n        }\n        for (const v of message.enabledCodecs) {\n            exports.Codec.encode(v, writer.uint32(58).fork()).ldelim();\n        }\n        if (message.metadata !== \"\") {\n            writer.uint32(66).string(message.metadata);\n        }\n        if (message.numParticipants !== 0) {\n            writer.uint32(72).uint32(message.numParticipants);\n        }\n        if (message.numPublishers !== 0) {\n            writer.uint32(88).uint32(message.numPublishers);\n        }\n        if (message.activeRecording === true) {\n            writer.uint32(80).bool(message.activeRecording);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseRoom();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.sid = reader.string();\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 3:\n                    message.emptyTimeout = reader.uint32();\n                    break;\n                case 4:\n                    message.maxParticipants = reader.uint32();\n                    break;\n                case 5:\n                    message.creationTime = longToNumber(reader.int64());\n                    break;\n                case 6:\n                    message.turnPassword = reader.string();\n                    break;\n                case 7:\n                    message.enabledCodecs.push(exports.Codec.decode(reader, reader.uint32()));\n                    break;\n                case 8:\n                    message.metadata = reader.string();\n                    break;\n                case 9:\n                    message.numParticipants = reader.uint32();\n                    break;\n                case 11:\n                    message.numPublishers = reader.uint32();\n                    break;\n                case 10:\n                    message.activeRecording = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            sid: isSet(object.sid) ? String(object.sid) : \"\",\n            name: isSet(object.name) ? String(object.name) : \"\",\n            emptyTimeout: isSet(object.emptyTimeout) ? Number(object.emptyTimeout) : 0,\n            maxParticipants: isSet(object.maxParticipants) ? Number(object.maxParticipants) : 0,\n            creationTime: isSet(object.creationTime) ? Number(object.creationTime) : 0,\n            turnPassword: isSet(object.turnPassword) ? String(object.turnPassword) : \"\",\n            enabledCodecs: Array.isArray(object === null || object === void 0 ? void 0 : object.enabledCodecs)\n                ? object.enabledCodecs.map((e) => exports.Codec.fromJSON(e))\n                : [],\n            metadata: isSet(object.metadata) ? String(object.metadata) : \"\",\n            numParticipants: isSet(object.numParticipants) ? Number(object.numParticipants) : 0,\n            numPublishers: isSet(object.numPublishers) ? Number(object.numPublishers) : 0,\n            activeRecording: isSet(object.activeRecording) ? Boolean(object.activeRecording) : false,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.sid !== undefined && (obj.sid = message.sid);\n        message.name !== undefined && (obj.name = message.name);\n        message.emptyTimeout !== undefined && (obj.emptyTimeout = Math.round(message.emptyTimeout));\n        message.maxParticipants !== undefined && (obj.maxParticipants = Math.round(message.maxParticipants));\n        message.creationTime !== undefined && (obj.creationTime = Math.round(message.creationTime));\n        message.turnPassword !== undefined && (obj.turnPassword = message.turnPassword);\n        if (message.enabledCodecs) {\n            obj.enabledCodecs = message.enabledCodecs.map((e) => e ? exports.Codec.toJSON(e) : undefined);\n        }\n        else {\n            obj.enabledCodecs = [];\n        }\n        message.metadata !== undefined && (obj.metadata = message.metadata);\n        message.numParticipants !== undefined && (obj.numParticipants = Math.round(message.numParticipants));\n        message.numPublishers !== undefined && (obj.numPublishers = Math.round(message.numPublishers));\n        message.activeRecording !== undefined && (obj.activeRecording = message.activeRecording);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n        const message = createBaseRoom();\n        message.sid = (_a = object.sid) !== null && _a !== void 0 ? _a : \"\";\n        message.name = (_b = object.name) !== null && _b !== void 0 ? _b : \"\";\n        message.emptyTimeout = (_c = object.emptyTimeout) !== null && _c !== void 0 ? _c : 0;\n        message.maxParticipants = (_d = object.maxParticipants) !== null && _d !== void 0 ? _d : 0;\n        message.creationTime = (_e = object.creationTime) !== null && _e !== void 0 ? _e : 0;\n        message.turnPassword = (_f = object.turnPassword) !== null && _f !== void 0 ? _f : \"\";\n        message.enabledCodecs = ((_g = object.enabledCodecs) === null || _g === void 0 ? void 0 : _g.map((e) => exports.Codec.fromPartial(e))) || [];\n        message.metadata = (_h = object.metadata) !== null && _h !== void 0 ? _h : \"\";\n        message.numParticipants = (_j = object.numParticipants) !== null && _j !== void 0 ? _j : 0;\n        message.numPublishers = (_k = object.numPublishers) !== null && _k !== void 0 ? _k : 0;\n        message.activeRecording = (_l = object.activeRecording) !== null && _l !== void 0 ? _l : false;\n        return message;\n    },\n};\nfunction createBaseCodec() {\n    return { mime: \"\", fmtpLine: \"\" };\n}\nexports.Codec = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.mime !== \"\") {\n            writer.uint32(10).string(message.mime);\n        }\n        if (message.fmtpLine !== \"\") {\n            writer.uint32(18).string(message.fmtpLine);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseCodec();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.mime = reader.string();\n                    break;\n                case 2:\n                    message.fmtpLine = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            mime: isSet(object.mime) ? String(object.mime) : \"\",\n            fmtpLine: isSet(object.fmtpLine) ? String(object.fmtpLine) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.mime !== undefined && (obj.mime = message.mime);\n        message.fmtpLine !== undefined && (obj.fmtpLine = message.fmtpLine);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseCodec();\n        message.mime = (_a = object.mime) !== null && _a !== void 0 ? _a : \"\";\n        message.fmtpLine = (_b = object.fmtpLine) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    },\n};\nfunction createBasePlayoutDelay() {\n    return { enabled: false, min: 0, max: 0 };\n}\nexports.PlayoutDelay = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.enabled === true) {\n            writer.uint32(8).bool(message.enabled);\n        }\n        if (message.min !== 0) {\n            writer.uint32(16).uint32(message.min);\n        }\n        if (message.max !== 0) {\n            writer.uint32(24).uint32(message.max);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePlayoutDelay();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.enabled = reader.bool();\n                    break;\n                case 2:\n                    message.min = reader.uint32();\n                    break;\n                case 3:\n                    message.max = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            enabled: isSet(object.enabled) ? Boolean(object.enabled) : false,\n            min: isSet(object.min) ? Number(object.min) : 0,\n            max: isSet(object.max) ? Number(object.max) : 0,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.enabled !== undefined && (obj.enabled = message.enabled);\n        message.min !== undefined && (obj.min = Math.round(message.min));\n        message.max !== undefined && (obj.max = Math.round(message.max));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBasePlayoutDelay();\n        message.enabled = (_a = object.enabled) !== null && _a !== void 0 ? _a : false;\n        message.min = (_b = object.min) !== null && _b !== void 0 ? _b : 0;\n        message.max = (_c = object.max) !== null && _c !== void 0 ? _c : 0;\n        return message;\n    },\n};\nfunction createBaseParticipantPermission() {\n    return {\n        canSubscribe: false,\n        canPublish: false,\n        canPublishData: false,\n        canPublishSources: [],\n        hidden: false,\n        recorder: false,\n        canUpdateMetadata: false,\n    };\n}\nexports.ParticipantPermission = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.canSubscribe === true) {\n            writer.uint32(8).bool(message.canSubscribe);\n        }\n        if (message.canPublish === true) {\n            writer.uint32(16).bool(message.canPublish);\n        }\n        if (message.canPublishData === true) {\n            writer.uint32(24).bool(message.canPublishData);\n        }\n        writer.uint32(74).fork();\n        for (const v of message.canPublishSources) {\n            writer.int32(v);\n        }\n        writer.ldelim();\n        if (message.hidden === true) {\n            writer.uint32(56).bool(message.hidden);\n        }\n        if (message.recorder === true) {\n            writer.uint32(64).bool(message.recorder);\n        }\n        if (message.canUpdateMetadata === true) {\n            writer.uint32(80).bool(message.canUpdateMetadata);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseParticipantPermission();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.canSubscribe = reader.bool();\n                    break;\n                case 2:\n                    message.canPublish = reader.bool();\n                    break;\n                case 3:\n                    message.canPublishData = reader.bool();\n                    break;\n                case 9:\n                    if ((tag & 7) === 2) {\n                        const end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2) {\n                            message.canPublishSources.push(reader.int32());\n                        }\n                    }\n                    else {\n                        message.canPublishSources.push(reader.int32());\n                    }\n                    break;\n                case 7:\n                    message.hidden = reader.bool();\n                    break;\n                case 8:\n                    message.recorder = reader.bool();\n                    break;\n                case 10:\n                    message.canUpdateMetadata = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            canSubscribe: isSet(object.canSubscribe) ? Boolean(object.canSubscribe) : false,\n            canPublish: isSet(object.canPublish) ? Boolean(object.canPublish) : false,\n            canPublishData: isSet(object.canPublishData) ? Boolean(object.canPublishData) : false,\n            canPublishSources: Array.isArray(object === null || object === void 0 ? void 0 : object.canPublishSources)\n                ? object.canPublishSources.map((e) => trackSourceFromJSON(e))\n                : [],\n            hidden: isSet(object.hidden) ? Boolean(object.hidden) : false,\n            recorder: isSet(object.recorder) ? Boolean(object.recorder) : false,\n            canUpdateMetadata: isSet(object.canUpdateMetadata) ? Boolean(object.canUpdateMetadata) : false,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.canSubscribe !== undefined && (obj.canSubscribe = message.canSubscribe);\n        message.canPublish !== undefined && (obj.canPublish = message.canPublish);\n        message.canPublishData !== undefined && (obj.canPublishData = message.canPublishData);\n        if (message.canPublishSources) {\n            obj.canPublishSources = message.canPublishSources.map((e) => trackSourceToJSON(e));\n        }\n        else {\n            obj.canPublishSources = [];\n        }\n        message.hidden !== undefined && (obj.hidden = message.hidden);\n        message.recorder !== undefined && (obj.recorder = message.recorder);\n        message.canUpdateMetadata !== undefined && (obj.canUpdateMetadata = message.canUpdateMetadata);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const message = createBaseParticipantPermission();\n        message.canSubscribe = (_a = object.canSubscribe) !== null && _a !== void 0 ? _a : false;\n        message.canPublish = (_b = object.canPublish) !== null && _b !== void 0 ? _b : false;\n        message.canPublishData = (_c = object.canPublishData) !== null && _c !== void 0 ? _c : false;\n        message.canPublishSources = ((_d = object.canPublishSources) === null || _d === void 0 ? void 0 : _d.map((e) => e)) || [];\n        message.hidden = (_e = object.hidden) !== null && _e !== void 0 ? _e : false;\n        message.recorder = (_f = object.recorder) !== null && _f !== void 0 ? _f : false;\n        message.canUpdateMetadata = (_g = object.canUpdateMetadata) !== null && _g !== void 0 ? _g : false;\n        return message;\n    },\n};\nfunction createBaseParticipantInfo() {\n    return {\n        sid: \"\",\n        identity: \"\",\n        state: 0,\n        tracks: [],\n        metadata: \"\",\n        joinedAt: 0,\n        name: \"\",\n        version: 0,\n        permission: undefined,\n        region: \"\",\n        isPublisher: false,\n    };\n}\nexports.ParticipantInfo = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.sid !== \"\") {\n            writer.uint32(10).string(message.sid);\n        }\n        if (message.identity !== \"\") {\n            writer.uint32(18).string(message.identity);\n        }\n        if (message.state !== 0) {\n            writer.uint32(24).int32(message.state);\n        }\n        for (const v of message.tracks) {\n            exports.TrackInfo.encode(v, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.metadata !== \"\") {\n            writer.uint32(42).string(message.metadata);\n        }\n        if (message.joinedAt !== 0) {\n            writer.uint32(48).int64(message.joinedAt);\n        }\n        if (message.name !== \"\") {\n            writer.uint32(74).string(message.name);\n        }\n        if (message.version !== 0) {\n            writer.uint32(80).uint32(message.version);\n        }\n        if (message.permission !== undefined) {\n            exports.ParticipantPermission.encode(message.permission, writer.uint32(90).fork()).ldelim();\n        }\n        if (message.region !== \"\") {\n            writer.uint32(98).string(message.region);\n        }\n        if (message.isPublisher === true) {\n            writer.uint32(104).bool(message.isPublisher);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseParticipantInfo();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.sid = reader.string();\n                    break;\n                case 2:\n                    message.identity = reader.string();\n                    break;\n                case 3:\n                    message.state = reader.int32();\n                    break;\n                case 4:\n                    message.tracks.push(exports.TrackInfo.decode(reader, reader.uint32()));\n                    break;\n                case 5:\n                    message.metadata = reader.string();\n                    break;\n                case 6:\n                    message.joinedAt = longToNumber(reader.int64());\n                    break;\n                case 9:\n                    message.name = reader.string();\n                    break;\n                case 10:\n                    message.version = reader.uint32();\n                    break;\n                case 11:\n                    message.permission = exports.ParticipantPermission.decode(reader, reader.uint32());\n                    break;\n                case 12:\n                    message.region = reader.string();\n                    break;\n                case 13:\n                    message.isPublisher = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            sid: isSet(object.sid) ? String(object.sid) : \"\",\n            identity: isSet(object.identity) ? String(object.identity) : \"\",\n            state: isSet(object.state) ? participantInfo_StateFromJSON(object.state) : 0,\n            tracks: Array.isArray(object === null || object === void 0 ? void 0 : object.tracks) ? object.tracks.map((e) => exports.TrackInfo.fromJSON(e)) : [],\n            metadata: isSet(object.metadata) ? String(object.metadata) : \"\",\n            joinedAt: isSet(object.joinedAt) ? Number(object.joinedAt) : 0,\n            name: isSet(object.name) ? String(object.name) : \"\",\n            version: isSet(object.version) ? Number(object.version) : 0,\n            permission: isSet(object.permission) ? exports.ParticipantPermission.fromJSON(object.permission) : undefined,\n            region: isSet(object.region) ? String(object.region) : \"\",\n            isPublisher: isSet(object.isPublisher) ? Boolean(object.isPublisher) : false,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.sid !== undefined && (obj.sid = message.sid);\n        message.identity !== undefined && (obj.identity = message.identity);\n        message.state !== undefined && (obj.state = participantInfo_StateToJSON(message.state));\n        if (message.tracks) {\n            obj.tracks = message.tracks.map((e) => e ? exports.TrackInfo.toJSON(e) : undefined);\n        }\n        else {\n            obj.tracks = [];\n        }\n        message.metadata !== undefined && (obj.metadata = message.metadata);\n        message.joinedAt !== undefined && (obj.joinedAt = Math.round(message.joinedAt));\n        message.name !== undefined && (obj.name = message.name);\n        message.version !== undefined && (obj.version = Math.round(message.version));\n        message.permission !== undefined &&\n            (obj.permission = message.permission ? exports.ParticipantPermission.toJSON(message.permission) : undefined);\n        message.region !== undefined && (obj.region = message.region);\n        message.isPublisher !== undefined && (obj.isPublisher = message.isPublisher);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n        const message = createBaseParticipantInfo();\n        message.sid = (_a = object.sid) !== null && _a !== void 0 ? _a : \"\";\n        message.identity = (_b = object.identity) !== null && _b !== void 0 ? _b : \"\";\n        message.state = (_c = object.state) !== null && _c !== void 0 ? _c : 0;\n        message.tracks = ((_d = object.tracks) === null || _d === void 0 ? void 0 : _d.map((e) => exports.TrackInfo.fromPartial(e))) || [];\n        message.metadata = (_e = object.metadata) !== null && _e !== void 0 ? _e : \"\";\n        message.joinedAt = (_f = object.joinedAt) !== null && _f !== void 0 ? _f : 0;\n        message.name = (_g = object.name) !== null && _g !== void 0 ? _g : \"\";\n        message.version = (_h = object.version) !== null && _h !== void 0 ? _h : 0;\n        message.permission = (object.permission !== undefined && object.permission !== null)\n            ? exports.ParticipantPermission.fromPartial(object.permission)\n            : undefined;\n        message.region = (_j = object.region) !== null && _j !== void 0 ? _j : \"\";\n        message.isPublisher = (_k = object.isPublisher) !== null && _k !== void 0 ? _k : false;\n        return message;\n    },\n};\nfunction createBaseEncryption() {\n    return {};\n}\nexports.Encryption = {\n    encode(_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseEncryption();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        return {};\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = createBaseEncryption();\n        return message;\n    },\n};\nfunction createBaseSimulcastCodecInfo() {\n    return { mimeType: \"\", mid: \"\", cid: \"\", layers: [] };\n}\nexports.SimulcastCodecInfo = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.mimeType !== \"\") {\n            writer.uint32(10).string(message.mimeType);\n        }\n        if (message.mid !== \"\") {\n            writer.uint32(18).string(message.mid);\n        }\n        if (message.cid !== \"\") {\n            writer.uint32(26).string(message.cid);\n        }\n        for (const v of message.layers) {\n            exports.VideoLayer.encode(v, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSimulcastCodecInfo();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.mimeType = reader.string();\n                    break;\n                case 2:\n                    message.mid = reader.string();\n                    break;\n                case 3:\n                    message.cid = reader.string();\n                    break;\n                case 4:\n                    message.layers.push(exports.VideoLayer.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            mimeType: isSet(object.mimeType) ? String(object.mimeType) : \"\",\n            mid: isSet(object.mid) ? String(object.mid) : \"\",\n            cid: isSet(object.cid) ? String(object.cid) : \"\",\n            layers: Array.isArray(object === null || object === void 0 ? void 0 : object.layers) ? object.layers.map((e) => exports.VideoLayer.fromJSON(e)) : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.mimeType !== undefined && (obj.mimeType = message.mimeType);\n        message.mid !== undefined && (obj.mid = message.mid);\n        message.cid !== undefined && (obj.cid = message.cid);\n        if (message.layers) {\n            obj.layers = message.layers.map((e) => e ? exports.VideoLayer.toJSON(e) : undefined);\n        }\n        else {\n            obj.layers = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d;\n        const message = createBaseSimulcastCodecInfo();\n        message.mimeType = (_a = object.mimeType) !== null && _a !== void 0 ? _a : \"\";\n        message.mid = (_b = object.mid) !== null && _b !== void 0 ? _b : \"\";\n        message.cid = (_c = object.cid) !== null && _c !== void 0 ? _c : \"\";\n        message.layers = ((_d = object.layers) === null || _d === void 0 ? void 0 : _d.map((e) => exports.VideoLayer.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseTrackInfo() {\n    return {\n        sid: \"\",\n        type: 0,\n        name: \"\",\n        muted: false,\n        width: 0,\n        height: 0,\n        simulcast: false,\n        disableDtx: false,\n        source: 0,\n        layers: [],\n        mimeType: \"\",\n        mid: \"\",\n        codecs: [],\n        stereo: false,\n        disableRed: false,\n        encryption: 0,\n        stream: \"\",\n    };\n}\nexports.TrackInfo = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.sid !== \"\") {\n            writer.uint32(10).string(message.sid);\n        }\n        if (message.type !== 0) {\n            writer.uint32(16).int32(message.type);\n        }\n        if (message.name !== \"\") {\n            writer.uint32(26).string(message.name);\n        }\n        if (message.muted === true) {\n            writer.uint32(32).bool(message.muted);\n        }\n        if (message.width !== 0) {\n            writer.uint32(40).uint32(message.width);\n        }\n        if (message.height !== 0) {\n            writer.uint32(48).uint32(message.height);\n        }\n        if (message.simulcast === true) {\n            writer.uint32(56).bool(message.simulcast);\n        }\n        if (message.disableDtx === true) {\n            writer.uint32(64).bool(message.disableDtx);\n        }\n        if (message.source !== 0) {\n            writer.uint32(72).int32(message.source);\n        }\n        for (const v of message.layers) {\n            exports.VideoLayer.encode(v, writer.uint32(82).fork()).ldelim();\n        }\n        if (message.mimeType !== \"\") {\n            writer.uint32(90).string(message.mimeType);\n        }\n        if (message.mid !== \"\") {\n            writer.uint32(98).string(message.mid);\n        }\n        for (const v of message.codecs) {\n            exports.SimulcastCodecInfo.encode(v, writer.uint32(106).fork()).ldelim();\n        }\n        if (message.stereo === true) {\n            writer.uint32(112).bool(message.stereo);\n        }\n        if (message.disableRed === true) {\n            writer.uint32(120).bool(message.disableRed);\n        }\n        if (message.encryption !== 0) {\n            writer.uint32(128).int32(message.encryption);\n        }\n        if (message.stream !== \"\") {\n            writer.uint32(138).string(message.stream);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTrackInfo();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.sid = reader.string();\n                    break;\n                case 2:\n                    message.type = reader.int32();\n                    break;\n                case 3:\n                    message.name = reader.string();\n                    break;\n                case 4:\n                    message.muted = reader.bool();\n                    break;\n                case 5:\n                    message.width = reader.uint32();\n                    break;\n                case 6:\n                    message.height = reader.uint32();\n                    break;\n                case 7:\n                    message.simulcast = reader.bool();\n                    break;\n                case 8:\n                    message.disableDtx = reader.bool();\n                    break;\n                case 9:\n                    message.source = reader.int32();\n                    break;\n                case 10:\n                    message.layers.push(exports.VideoLayer.decode(reader, reader.uint32()));\n                    break;\n                case 11:\n                    message.mimeType = reader.string();\n                    break;\n                case 12:\n                    message.mid = reader.string();\n                    break;\n                case 13:\n                    message.codecs.push(exports.SimulcastCodecInfo.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    message.stereo = reader.bool();\n                    break;\n                case 15:\n                    message.disableRed = reader.bool();\n                    break;\n                case 16:\n                    message.encryption = reader.int32();\n                    break;\n                case 17:\n                    message.stream = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            sid: isSet(object.sid) ? String(object.sid) : \"\",\n            type: isSet(object.type) ? trackTypeFromJSON(object.type) : 0,\n            name: isSet(object.name) ? String(object.name) : \"\",\n            muted: isSet(object.muted) ? Boolean(object.muted) : false,\n            width: isSet(object.width) ? Number(object.width) : 0,\n            height: isSet(object.height) ? Number(object.height) : 0,\n            simulcast: isSet(object.simulcast) ? Boolean(object.simulcast) : false,\n            disableDtx: isSet(object.disableDtx) ? Boolean(object.disableDtx) : false,\n            source: isSet(object.source) ? trackSourceFromJSON(object.source) : 0,\n            layers: Array.isArray(object === null || object === void 0 ? void 0 : object.layers) ? object.layers.map((e) => exports.VideoLayer.fromJSON(e)) : [],\n            mimeType: isSet(object.mimeType) ? String(object.mimeType) : \"\",\n            mid: isSet(object.mid) ? String(object.mid) : \"\",\n            codecs: Array.isArray(object === null || object === void 0 ? void 0 : object.codecs) ? object.codecs.map((e) => exports.SimulcastCodecInfo.fromJSON(e)) : [],\n            stereo: isSet(object.stereo) ? Boolean(object.stereo) : false,\n            disableRed: isSet(object.disableRed) ? Boolean(object.disableRed) : false,\n            encryption: isSet(object.encryption) ? encryption_TypeFromJSON(object.encryption) : 0,\n            stream: isSet(object.stream) ? String(object.stream) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.sid !== undefined && (obj.sid = message.sid);\n        message.type !== undefined && (obj.type = trackTypeToJSON(message.type));\n        message.name !== undefined && (obj.name = message.name);\n        message.muted !== undefined && (obj.muted = message.muted);\n        message.width !== undefined && (obj.width = Math.round(message.width));\n        message.height !== undefined && (obj.height = Math.round(message.height));\n        message.simulcast !== undefined && (obj.simulcast = message.simulcast);\n        message.disableDtx !== undefined && (obj.disableDtx = message.disableDtx);\n        message.source !== undefined && (obj.source = trackSourceToJSON(message.source));\n        if (message.layers) {\n            obj.layers = message.layers.map((e) => e ? exports.VideoLayer.toJSON(e) : undefined);\n        }\n        else {\n            obj.layers = [];\n        }\n        message.mimeType !== undefined && (obj.mimeType = message.mimeType);\n        message.mid !== undefined && (obj.mid = message.mid);\n        if (message.codecs) {\n            obj.codecs = message.codecs.map((e) => e ? exports.SimulcastCodecInfo.toJSON(e) : undefined);\n        }\n        else {\n            obj.codecs = [];\n        }\n        message.stereo !== undefined && (obj.stereo = message.stereo);\n        message.disableRed !== undefined && (obj.disableRed = message.disableRed);\n        message.encryption !== undefined && (obj.encryption = encryption_TypeToJSON(message.encryption));\n        message.stream !== undefined && (obj.stream = message.stream);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;\n        const message = createBaseTrackInfo();\n        message.sid = (_a = object.sid) !== null && _a !== void 0 ? _a : \"\";\n        message.type = (_b = object.type) !== null && _b !== void 0 ? _b : 0;\n        message.name = (_c = object.name) !== null && _c !== void 0 ? _c : \"\";\n        message.muted = (_d = object.muted) !== null && _d !== void 0 ? _d : false;\n        message.width = (_e = object.width) !== null && _e !== void 0 ? _e : 0;\n        message.height = (_f = object.height) !== null && _f !== void 0 ? _f : 0;\n        message.simulcast = (_g = object.simulcast) !== null && _g !== void 0 ? _g : false;\n        message.disableDtx = (_h = object.disableDtx) !== null && _h !== void 0 ? _h : false;\n        message.source = (_j = object.source) !== null && _j !== void 0 ? _j : 0;\n        message.layers = ((_k = object.layers) === null || _k === void 0 ? void 0 : _k.map((e) => exports.VideoLayer.fromPartial(e))) || [];\n        message.mimeType = (_l = object.mimeType) !== null && _l !== void 0 ? _l : \"\";\n        message.mid = (_m = object.mid) !== null && _m !== void 0 ? _m : \"\";\n        message.codecs = ((_o = object.codecs) === null || _o === void 0 ? void 0 : _o.map((e) => exports.SimulcastCodecInfo.fromPartial(e))) || [];\n        message.stereo = (_p = object.stereo) !== null && _p !== void 0 ? _p : false;\n        message.disableRed = (_q = object.disableRed) !== null && _q !== void 0 ? _q : false;\n        message.encryption = (_r = object.encryption) !== null && _r !== void 0 ? _r : 0;\n        message.stream = (_s = object.stream) !== null && _s !== void 0 ? _s : \"\";\n        return message;\n    },\n};\nfunction createBaseVideoLayer() {\n    return { quality: 0, width: 0, height: 0, bitrate: 0, ssrc: 0 };\n}\nexports.VideoLayer = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.quality !== 0) {\n            writer.uint32(8).int32(message.quality);\n        }\n        if (message.width !== 0) {\n            writer.uint32(16).uint32(message.width);\n        }\n        if (message.height !== 0) {\n            writer.uint32(24).uint32(message.height);\n        }\n        if (message.bitrate !== 0) {\n            writer.uint32(32).uint32(message.bitrate);\n        }\n        if (message.ssrc !== 0) {\n            writer.uint32(40).uint32(message.ssrc);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseVideoLayer();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.quality = reader.int32();\n                    break;\n                case 2:\n                    message.width = reader.uint32();\n                    break;\n                case 3:\n                    message.height = reader.uint32();\n                    break;\n                case 4:\n                    message.bitrate = reader.uint32();\n                    break;\n                case 5:\n                    message.ssrc = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            quality: isSet(object.quality) ? videoQualityFromJSON(object.quality) : 0,\n            width: isSet(object.width) ? Number(object.width) : 0,\n            height: isSet(object.height) ? Number(object.height) : 0,\n            bitrate: isSet(object.bitrate) ? Number(object.bitrate) : 0,\n            ssrc: isSet(object.ssrc) ? Number(object.ssrc) : 0,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.quality !== undefined && (obj.quality = videoQualityToJSON(message.quality));\n        message.width !== undefined && (obj.width = Math.round(message.width));\n        message.height !== undefined && (obj.height = Math.round(message.height));\n        message.bitrate !== undefined && (obj.bitrate = Math.round(message.bitrate));\n        message.ssrc !== undefined && (obj.ssrc = Math.round(message.ssrc));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e;\n        const message = createBaseVideoLayer();\n        message.quality = (_a = object.quality) !== null && _a !== void 0 ? _a : 0;\n        message.width = (_b = object.width) !== null && _b !== void 0 ? _b : 0;\n        message.height = (_c = object.height) !== null && _c !== void 0 ? _c : 0;\n        message.bitrate = (_d = object.bitrate) !== null && _d !== void 0 ? _d : 0;\n        message.ssrc = (_e = object.ssrc) !== null && _e !== void 0 ? _e : 0;\n        return message;\n    },\n};\nfunction createBaseDataPacket() {\n    return { kind: 0, user: undefined, speaker: undefined };\n}\nexports.DataPacket = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.kind !== 0) {\n            writer.uint32(8).int32(message.kind);\n        }\n        if (message.user !== undefined) {\n            exports.UserPacket.encode(message.user, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.speaker !== undefined) {\n            exports.ActiveSpeakerUpdate.encode(message.speaker, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDataPacket();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.kind = reader.int32();\n                    break;\n                case 2:\n                    message.user = exports.UserPacket.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.speaker = exports.ActiveSpeakerUpdate.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            kind: isSet(object.kind) ? dataPacket_KindFromJSON(object.kind) : 0,\n            user: isSet(object.user) ? exports.UserPacket.fromJSON(object.user) : undefined,\n            speaker: isSet(object.speaker) ? exports.ActiveSpeakerUpdate.fromJSON(object.speaker) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.kind !== undefined && (obj.kind = dataPacket_KindToJSON(message.kind));\n        message.user !== undefined && (obj.user = message.user ? exports.UserPacket.toJSON(message.user) : undefined);\n        message.speaker !== undefined &&\n            (obj.speaker = message.speaker ? exports.ActiveSpeakerUpdate.toJSON(message.speaker) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseDataPacket();\n        message.kind = (_a = object.kind) !== null && _a !== void 0 ? _a : 0;\n        message.user = (object.user !== undefined && object.user !== null)\n            ? exports.UserPacket.fromPartial(object.user)\n            : undefined;\n        message.speaker = (object.speaker !== undefined && object.speaker !== null)\n            ? exports.ActiveSpeakerUpdate.fromPartial(object.speaker)\n            : undefined;\n        return message;\n    },\n};\nfunction createBaseActiveSpeakerUpdate() {\n    return { speakers: [] };\n}\nexports.ActiveSpeakerUpdate = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        for (const v of message.speakers) {\n            exports.SpeakerInfo.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseActiveSpeakerUpdate();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.speakers.push(exports.SpeakerInfo.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            speakers: Array.isArray(object === null || object === void 0 ? void 0 : object.speakers) ? object.speakers.map((e) => exports.SpeakerInfo.fromJSON(e)) : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.speakers) {\n            obj.speakers = message.speakers.map((e) => e ? exports.SpeakerInfo.toJSON(e) : undefined);\n        }\n        else {\n            obj.speakers = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseActiveSpeakerUpdate();\n        message.speakers = ((_a = object.speakers) === null || _a === void 0 ? void 0 : _a.map((e) => exports.SpeakerInfo.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseSpeakerInfo() {\n    return { sid: \"\", level: 0, active: false };\n}\nexports.SpeakerInfo = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.sid !== \"\") {\n            writer.uint32(10).string(message.sid);\n        }\n        if (message.level !== 0) {\n            writer.uint32(21).float(message.level);\n        }\n        if (message.active === true) {\n            writer.uint32(24).bool(message.active);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSpeakerInfo();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.sid = reader.string();\n                    break;\n                case 2:\n                    message.level = reader.float();\n                    break;\n                case 3:\n                    message.active = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            sid: isSet(object.sid) ? String(object.sid) : \"\",\n            level: isSet(object.level) ? Number(object.level) : 0,\n            active: isSet(object.active) ? Boolean(object.active) : false,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.sid !== undefined && (obj.sid = message.sid);\n        message.level !== undefined && (obj.level = message.level);\n        message.active !== undefined && (obj.active = message.active);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseSpeakerInfo();\n        message.sid = (_a = object.sid) !== null && _a !== void 0 ? _a : \"\";\n        message.level = (_b = object.level) !== null && _b !== void 0 ? _b : 0;\n        message.active = (_c = object.active) !== null && _c !== void 0 ? _c : false;\n        return message;\n    },\n};\nfunction createBaseUserPacket() {\n    return {\n        participantSid: \"\",\n        participantIdentity: \"\",\n        payload: new Uint8Array(),\n        destinationSids: [],\n        destinationIdentities: [],\n        topic: undefined,\n    };\n}\nexports.UserPacket = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.participantSid !== \"\") {\n            writer.uint32(10).string(message.participantSid);\n        }\n        if (message.participantIdentity !== \"\") {\n            writer.uint32(42).string(message.participantIdentity);\n        }\n        if (message.payload.length !== 0) {\n            writer.uint32(18).bytes(message.payload);\n        }\n        for (const v of message.destinationSids) {\n            writer.uint32(26).string(v);\n        }\n        for (const v of message.destinationIdentities) {\n            writer.uint32(50).string(v);\n        }\n        if (message.topic !== undefined) {\n            writer.uint32(34).string(message.topic);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUserPacket();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.participantSid = reader.string();\n                    break;\n                case 5:\n                    message.participantIdentity = reader.string();\n                    break;\n                case 2:\n                    message.payload = reader.bytes();\n                    break;\n                case 3:\n                    message.destinationSids.push(reader.string());\n                    break;\n                case 6:\n                    message.destinationIdentities.push(reader.string());\n                    break;\n                case 4:\n                    message.topic = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            participantSid: isSet(object.participantSid) ? String(object.participantSid) : \"\",\n            participantIdentity: isSet(object.participantIdentity) ? String(object.participantIdentity) : \"\",\n            payload: isSet(object.payload) ? bytesFromBase64(object.payload) : new Uint8Array(),\n            destinationSids: Array.isArray(object === null || object === void 0 ? void 0 : object.destinationSids) ? object.destinationSids.map((e) => String(e)) : [],\n            destinationIdentities: Array.isArray(object === null || object === void 0 ? void 0 : object.destinationIdentities)\n                ? object.destinationIdentities.map((e) => String(e))\n                : [],\n            topic: isSet(object.topic) ? String(object.topic) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.participantSid !== undefined && (obj.participantSid = message.participantSid);\n        message.participantIdentity !== undefined && (obj.participantIdentity = message.participantIdentity);\n        message.payload !== undefined &&\n            (obj.payload = base64FromBytes(message.payload !== undefined ? message.payload : new Uint8Array()));\n        if (message.destinationSids) {\n            obj.destinationSids = message.destinationSids.map((e) => e);\n        }\n        else {\n            obj.destinationSids = [];\n        }\n        if (message.destinationIdentities) {\n            obj.destinationIdentities = message.destinationIdentities.map((e) => e);\n        }\n        else {\n            obj.destinationIdentities = [];\n        }\n        message.topic !== undefined && (obj.topic = message.topic);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f;\n        const message = createBaseUserPacket();\n        message.participantSid = (_a = object.participantSid) !== null && _a !== void 0 ? _a : \"\";\n        message.participantIdentity = (_b = object.participantIdentity) !== null && _b !== void 0 ? _b : \"\";\n        message.payload = (_c = object.payload) !== null && _c !== void 0 ? _c : new Uint8Array();\n        message.destinationSids = ((_d = object.destinationSids) === null || _d === void 0 ? void 0 : _d.map((e) => e)) || [];\n        message.destinationIdentities = ((_e = object.destinationIdentities) === null || _e === void 0 ? void 0 : _e.map((e) => e)) || [];\n        message.topic = (_f = object.topic) !== null && _f !== void 0 ? _f : undefined;\n        return message;\n    },\n};\nfunction createBaseParticipantTracks() {\n    return { participantSid: \"\", trackSids: [] };\n}\nexports.ParticipantTracks = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.participantSid !== \"\") {\n            writer.uint32(10).string(message.participantSid);\n        }\n        for (const v of message.trackSids) {\n            writer.uint32(18).string(v);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseParticipantTracks();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.participantSid = reader.string();\n                    break;\n                case 2:\n                    message.trackSids.push(reader.string());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            participantSid: isSet(object.participantSid) ? String(object.participantSid) : \"\",\n            trackSids: Array.isArray(object === null || object === void 0 ? void 0 : object.trackSids) ? object.trackSids.map((e) => String(e)) : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.participantSid !== undefined && (obj.participantSid = message.participantSid);\n        if (message.trackSids) {\n            obj.trackSids = message.trackSids.map((e) => e);\n        }\n        else {\n            obj.trackSids = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseParticipantTracks();\n        message.participantSid = (_a = object.participantSid) !== null && _a !== void 0 ? _a : \"\";\n        message.trackSids = ((_b = object.trackSids) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];\n        return message;\n    },\n};\nfunction createBaseServerInfo() {\n    return { edition: 0, version: \"\", protocol: 0, region: \"\", nodeId: \"\", debugInfo: \"\" };\n}\nexports.ServerInfo = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.edition !== 0) {\n            writer.uint32(8).int32(message.edition);\n        }\n        if (message.version !== \"\") {\n            writer.uint32(18).string(message.version);\n        }\n        if (message.protocol !== 0) {\n            writer.uint32(24).int32(message.protocol);\n        }\n        if (message.region !== \"\") {\n            writer.uint32(34).string(message.region);\n        }\n        if (message.nodeId !== \"\") {\n            writer.uint32(42).string(message.nodeId);\n        }\n        if (message.debugInfo !== \"\") {\n            writer.uint32(50).string(message.debugInfo);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseServerInfo();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.edition = reader.int32();\n                    break;\n                case 2:\n                    message.version = reader.string();\n                    break;\n                case 3:\n                    message.protocol = reader.int32();\n                    break;\n                case 4:\n                    message.region = reader.string();\n                    break;\n                case 5:\n                    message.nodeId = reader.string();\n                    break;\n                case 6:\n                    message.debugInfo = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            edition: isSet(object.edition) ? serverInfo_EditionFromJSON(object.edition) : 0,\n            version: isSet(object.version) ? String(object.version) : \"\",\n            protocol: isSet(object.protocol) ? Number(object.protocol) : 0,\n            region: isSet(object.region) ? String(object.region) : \"\",\n            nodeId: isSet(object.nodeId) ? String(object.nodeId) : \"\",\n            debugInfo: isSet(object.debugInfo) ? String(object.debugInfo) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.edition !== undefined && (obj.edition = serverInfo_EditionToJSON(message.edition));\n        message.version !== undefined && (obj.version = message.version);\n        message.protocol !== undefined && (obj.protocol = Math.round(message.protocol));\n        message.region !== undefined && (obj.region = message.region);\n        message.nodeId !== undefined && (obj.nodeId = message.nodeId);\n        message.debugInfo !== undefined && (obj.debugInfo = message.debugInfo);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f;\n        const message = createBaseServerInfo();\n        message.edition = (_a = object.edition) !== null && _a !== void 0 ? _a : 0;\n        message.version = (_b = object.version) !== null && _b !== void 0 ? _b : \"\";\n        message.protocol = (_c = object.protocol) !== null && _c !== void 0 ? _c : 0;\n        message.region = (_d = object.region) !== null && _d !== void 0 ? _d : \"\";\n        message.nodeId = (_e = object.nodeId) !== null && _e !== void 0 ? _e : \"\";\n        message.debugInfo = (_f = object.debugInfo) !== null && _f !== void 0 ? _f : \"\";\n        return message;\n    },\n};\nfunction createBaseClientInfo() {\n    return {\n        sdk: 0,\n        version: \"\",\n        protocol: 0,\n        os: \"\",\n        osVersion: \"\",\n        deviceModel: \"\",\n        browser: \"\",\n        browserVersion: \"\",\n        address: \"\",\n        network: \"\",\n    };\n}\nexports.ClientInfo = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.sdk !== 0) {\n            writer.uint32(8).int32(message.sdk);\n        }\n        if (message.version !== \"\") {\n            writer.uint32(18).string(message.version);\n        }\n        if (message.protocol !== 0) {\n            writer.uint32(24).int32(message.protocol);\n        }\n        if (message.os !== \"\") {\n            writer.uint32(34).string(message.os);\n        }\n        if (message.osVersion !== \"\") {\n            writer.uint32(42).string(message.osVersion);\n        }\n        if (message.deviceModel !== \"\") {\n            writer.uint32(50).string(message.deviceModel);\n        }\n        if (message.browser !== \"\") {\n            writer.uint32(58).string(message.browser);\n        }\n        if (message.browserVersion !== \"\") {\n            writer.uint32(66).string(message.browserVersion);\n        }\n        if (message.address !== \"\") {\n            writer.uint32(74).string(message.address);\n        }\n        if (message.network !== \"\") {\n            writer.uint32(82).string(message.network);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseClientInfo();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.sdk = reader.int32();\n                    break;\n                case 2:\n                    message.version = reader.string();\n                    break;\n                case 3:\n                    message.protocol = reader.int32();\n                    break;\n                case 4:\n                    message.os = reader.string();\n                    break;\n                case 5:\n                    message.osVersion = reader.string();\n                    break;\n                case 6:\n                    message.deviceModel = reader.string();\n                    break;\n                case 7:\n                    message.browser = reader.string();\n                    break;\n                case 8:\n                    message.browserVersion = reader.string();\n                    break;\n                case 9:\n                    message.address = reader.string();\n                    break;\n                case 10:\n                    message.network = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            sdk: isSet(object.sdk) ? clientInfo_SDKFromJSON(object.sdk) : 0,\n            version: isSet(object.version) ? String(object.version) : \"\",\n            protocol: isSet(object.protocol) ? Number(object.protocol) : 0,\n            os: isSet(object.os) ? String(object.os) : \"\",\n            osVersion: isSet(object.osVersion) ? String(object.osVersion) : \"\",\n            deviceModel: isSet(object.deviceModel) ? String(object.deviceModel) : \"\",\n            browser: isSet(object.browser) ? String(object.browser) : \"\",\n            browserVersion: isSet(object.browserVersion) ? String(object.browserVersion) : \"\",\n            address: isSet(object.address) ? String(object.address) : \"\",\n            network: isSet(object.network) ? String(object.network) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.sdk !== undefined && (obj.sdk = clientInfo_SDKToJSON(message.sdk));\n        message.version !== undefined && (obj.version = message.version);\n        message.protocol !== undefined && (obj.protocol = Math.round(message.protocol));\n        message.os !== undefined && (obj.os = message.os);\n        message.osVersion !== undefined && (obj.osVersion = message.osVersion);\n        message.deviceModel !== undefined && (obj.deviceModel = message.deviceModel);\n        message.browser !== undefined && (obj.browser = message.browser);\n        message.browserVersion !== undefined && (obj.browserVersion = message.browserVersion);\n        message.address !== undefined && (obj.address = message.address);\n        message.network !== undefined && (obj.network = message.network);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n        const message = createBaseClientInfo();\n        message.sdk = (_a = object.sdk) !== null && _a !== void 0 ? _a : 0;\n        message.version = (_b = object.version) !== null && _b !== void 0 ? _b : \"\";\n        message.protocol = (_c = object.protocol) !== null && _c !== void 0 ? _c : 0;\n        message.os = (_d = object.os) !== null && _d !== void 0 ? _d : \"\";\n        message.osVersion = (_e = object.osVersion) !== null && _e !== void 0 ? _e : \"\";\n        message.deviceModel = (_f = object.deviceModel) !== null && _f !== void 0 ? _f : \"\";\n        message.browser = (_g = object.browser) !== null && _g !== void 0 ? _g : \"\";\n        message.browserVersion = (_h = object.browserVersion) !== null && _h !== void 0 ? _h : \"\";\n        message.address = (_j = object.address) !== null && _j !== void 0 ? _j : \"\";\n        message.network = (_k = object.network) !== null && _k !== void 0 ? _k : \"\";\n        return message;\n    },\n};\nfunction createBaseClientConfiguration() {\n    return { video: undefined, screen: undefined, resumeConnection: 0, disabledCodecs: undefined, forceRelay: 0 };\n}\nexports.ClientConfiguration = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.video !== undefined) {\n            exports.VideoConfiguration.encode(message.video, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.screen !== undefined) {\n            exports.VideoConfiguration.encode(message.screen, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.resumeConnection !== 0) {\n            writer.uint32(24).int32(message.resumeConnection);\n        }\n        if (message.disabledCodecs !== undefined) {\n            exports.DisabledCodecs.encode(message.disabledCodecs, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.forceRelay !== 0) {\n            writer.uint32(40).int32(message.forceRelay);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseClientConfiguration();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.video = exports.VideoConfiguration.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.screen = exports.VideoConfiguration.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.resumeConnection = reader.int32();\n                    break;\n                case 4:\n                    message.disabledCodecs = exports.DisabledCodecs.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.forceRelay = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            video: isSet(object.video) ? exports.VideoConfiguration.fromJSON(object.video) : undefined,\n            screen: isSet(object.screen) ? exports.VideoConfiguration.fromJSON(object.screen) : undefined,\n            resumeConnection: isSet(object.resumeConnection) ? clientConfigSettingFromJSON(object.resumeConnection) : 0,\n            disabledCodecs: isSet(object.disabledCodecs) ? exports.DisabledCodecs.fromJSON(object.disabledCodecs) : undefined,\n            forceRelay: isSet(object.forceRelay) ? clientConfigSettingFromJSON(object.forceRelay) : 0,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.video !== undefined && (obj.video = message.video ? exports.VideoConfiguration.toJSON(message.video) : undefined);\n        message.screen !== undefined &&\n            (obj.screen = message.screen ? exports.VideoConfiguration.toJSON(message.screen) : undefined);\n        message.resumeConnection !== undefined &&\n            (obj.resumeConnection = clientConfigSettingToJSON(message.resumeConnection));\n        message.disabledCodecs !== undefined &&\n            (obj.disabledCodecs = message.disabledCodecs ? exports.DisabledCodecs.toJSON(message.disabledCodecs) : undefined);\n        message.forceRelay !== undefined && (obj.forceRelay = clientConfigSettingToJSON(message.forceRelay));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseClientConfiguration();\n        message.video = (object.video !== undefined && object.video !== null)\n            ? exports.VideoConfiguration.fromPartial(object.video)\n            : undefined;\n        message.screen = (object.screen !== undefined && object.screen !== null)\n            ? exports.VideoConfiguration.fromPartial(object.screen)\n            : undefined;\n        message.resumeConnection = (_a = object.resumeConnection) !== null && _a !== void 0 ? _a : 0;\n        message.disabledCodecs = (object.disabledCodecs !== undefined && object.disabledCodecs !== null)\n            ? exports.DisabledCodecs.fromPartial(object.disabledCodecs)\n            : undefined;\n        message.forceRelay = (_b = object.forceRelay) !== null && _b !== void 0 ? _b : 0;\n        return message;\n    },\n};\nfunction createBaseVideoConfiguration() {\n    return { hardwareEncoder: 0 };\n}\nexports.VideoConfiguration = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.hardwareEncoder !== 0) {\n            writer.uint32(8).int32(message.hardwareEncoder);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseVideoConfiguration();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.hardwareEncoder = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return { hardwareEncoder: isSet(object.hardwareEncoder) ? clientConfigSettingFromJSON(object.hardwareEncoder) : 0 };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.hardwareEncoder !== undefined && (obj.hardwareEncoder = clientConfigSettingToJSON(message.hardwareEncoder));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseVideoConfiguration();\n        message.hardwareEncoder = (_a = object.hardwareEncoder) !== null && _a !== void 0 ? _a : 0;\n        return message;\n    },\n};\nfunction createBaseDisabledCodecs() {\n    return { codecs: [], publish: [] };\n}\nexports.DisabledCodecs = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        for (const v of message.codecs) {\n            exports.Codec.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        for (const v of message.publish) {\n            exports.Codec.encode(v, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDisabledCodecs();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.codecs.push(exports.Codec.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.publish.push(exports.Codec.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            codecs: Array.isArray(object === null || object === void 0 ? void 0 : object.codecs) ? object.codecs.map((e) => exports.Codec.fromJSON(e)) : [],\n            publish: Array.isArray(object === null || object === void 0 ? void 0 : object.publish) ? object.publish.map((e) => exports.Codec.fromJSON(e)) : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.codecs) {\n            obj.codecs = message.codecs.map((e) => e ? exports.Codec.toJSON(e) : undefined);\n        }\n        else {\n            obj.codecs = [];\n        }\n        if (message.publish) {\n            obj.publish = message.publish.map((e) => e ? exports.Codec.toJSON(e) : undefined);\n        }\n        else {\n            obj.publish = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseDisabledCodecs();\n        message.codecs = ((_a = object.codecs) === null || _a === void 0 ? void 0 : _a.map((e) => exports.Codec.fromPartial(e))) || [];\n        message.publish = ((_b = object.publish) === null || _b === void 0 ? void 0 : _b.map((e) => exports.Codec.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseRTPDrift() {\n    return {\n        startTime: undefined,\n        endTime: undefined,\n        duration: 0,\n        startTimestamp: 0,\n        endTimestamp: 0,\n        rtpClockTicks: 0,\n        driftSamples: 0,\n        driftMs: 0,\n        clockRate: 0,\n    };\n}\nexports.RTPDrift = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.startTime !== undefined) {\n            timestamp_1.Timestamp.encode(toTimestamp(message.startTime), writer.uint32(10).fork()).ldelim();\n        }\n        if (message.endTime !== undefined) {\n            timestamp_1.Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).ldelim();\n        }\n        if (message.duration !== 0) {\n            writer.uint32(25).double(message.duration);\n        }\n        if (message.startTimestamp !== 0) {\n            writer.uint32(32).uint64(message.startTimestamp);\n        }\n        if (message.endTimestamp !== 0) {\n            writer.uint32(40).uint64(message.endTimestamp);\n        }\n        if (message.rtpClockTicks !== 0) {\n            writer.uint32(48).uint64(message.rtpClockTicks);\n        }\n        if (message.driftSamples !== 0) {\n            writer.uint32(56).int64(message.driftSamples);\n        }\n        if (message.driftMs !== 0) {\n            writer.uint32(65).double(message.driftMs);\n        }\n        if (message.clockRate !== 0) {\n            writer.uint32(73).double(message.clockRate);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseRTPDrift();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.startTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.endTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n                    break;\n                case 3:\n                    message.duration = reader.double();\n                    break;\n                case 4:\n                    message.startTimestamp = longToNumber(reader.uint64());\n                    break;\n                case 5:\n                    message.endTimestamp = longToNumber(reader.uint64());\n                    break;\n                case 6:\n                    message.rtpClockTicks = longToNumber(reader.uint64());\n                    break;\n                case 7:\n                    message.driftSamples = longToNumber(reader.int64());\n                    break;\n                case 8:\n                    message.driftMs = reader.double();\n                    break;\n                case 9:\n                    message.clockRate = reader.double();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,\n            endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,\n            duration: isSet(object.duration) ? Number(object.duration) : 0,\n            startTimestamp: isSet(object.startTimestamp) ? Number(object.startTimestamp) : 0,\n            endTimestamp: isSet(object.endTimestamp) ? Number(object.endTimestamp) : 0,\n            rtpClockTicks: isSet(object.rtpClockTicks) ? Number(object.rtpClockTicks) : 0,\n            driftSamples: isSet(object.driftSamples) ? Number(object.driftSamples) : 0,\n            driftMs: isSet(object.driftMs) ? Number(object.driftMs) : 0,\n            clockRate: isSet(object.clockRate) ? Number(object.clockRate) : 0,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.startTime !== undefined && (obj.startTime = message.startTime.toISOString());\n        message.endTime !== undefined && (obj.endTime = message.endTime.toISOString());\n        message.duration !== undefined && (obj.duration = message.duration);\n        message.startTimestamp !== undefined && (obj.startTimestamp = Math.round(message.startTimestamp));\n        message.endTimestamp !== undefined && (obj.endTimestamp = Math.round(message.endTimestamp));\n        message.rtpClockTicks !== undefined && (obj.rtpClockTicks = Math.round(message.rtpClockTicks));\n        message.driftSamples !== undefined && (obj.driftSamples = Math.round(message.driftSamples));\n        message.driftMs !== undefined && (obj.driftMs = message.driftMs);\n        message.clockRate !== undefined && (obj.clockRate = message.clockRate);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        const message = createBaseRTPDrift();\n        message.startTime = (_a = object.startTime) !== null && _a !== void 0 ? _a : undefined;\n        message.endTime = (_b = object.endTime) !== null && _b !== void 0 ? _b : undefined;\n        message.duration = (_c = object.duration) !== null && _c !== void 0 ? _c : 0;\n        message.startTimestamp = (_d = object.startTimestamp) !== null && _d !== void 0 ? _d : 0;\n        message.endTimestamp = (_e = object.endTimestamp) !== null && _e !== void 0 ? _e : 0;\n        message.rtpClockTicks = (_f = object.rtpClockTicks) !== null && _f !== void 0 ? _f : 0;\n        message.driftSamples = (_g = object.driftSamples) !== null && _g !== void 0 ? _g : 0;\n        message.driftMs = (_h = object.driftMs) !== null && _h !== void 0 ? _h : 0;\n        message.clockRate = (_j = object.clockRate) !== null && _j !== void 0 ? _j : 0;\n        return message;\n    },\n};\nfunction createBaseRTPStats() {\n    return {\n        startTime: undefined,\n        endTime: undefined,\n        duration: 0,\n        packets: 0,\n        packetRate: 0,\n        bytes: 0,\n        headerBytes: 0,\n        bitrate: 0,\n        packetsLost: 0,\n        packetLossRate: 0,\n        packetLossPercentage: 0,\n        packetsDuplicate: 0,\n        packetDuplicateRate: 0,\n        bytesDuplicate: 0,\n        headerBytesDuplicate: 0,\n        bitrateDuplicate: 0,\n        packetsPadding: 0,\n        packetPaddingRate: 0,\n        bytesPadding: 0,\n        headerBytesPadding: 0,\n        bitratePadding: 0,\n        packetsOutOfOrder: 0,\n        frames: 0,\n        frameRate: 0,\n        jitterCurrent: 0,\n        jitterMax: 0,\n        gapHistogram: {},\n        nacks: 0,\n        nackAcks: 0,\n        nackMisses: 0,\n        nackRepeated: 0,\n        plis: 0,\n        lastPli: undefined,\n        firs: 0,\n        lastFir: undefined,\n        rttCurrent: 0,\n        rttMax: 0,\n        keyFrames: 0,\n        lastKeyFrame: undefined,\n        layerLockPlis: 0,\n        lastLayerLockPli: undefined,\n        packetDrift: undefined,\n        reportDrift: undefined,\n    };\n}\nexports.RTPStats = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.startTime !== undefined) {\n            timestamp_1.Timestamp.encode(toTimestamp(message.startTime), writer.uint32(10).fork()).ldelim();\n        }\n        if (message.endTime !== undefined) {\n            timestamp_1.Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).ldelim();\n        }\n        if (message.duration !== 0) {\n            writer.uint32(25).double(message.duration);\n        }\n        if (message.packets !== 0) {\n            writer.uint32(32).uint32(message.packets);\n        }\n        if (message.packetRate !== 0) {\n            writer.uint32(41).double(message.packetRate);\n        }\n        if (message.bytes !== 0) {\n            writer.uint32(48).uint64(message.bytes);\n        }\n        if (message.headerBytes !== 0) {\n            writer.uint32(312).uint64(message.headerBytes);\n        }\n        if (message.bitrate !== 0) {\n            writer.uint32(57).double(message.bitrate);\n        }\n        if (message.packetsLost !== 0) {\n            writer.uint32(64).uint32(message.packetsLost);\n        }\n        if (message.packetLossRate !== 0) {\n            writer.uint32(73).double(message.packetLossRate);\n        }\n        if (message.packetLossPercentage !== 0) {\n            writer.uint32(85).float(message.packetLossPercentage);\n        }\n        if (message.packetsDuplicate !== 0) {\n            writer.uint32(88).uint32(message.packetsDuplicate);\n        }\n        if (message.packetDuplicateRate !== 0) {\n            writer.uint32(97).double(message.packetDuplicateRate);\n        }\n        if (message.bytesDuplicate !== 0) {\n            writer.uint32(104).uint64(message.bytesDuplicate);\n        }\n        if (message.headerBytesDuplicate !== 0) {\n            writer.uint32(320).uint64(message.headerBytesDuplicate);\n        }\n        if (message.bitrateDuplicate !== 0) {\n            writer.uint32(113).double(message.bitrateDuplicate);\n        }\n        if (message.packetsPadding !== 0) {\n            writer.uint32(120).uint32(message.packetsPadding);\n        }\n        if (message.packetPaddingRate !== 0) {\n            writer.uint32(129).double(message.packetPaddingRate);\n        }\n        if (message.bytesPadding !== 0) {\n            writer.uint32(136).uint64(message.bytesPadding);\n        }\n        if (message.headerBytesPadding !== 0) {\n            writer.uint32(328).uint64(message.headerBytesPadding);\n        }\n        if (message.bitratePadding !== 0) {\n            writer.uint32(145).double(message.bitratePadding);\n        }\n        if (message.packetsOutOfOrder !== 0) {\n            writer.uint32(152).uint32(message.packetsOutOfOrder);\n        }\n        if (message.frames !== 0) {\n            writer.uint32(160).uint32(message.frames);\n        }\n        if (message.frameRate !== 0) {\n            writer.uint32(169).double(message.frameRate);\n        }\n        if (message.jitterCurrent !== 0) {\n            writer.uint32(177).double(message.jitterCurrent);\n        }\n        if (message.jitterMax !== 0) {\n            writer.uint32(185).double(message.jitterMax);\n        }\n        Object.entries(message.gapHistogram).forEach(([key, value]) => {\n            exports.RTPStats_GapHistogramEntry.encode({ key: key, value }, writer.uint32(194).fork()).ldelim();\n        });\n        if (message.nacks !== 0) {\n            writer.uint32(200).uint32(message.nacks);\n        }\n        if (message.nackAcks !== 0) {\n            writer.uint32(296).uint32(message.nackAcks);\n        }\n        if (message.nackMisses !== 0) {\n            writer.uint32(208).uint32(message.nackMisses);\n        }\n        if (message.nackRepeated !== 0) {\n            writer.uint32(304).uint32(message.nackRepeated);\n        }\n        if (message.plis !== 0) {\n            writer.uint32(216).uint32(message.plis);\n        }\n        if (message.lastPli !== undefined) {\n            timestamp_1.Timestamp.encode(toTimestamp(message.lastPli), writer.uint32(226).fork()).ldelim();\n        }\n        if (message.firs !== 0) {\n            writer.uint32(232).uint32(message.firs);\n        }\n        if (message.lastFir !== undefined) {\n            timestamp_1.Timestamp.encode(toTimestamp(message.lastFir), writer.uint32(242).fork()).ldelim();\n        }\n        if (message.rttCurrent !== 0) {\n            writer.uint32(248).uint32(message.rttCurrent);\n        }\n        if (message.rttMax !== 0) {\n            writer.uint32(256).uint32(message.rttMax);\n        }\n        if (message.keyFrames !== 0) {\n            writer.uint32(264).uint32(message.keyFrames);\n        }\n        if (message.lastKeyFrame !== undefined) {\n            timestamp_1.Timestamp.encode(toTimestamp(message.lastKeyFrame), writer.uint32(274).fork()).ldelim();\n        }\n        if (message.layerLockPlis !== 0) {\n            writer.uint32(280).uint32(message.layerLockPlis);\n        }\n        if (message.lastLayerLockPli !== undefined) {\n            timestamp_1.Timestamp.encode(toTimestamp(message.lastLayerLockPli), writer.uint32(290).fork()).ldelim();\n        }\n        if (message.packetDrift !== undefined) {\n            exports.RTPDrift.encode(message.packetDrift, writer.uint32(354).fork()).ldelim();\n        }\n        if (message.reportDrift !== undefined) {\n            exports.RTPDrift.encode(message.reportDrift, writer.uint32(362).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseRTPStats();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.startTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.endTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n                    break;\n                case 3:\n                    message.duration = reader.double();\n                    break;\n                case 4:\n                    message.packets = reader.uint32();\n                    break;\n                case 5:\n                    message.packetRate = reader.double();\n                    break;\n                case 6:\n                    message.bytes = longToNumber(reader.uint64());\n                    break;\n                case 39:\n                    message.headerBytes = longToNumber(reader.uint64());\n                    break;\n                case 7:\n                    message.bitrate = reader.double();\n                    break;\n                case 8:\n                    message.packetsLost = reader.uint32();\n                    break;\n                case 9:\n                    message.packetLossRate = reader.double();\n                    break;\n                case 10:\n                    message.packetLossPercentage = reader.float();\n                    break;\n                case 11:\n                    message.packetsDuplicate = reader.uint32();\n                    break;\n                case 12:\n                    message.packetDuplicateRate = reader.double();\n                    break;\n                case 13:\n                    message.bytesDuplicate = longToNumber(reader.uint64());\n                    break;\n                case 40:\n                    message.headerBytesDuplicate = longToNumber(reader.uint64());\n                    break;\n                case 14:\n                    message.bitrateDuplicate = reader.double();\n                    break;\n                case 15:\n                    message.packetsPadding = reader.uint32();\n                    break;\n                case 16:\n                    message.packetPaddingRate = reader.double();\n                    break;\n                case 17:\n                    message.bytesPadding = longToNumber(reader.uint64());\n                    break;\n                case 41:\n                    message.headerBytesPadding = longToNumber(reader.uint64());\n                    break;\n                case 18:\n                    message.bitratePadding = reader.double();\n                    break;\n                case 19:\n                    message.packetsOutOfOrder = reader.uint32();\n                    break;\n                case 20:\n                    message.frames = reader.uint32();\n                    break;\n                case 21:\n                    message.frameRate = reader.double();\n                    break;\n                case 22:\n                    message.jitterCurrent = reader.double();\n                    break;\n                case 23:\n                    message.jitterMax = reader.double();\n                    break;\n                case 24:\n                    const entry24 = exports.RTPStats_GapHistogramEntry.decode(reader, reader.uint32());\n                    if (entry24.value !== undefined) {\n                        message.gapHistogram[entry24.key] = entry24.value;\n                    }\n                    break;\n                case 25:\n                    message.nacks = reader.uint32();\n                    break;\n                case 37:\n                    message.nackAcks = reader.uint32();\n                    break;\n                case 26:\n                    message.nackMisses = reader.uint32();\n                    break;\n                case 38:\n                    message.nackRepeated = reader.uint32();\n                    break;\n                case 27:\n                    message.plis = reader.uint32();\n                    break;\n                case 28:\n                    message.lastPli = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n                    break;\n                case 29:\n                    message.firs = reader.uint32();\n                    break;\n                case 30:\n                    message.lastFir = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n                    break;\n                case 31:\n                    message.rttCurrent = reader.uint32();\n                    break;\n                case 32:\n                    message.rttMax = reader.uint32();\n                    break;\n                case 33:\n                    message.keyFrames = reader.uint32();\n                    break;\n                case 34:\n                    message.lastKeyFrame = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n                    break;\n                case 35:\n                    message.layerLockPlis = reader.uint32();\n                    break;\n                case 36:\n                    message.lastLayerLockPli = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n                    break;\n                case 44:\n                    message.packetDrift = exports.RTPDrift.decode(reader, reader.uint32());\n                    break;\n                case 45:\n                    message.reportDrift = exports.RTPDrift.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,\n            endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,\n            duration: isSet(object.duration) ? Number(object.duration) : 0,\n            packets: isSet(object.packets) ? Number(object.packets) : 0,\n            packetRate: isSet(object.packetRate) ? Number(object.packetRate) : 0,\n            bytes: isSet(object.bytes) ? Number(object.bytes) : 0,\n            headerBytes: isSet(object.headerBytes) ? Number(object.headerBytes) : 0,\n            bitrate: isSet(object.bitrate) ? Number(object.bitrate) : 0,\n            packetsLost: isSet(object.packetsLost) ? Number(object.packetsLost) : 0,\n            packetLossRate: isSet(object.packetLossRate) ? Number(object.packetLossRate) : 0,\n            packetLossPercentage: isSet(object.packetLossPercentage) ? Number(object.packetLossPercentage) : 0,\n            packetsDuplicate: isSet(object.packetsDuplicate) ? Number(object.packetsDuplicate) : 0,\n            packetDuplicateRate: isSet(object.packetDuplicateRate) ? Number(object.packetDuplicateRate) : 0,\n            bytesDuplicate: isSet(object.bytesDuplicate) ? Number(object.bytesDuplicate) : 0,\n            headerBytesDuplicate: isSet(object.headerBytesDuplicate) ? Number(object.headerBytesDuplicate) : 0,\n            bitrateDuplicate: isSet(object.bitrateDuplicate) ? Number(object.bitrateDuplicate) : 0,\n            packetsPadding: isSet(object.packetsPadding) ? Number(object.packetsPadding) : 0,\n            packetPaddingRate: isSet(object.packetPaddingRate) ? Number(object.packetPaddingRate) : 0,\n            bytesPadding: isSet(object.bytesPadding) ? Number(object.bytesPadding) : 0,\n            headerBytesPadding: isSet(object.headerBytesPadding) ? Number(object.headerBytesPadding) : 0,\n            bitratePadding: isSet(object.bitratePadding) ? Number(object.bitratePadding) : 0,\n            packetsOutOfOrder: isSet(object.packetsOutOfOrder) ? Number(object.packetsOutOfOrder) : 0,\n            frames: isSet(object.frames) ? Number(object.frames) : 0,\n            frameRate: isSet(object.frameRate) ? Number(object.frameRate) : 0,\n            jitterCurrent: isSet(object.jitterCurrent) ? Number(object.jitterCurrent) : 0,\n            jitterMax: isSet(object.jitterMax) ? Number(object.jitterMax) : 0,\n            gapHistogram: isObject(object.gapHistogram)\n                ? Object.entries(object.gapHistogram).reduce((acc, [key, value]) => {\n                    acc[Number(key)] = Number(value);\n                    return acc;\n                }, {})\n                : {},\n            nacks: isSet(object.nacks) ? Number(object.nacks) : 0,\n            nackAcks: isSet(object.nackAcks) ? Number(object.nackAcks) : 0,\n            nackMisses: isSet(object.nackMisses) ? Number(object.nackMisses) : 0,\n            nackRepeated: isSet(object.nackRepeated) ? Number(object.nackRepeated) : 0,\n            plis: isSet(object.plis) ? Number(object.plis) : 0,\n            lastPli: isSet(object.lastPli) ? fromJsonTimestamp(object.lastPli) : undefined,\n            firs: isSet(object.firs) ? Number(object.firs) : 0,\n            lastFir: isSet(object.lastFir) ? fromJsonTimestamp(object.lastFir) : undefined,\n            rttCurrent: isSet(object.rttCurrent) ? Number(object.rttCurrent) : 0,\n            rttMax: isSet(object.rttMax) ? Number(object.rttMax) : 0,\n            keyFrames: isSet(object.keyFrames) ? Number(object.keyFrames) : 0,\n            lastKeyFrame: isSet(object.lastKeyFrame) ? fromJsonTimestamp(object.lastKeyFrame) : undefined,\n            layerLockPlis: isSet(object.layerLockPlis) ? Number(object.layerLockPlis) : 0,\n            lastLayerLockPli: isSet(object.lastLayerLockPli) ? fromJsonTimestamp(object.lastLayerLockPli) : undefined,\n            packetDrift: isSet(object.packetDrift) ? exports.RTPDrift.fromJSON(object.packetDrift) : undefined,\n            reportDrift: isSet(object.reportDrift) ? exports.RTPDrift.fromJSON(object.reportDrift) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.startTime !== undefined && (obj.startTime = message.startTime.toISOString());\n        message.endTime !== undefined && (obj.endTime = message.endTime.toISOString());\n        message.duration !== undefined && (obj.duration = message.duration);\n        message.packets !== undefined && (obj.packets = Math.round(message.packets));\n        message.packetRate !== undefined && (obj.packetRate = message.packetRate);\n        message.bytes !== undefined && (obj.bytes = Math.round(message.bytes));\n        message.headerBytes !== undefined && (obj.headerBytes = Math.round(message.headerBytes));\n        message.bitrate !== undefined && (obj.bitrate = message.bitrate);\n        message.packetsLost !== undefined && (obj.packetsLost = Math.round(message.packetsLost));\n        message.packetLossRate !== undefined && (obj.packetLossRate = message.packetLossRate);\n        message.packetLossPercentage !== undefined && (obj.packetLossPercentage = message.packetLossPercentage);\n        message.packetsDuplicate !== undefined && (obj.packetsDuplicate = Math.round(message.packetsDuplicate));\n        message.packetDuplicateRate !== undefined && (obj.packetDuplicateRate = message.packetDuplicateRate);\n        message.bytesDuplicate !== undefined && (obj.bytesDuplicate = Math.round(message.bytesDuplicate));\n        message.headerBytesDuplicate !== undefined && (obj.headerBytesDuplicate = Math.round(message.headerBytesDuplicate));\n        message.bitrateDuplicate !== undefined && (obj.bitrateDuplicate = message.bitrateDuplicate);\n        message.packetsPadding !== undefined && (obj.packetsPadding = Math.round(message.packetsPadding));\n        message.packetPaddingRate !== undefined && (obj.packetPaddingRate = message.packetPaddingRate);\n        message.bytesPadding !== undefined && (obj.bytesPadding = Math.round(message.bytesPadding));\n        message.headerBytesPadding !== undefined && (obj.headerBytesPadding = Math.round(message.headerBytesPadding));\n        message.bitratePadding !== undefined && (obj.bitratePadding = message.bitratePadding);\n        message.packetsOutOfOrder !== undefined && (obj.packetsOutOfOrder = Math.round(message.packetsOutOfOrder));\n        message.frames !== undefined && (obj.frames = Math.round(message.frames));\n        message.frameRate !== undefined && (obj.frameRate = message.frameRate);\n        message.jitterCurrent !== undefined && (obj.jitterCurrent = message.jitterCurrent);\n        message.jitterMax !== undefined && (obj.jitterMax = message.jitterMax);\n        obj.gapHistogram = {};\n        if (message.gapHistogram) {\n            Object.entries(message.gapHistogram).forEach(([k, v]) => {\n                obj.gapHistogram[k] = Math.round(v);\n            });\n        }\n        message.nacks !== undefined && (obj.nacks = Math.round(message.nacks));\n        message.nackAcks !== undefined && (obj.nackAcks = Math.round(message.nackAcks));\n        message.nackMisses !== undefined && (obj.nackMisses = Math.round(message.nackMisses));\n        message.nackRepeated !== undefined && (obj.nackRepeated = Math.round(message.nackRepeated));\n        message.plis !== undefined && (obj.plis = Math.round(message.plis));\n        message.lastPli !== undefined && (obj.lastPli = message.lastPli.toISOString());\n        message.firs !== undefined && (obj.firs = Math.round(message.firs));\n        message.lastFir !== undefined && (obj.lastFir = message.lastFir.toISOString());\n        message.rttCurrent !== undefined && (obj.rttCurrent = Math.round(message.rttCurrent));\n        message.rttMax !== undefined && (obj.rttMax = Math.round(message.rttMax));\n        message.keyFrames !== undefined && (obj.keyFrames = Math.round(message.keyFrames));\n        message.lastKeyFrame !== undefined && (obj.lastKeyFrame = message.lastKeyFrame.toISOString());\n        message.layerLockPlis !== undefined && (obj.layerLockPlis = Math.round(message.layerLockPlis));\n        message.lastLayerLockPli !== undefined && (obj.lastLayerLockPli = message.lastLayerLockPli.toISOString());\n        message.packetDrift !== undefined &&\n            (obj.packetDrift = message.packetDrift ? exports.RTPDrift.toJSON(message.packetDrift) : undefined);\n        message.reportDrift !== undefined &&\n            (obj.reportDrift = message.reportDrift ? exports.RTPDrift.toJSON(message.reportDrift) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16;\n        const message = createBaseRTPStats();\n        message.startTime = (_a = object.startTime) !== null && _a !== void 0 ? _a : undefined;\n        message.endTime = (_b = object.endTime) !== null && _b !== void 0 ? _b : undefined;\n        message.duration = (_c = object.duration) !== null && _c !== void 0 ? _c : 0;\n        message.packets = (_d = object.packets) !== null && _d !== void 0 ? _d : 0;\n        message.packetRate = (_e = object.packetRate) !== null && _e !== void 0 ? _e : 0;\n        message.bytes = (_f = object.bytes) !== null && _f !== void 0 ? _f : 0;\n        message.headerBytes = (_g = object.headerBytes) !== null && _g !== void 0 ? _g : 0;\n        message.bitrate = (_h = object.bitrate) !== null && _h !== void 0 ? _h : 0;\n        message.packetsLost = (_j = object.packetsLost) !== null && _j !== void 0 ? _j : 0;\n        message.packetLossRate = (_k = object.packetLossRate) !== null && _k !== void 0 ? _k : 0;\n        message.packetLossPercentage = (_l = object.packetLossPercentage) !== null && _l !== void 0 ? _l : 0;\n        message.packetsDuplicate = (_m = object.packetsDuplicate) !== null && _m !== void 0 ? _m : 0;\n        message.packetDuplicateRate = (_o = object.packetDuplicateRate) !== null && _o !== void 0 ? _o : 0;\n        message.bytesDuplicate = (_p = object.bytesDuplicate) !== null && _p !== void 0 ? _p : 0;\n        message.headerBytesDuplicate = (_q = object.headerBytesDuplicate) !== null && _q !== void 0 ? _q : 0;\n        message.bitrateDuplicate = (_r = object.bitrateDuplicate) !== null && _r !== void 0 ? _r : 0;\n        message.packetsPadding = (_s = object.packetsPadding) !== null && _s !== void 0 ? _s : 0;\n        message.packetPaddingRate = (_t = object.packetPaddingRate) !== null && _t !== void 0 ? _t : 0;\n        message.bytesPadding = (_u = object.bytesPadding) !== null && _u !== void 0 ? _u : 0;\n        message.headerBytesPadding = (_v = object.headerBytesPadding) !== null && _v !== void 0 ? _v : 0;\n        message.bitratePadding = (_w = object.bitratePadding) !== null && _w !== void 0 ? _w : 0;\n        message.packetsOutOfOrder = (_x = object.packetsOutOfOrder) !== null && _x !== void 0 ? _x : 0;\n        message.frames = (_y = object.frames) !== null && _y !== void 0 ? _y : 0;\n        message.frameRate = (_z = object.frameRate) !== null && _z !== void 0 ? _z : 0;\n        message.jitterCurrent = (_0 = object.jitterCurrent) !== null && _0 !== void 0 ? _0 : 0;\n        message.jitterMax = (_1 = object.jitterMax) !== null && _1 !== void 0 ? _1 : 0;\n        message.gapHistogram = Object.entries((_2 = object.gapHistogram) !== null && _2 !== void 0 ? _2 : {}).reduce((acc, [key, value]) => {\n            if (value !== undefined) {\n                acc[Number(key)] = Number(value);\n            }\n            return acc;\n        }, {});\n        message.nacks = (_3 = object.nacks) !== null && _3 !== void 0 ? _3 : 0;\n        message.nackAcks = (_4 = object.nackAcks) !== null && _4 !== void 0 ? _4 : 0;\n        message.nackMisses = (_5 = object.nackMisses) !== null && _5 !== void 0 ? _5 : 0;\n        message.nackRepeated = (_6 = object.nackRepeated) !== null && _6 !== void 0 ? _6 : 0;\n        message.plis = (_7 = object.plis) !== null && _7 !== void 0 ? _7 : 0;\n        message.lastPli = (_8 = object.lastPli) !== null && _8 !== void 0 ? _8 : undefined;\n        message.firs = (_9 = object.firs) !== null && _9 !== void 0 ? _9 : 0;\n        message.lastFir = (_10 = object.lastFir) !== null && _10 !== void 0 ? _10 : undefined;\n        message.rttCurrent = (_11 = object.rttCurrent) !== null && _11 !== void 0 ? _11 : 0;\n        message.rttMax = (_12 = object.rttMax) !== null && _12 !== void 0 ? _12 : 0;\n        message.keyFrames = (_13 = object.keyFrames) !== null && _13 !== void 0 ? _13 : 0;\n        message.lastKeyFrame = (_14 = object.lastKeyFrame) !== null && _14 !== void 0 ? _14 : undefined;\n        message.layerLockPlis = (_15 = object.layerLockPlis) !== null && _15 !== void 0 ? _15 : 0;\n        message.lastLayerLockPli = (_16 = object.lastLayerLockPli) !== null && _16 !== void 0 ? _16 : undefined;\n        message.packetDrift = (object.packetDrift !== undefined && object.packetDrift !== null)\n            ? exports.RTPDrift.fromPartial(object.packetDrift)\n            : undefined;\n        message.reportDrift = (object.reportDrift !== undefined && object.reportDrift !== null)\n            ? exports.RTPDrift.fromPartial(object.reportDrift)\n            : undefined;\n        return message;\n    },\n};\nfunction createBaseRTPStats_GapHistogramEntry() {\n    return { key: 0, value: 0 };\n}\nexports.RTPStats_GapHistogramEntry = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.key !== 0) {\n            writer.uint32(8).int32(message.key);\n        }\n        if (message.value !== 0) {\n            writer.uint32(16).uint32(message.value);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseRTPStats_GapHistogramEntry();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.int32();\n                    break;\n                case 2:\n                    message.value = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return { key: isSet(object.key) ? Number(object.key) : 0, value: isSet(object.value) ? Number(object.value) : 0 };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.key !== undefined && (obj.key = Math.round(message.key));\n        message.value !== undefined && (obj.value = Math.round(message.value));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseRTPStats_GapHistogramEntry();\n        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : 0;\n        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : 0;\n        return message;\n    },\n};\nfunction createBaseTimedVersion() {\n    return { unixMicro: 0, ticks: 0 };\n}\nexports.TimedVersion = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.unixMicro !== 0) {\n            writer.uint32(8).int64(message.unixMicro);\n        }\n        if (message.ticks !== 0) {\n            writer.uint32(16).int32(message.ticks);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTimedVersion();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.unixMicro = longToNumber(reader.int64());\n                    break;\n                case 2:\n                    message.ticks = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            unixMicro: isSet(object.unixMicro) ? Number(object.unixMicro) : 0,\n            ticks: isSet(object.ticks) ? Number(object.ticks) : 0,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.unixMicro !== undefined && (obj.unixMicro = Math.round(message.unixMicro));\n        message.ticks !== undefined && (obj.ticks = Math.round(message.ticks));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseTimedVersion();\n        message.unixMicro = (_a = object.unixMicro) !== null && _a !== void 0 ? _a : 0;\n        message.ticks = (_b = object.ticks) !== null && _b !== void 0 ? _b : 0;\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\") {\n        return globalThis;\n    }\n    if (typeof self !== \"undefined\") {\n        return self;\n    }\n    if (typeof window !== \"undefined\") {\n        return window;\n    }\n    if (typeof global !== \"undefined\") {\n        return global;\n    }\n    throw \"Unable to locate global object\";\n})();\nfunction bytesFromBase64(b64) {\n    if (globalThis.Buffer) {\n        return Uint8Array.from(globalThis.Buffer.from(b64, \"base64\"));\n    }\n    else {\n        const bin = globalThis.atob(b64);\n        const arr = new Uint8Array(bin.length);\n        for (let i = 0; i < bin.length; ++i) {\n            arr[i] = bin.charCodeAt(i);\n        }\n        return arr;\n    }\n}\nfunction base64FromBytes(arr) {\n    if (globalThis.Buffer) {\n        return globalThis.Buffer.from(arr).toString(\"base64\");\n    }\n    else {\n        const bin = [];\n        arr.forEach((byte) => {\n            bin.push(String.fromCharCode(byte));\n        });\n        return globalThis.btoa(bin.join(\"\"));\n    }\n}\nfunction toTimestamp(date) {\n    const seconds = date.getTime() / 1000;\n    const nanos = (date.getTime() % 1000) * 1000000;\n    return { seconds, nanos };\n}\nfunction fromTimestamp(t) {\n    let millis = t.seconds * 1000;\n    millis += t.nanos / 1000000;\n    return new Date(millis);\n}\nfunction fromJsonTimestamp(o) {\n    if (o instanceof Date) {\n        return o;\n    }\n    else if (typeof o === \"string\") {\n        return new Date(o);\n    }\n    else {\n        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));\n    }\n}\nfunction longToNumber(long) {\n    if (long.gt(Number.MAX_SAFE_INTEGER)) {\n        throw new globalThis.Error(\"Value is larger than Number.MAX_SAFE_INTEGER\");\n    }\n    return long.toNumber();\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\nfunction isObject(value) {\n    return typeof value === \"object\" && value !== null;\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=livekit_models.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/livekit-server-sdk/dist/proto/livekit_models.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/livekit-server-sdk/dist/proto/livekit_room.js":
/*!********************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/proto/livekit_room.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.UpdateRoomMetadataRequest = exports.SendDataResponse = exports.SendDataRequest = exports.UpdateSubscriptionsResponse = exports.UpdateSubscriptionsRequest = exports.UpdateParticipantRequest = exports.MuteRoomTrackResponse = exports.MuteRoomTrackRequest = exports.RemoveParticipantResponse = exports.RoomParticipantIdentity = exports.ListParticipantsResponse = exports.ListParticipantsRequest = exports.DeleteRoomResponse = exports.DeleteRoomRequest = exports.ListRoomsResponse = exports.ListRoomsRequest = exports.RoomEgress = exports.CreateRoomRequest = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\"));\nconst livekit_egress_1 = __webpack_require__(/*! ./livekit_egress */ \"(ssr)/./node_modules/livekit-server-sdk/dist/proto/livekit_egress.js\");\nconst livekit_models_1 = __webpack_require__(/*! ./livekit_models */ \"(ssr)/./node_modules/livekit-server-sdk/dist/proto/livekit_models.js\");\nexports.protobufPackage = \"livekit\";\nfunction createBaseCreateRoomRequest() {\n    return {\n        name: \"\",\n        emptyTimeout: 0,\n        maxParticipants: 0,\n        nodeId: \"\",\n        metadata: \"\",\n        egress: undefined,\n        minPlayoutDelay: 0,\n        maxPlayoutDelay: 0,\n        syncStreams: false,\n    };\n}\nexports.CreateRoomRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.name !== undefined && message.name !== \"\") {\n            writer.uint32(10).string(message.name);\n        }\n        if (message.emptyTimeout !== undefined && message.emptyTimeout !== 0) {\n            writer.uint32(16).uint32(message.emptyTimeout);\n        }\n        if (message.maxParticipants !== undefined && message.maxParticipants !== 0) {\n            writer.uint32(24).uint32(message.maxParticipants);\n        }\n        if (message.nodeId !== undefined && message.nodeId !== \"\") {\n            writer.uint32(34).string(message.nodeId);\n        }\n        if (message.metadata !== undefined && message.metadata !== \"\") {\n            writer.uint32(42).string(message.metadata);\n        }\n        if (message.egress !== undefined) {\n            exports.RoomEgress.encode(message.egress, writer.uint32(50).fork()).ldelim();\n        }\n        if (message.minPlayoutDelay !== undefined && message.minPlayoutDelay !== 0) {\n            writer.uint32(56).uint32(message.minPlayoutDelay);\n        }\n        if (message.maxPlayoutDelay !== undefined && message.maxPlayoutDelay !== 0) {\n            writer.uint32(64).uint32(message.maxPlayoutDelay);\n        }\n        if (message.syncStreams === true) {\n            writer.uint32(72).bool(message.syncStreams);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseCreateRoomRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.emptyTimeout = reader.uint32();\n                    break;\n                case 3:\n                    message.maxParticipants = reader.uint32();\n                    break;\n                case 4:\n                    message.nodeId = reader.string();\n                    break;\n                case 5:\n                    message.metadata = reader.string();\n                    break;\n                case 6:\n                    message.egress = exports.RoomEgress.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.minPlayoutDelay = reader.uint32();\n                    break;\n                case 8:\n                    message.maxPlayoutDelay = reader.uint32();\n                    break;\n                case 9:\n                    message.syncStreams = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            name: isSet(object.name) ? String(object.name) : \"\",\n            emptyTimeout: isSet(object.emptyTimeout) ? Number(object.emptyTimeout) : 0,\n            maxParticipants: isSet(object.maxParticipants) ? Number(object.maxParticipants) : 0,\n            nodeId: isSet(object.nodeId) ? String(object.nodeId) : \"\",\n            metadata: isSet(object.metadata) ? String(object.metadata) : \"\",\n            egress: isSet(object.egress) ? exports.RoomEgress.fromJSON(object.egress) : undefined,\n            minPlayoutDelay: isSet(object.minPlayoutDelay) ? Number(object.minPlayoutDelay) : 0,\n            maxPlayoutDelay: isSet(object.maxPlayoutDelay) ? Number(object.maxPlayoutDelay) : 0,\n            syncStreams: isSet(object.syncStreams) ? Boolean(object.syncStreams) : false,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.name !== undefined && (obj.name = message.name);\n        message.emptyTimeout !== undefined && (obj.emptyTimeout = Math.round(message.emptyTimeout));\n        message.maxParticipants !== undefined && (obj.maxParticipants = Math.round(message.maxParticipants));\n        message.nodeId !== undefined && (obj.nodeId = message.nodeId);\n        message.metadata !== undefined && (obj.metadata = message.metadata);\n        message.egress !== undefined && (obj.egress = message.egress ? exports.RoomEgress.toJSON(message.egress) : undefined);\n        message.minPlayoutDelay !== undefined && (obj.minPlayoutDelay = Math.round(message.minPlayoutDelay));\n        message.maxPlayoutDelay !== undefined && (obj.maxPlayoutDelay = Math.round(message.maxPlayoutDelay));\n        message.syncStreams !== undefined && (obj.syncStreams = message.syncStreams);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        const message = createBaseCreateRoomRequest();\n        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : \"\";\n        message.emptyTimeout = (_b = object.emptyTimeout) !== null && _b !== void 0 ? _b : 0;\n        message.maxParticipants = (_c = object.maxParticipants) !== null && _c !== void 0 ? _c : 0;\n        message.nodeId = (_d = object.nodeId) !== null && _d !== void 0 ? _d : \"\";\n        message.metadata = (_e = object.metadata) !== null && _e !== void 0 ? _e : \"\";\n        message.egress = (object.egress !== undefined && object.egress !== null)\n            ? exports.RoomEgress.fromPartial(object.egress)\n            : undefined;\n        message.minPlayoutDelay = (_f = object.minPlayoutDelay) !== null && _f !== void 0 ? _f : 0;\n        message.maxPlayoutDelay = (_g = object.maxPlayoutDelay) !== null && _g !== void 0 ? _g : 0;\n        message.syncStreams = (_h = object.syncStreams) !== null && _h !== void 0 ? _h : false;\n        return message;\n    },\n};\nfunction createBaseRoomEgress() {\n    return { room: undefined, participant: undefined, tracks: undefined };\n}\nexports.RoomEgress = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.room !== undefined) {\n            livekit_egress_1.RoomCompositeEgressRequest.encode(message.room, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.participant !== undefined) {\n            livekit_egress_1.AutoParticipantEgress.encode(message.participant, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.tracks !== undefined) {\n            livekit_egress_1.AutoTrackEgress.encode(message.tracks, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseRoomEgress();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.room = livekit_egress_1.RoomCompositeEgressRequest.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.participant = livekit_egress_1.AutoParticipantEgress.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.tracks = livekit_egress_1.AutoTrackEgress.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            room: isSet(object.room) ? livekit_egress_1.RoomCompositeEgressRequest.fromJSON(object.room) : undefined,\n            participant: isSet(object.participant) ? livekit_egress_1.AutoParticipantEgress.fromJSON(object.participant) : undefined,\n            tracks: isSet(object.tracks) ? livekit_egress_1.AutoTrackEgress.fromJSON(object.tracks) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.room !== undefined &&\n            (obj.room = message.room ? livekit_egress_1.RoomCompositeEgressRequest.toJSON(message.room) : undefined);\n        message.participant !== undefined &&\n            (obj.participant = message.participant ? livekit_egress_1.AutoParticipantEgress.toJSON(message.participant) : undefined);\n        message.tracks !== undefined && (obj.tracks = message.tracks ? livekit_egress_1.AutoTrackEgress.toJSON(message.tracks) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseRoomEgress();\n        message.room = (object.room !== undefined && object.room !== null)\n            ? livekit_egress_1.RoomCompositeEgressRequest.fromPartial(object.room)\n            : undefined;\n        message.participant = (object.participant !== undefined && object.participant !== null)\n            ? livekit_egress_1.AutoParticipantEgress.fromPartial(object.participant)\n            : undefined;\n        message.tracks = (object.tracks !== undefined && object.tracks !== null)\n            ? livekit_egress_1.AutoTrackEgress.fromPartial(object.tracks)\n            : undefined;\n        return message;\n    },\n};\nfunction createBaseListRoomsRequest() {\n    return { names: [] };\n}\nexports.ListRoomsRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.names !== undefined && message.names.length !== 0) {\n            for (const v of message.names) {\n                writer.uint32(10).string(v);\n            }\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseListRoomsRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.names.push(reader.string());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return { names: Array.isArray(object === null || object === void 0 ? void 0 : object.names) ? object.names.map((e) => String(e)) : [] };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.names) {\n            obj.names = message.names.map((e) => e);\n        }\n        else {\n            obj.names = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseListRoomsRequest();\n        message.names = ((_a = object.names) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];\n        return message;\n    },\n};\nfunction createBaseListRoomsResponse() {\n    return { rooms: [] };\n}\nexports.ListRoomsResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.rooms !== undefined && message.rooms.length !== 0) {\n            for (const v of message.rooms) {\n                livekit_models_1.Room.encode(v, writer.uint32(10).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseListRoomsResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.rooms.push(livekit_models_1.Room.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return { rooms: Array.isArray(object === null || object === void 0 ? void 0 : object.rooms) ? object.rooms.map((e) => livekit_models_1.Room.fromJSON(e)) : [] };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.rooms) {\n            obj.rooms = message.rooms.map((e) => e ? livekit_models_1.Room.toJSON(e) : undefined);\n        }\n        else {\n            obj.rooms = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseListRoomsResponse();\n        message.rooms = ((_a = object.rooms) === null || _a === void 0 ? void 0 : _a.map((e) => livekit_models_1.Room.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseDeleteRoomRequest() {\n    return { room: \"\" };\n}\nexports.DeleteRoomRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.room !== undefined && message.room !== \"\") {\n            writer.uint32(10).string(message.room);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDeleteRoomRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.room = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return { room: isSet(object.room) ? String(object.room) : \"\" };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.room !== undefined && (obj.room = message.room);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseDeleteRoomRequest();\n        message.room = (_a = object.room) !== null && _a !== void 0 ? _a : \"\";\n        return message;\n    },\n};\nfunction createBaseDeleteRoomResponse() {\n    return {};\n}\nexports.DeleteRoomResponse = {\n    encode(_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDeleteRoomResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        return {};\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = createBaseDeleteRoomResponse();\n        return message;\n    },\n};\nfunction createBaseListParticipantsRequest() {\n    return { room: \"\" };\n}\nexports.ListParticipantsRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.room !== undefined && message.room !== \"\") {\n            writer.uint32(10).string(message.room);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseListParticipantsRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.room = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return { room: isSet(object.room) ? String(object.room) : \"\" };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.room !== undefined && (obj.room = message.room);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseListParticipantsRequest();\n        message.room = (_a = object.room) !== null && _a !== void 0 ? _a : \"\";\n        return message;\n    },\n};\nfunction createBaseListParticipantsResponse() {\n    return { participants: [] };\n}\nexports.ListParticipantsResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.participants !== undefined && message.participants.length !== 0) {\n            for (const v of message.participants) {\n                livekit_models_1.ParticipantInfo.encode(v, writer.uint32(10).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseListParticipantsResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.participants.push(livekit_models_1.ParticipantInfo.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            participants: Array.isArray(object === null || object === void 0 ? void 0 : object.participants)\n                ? object.participants.map((e) => livekit_models_1.ParticipantInfo.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.participants) {\n            obj.participants = message.participants.map((e) => e ? livekit_models_1.ParticipantInfo.toJSON(e) : undefined);\n        }\n        else {\n            obj.participants = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseListParticipantsResponse();\n        message.participants = ((_a = object.participants) === null || _a === void 0 ? void 0 : _a.map((e) => livekit_models_1.ParticipantInfo.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseRoomParticipantIdentity() {\n    return { room: \"\", identity: \"\" };\n}\nexports.RoomParticipantIdentity = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.room !== undefined && message.room !== \"\") {\n            writer.uint32(10).string(message.room);\n        }\n        if (message.identity !== undefined && message.identity !== \"\") {\n            writer.uint32(18).string(message.identity);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseRoomParticipantIdentity();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.room = reader.string();\n                    break;\n                case 2:\n                    message.identity = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            room: isSet(object.room) ? String(object.room) : \"\",\n            identity: isSet(object.identity) ? String(object.identity) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.room !== undefined && (obj.room = message.room);\n        message.identity !== undefined && (obj.identity = message.identity);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseRoomParticipantIdentity();\n        message.room = (_a = object.room) !== null && _a !== void 0 ? _a : \"\";\n        message.identity = (_b = object.identity) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    },\n};\nfunction createBaseRemoveParticipantResponse() {\n    return {};\n}\nexports.RemoveParticipantResponse = {\n    encode(_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseRemoveParticipantResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        return {};\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = createBaseRemoveParticipantResponse();\n        return message;\n    },\n};\nfunction createBaseMuteRoomTrackRequest() {\n    return { room: \"\", identity: \"\", trackSid: \"\", muted: false };\n}\nexports.MuteRoomTrackRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.room !== undefined && message.room !== \"\") {\n            writer.uint32(10).string(message.room);\n        }\n        if (message.identity !== undefined && message.identity !== \"\") {\n            writer.uint32(18).string(message.identity);\n        }\n        if (message.trackSid !== undefined && message.trackSid !== \"\") {\n            writer.uint32(26).string(message.trackSid);\n        }\n        if (message.muted === true) {\n            writer.uint32(32).bool(message.muted);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMuteRoomTrackRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.room = reader.string();\n                    break;\n                case 2:\n                    message.identity = reader.string();\n                    break;\n                case 3:\n                    message.trackSid = reader.string();\n                    break;\n                case 4:\n                    message.muted = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            room: isSet(object.room) ? String(object.room) : \"\",\n            identity: isSet(object.identity) ? String(object.identity) : \"\",\n            trackSid: isSet(object.trackSid) ? String(object.trackSid) : \"\",\n            muted: isSet(object.muted) ? Boolean(object.muted) : false,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.room !== undefined && (obj.room = message.room);\n        message.identity !== undefined && (obj.identity = message.identity);\n        message.trackSid !== undefined && (obj.trackSid = message.trackSid);\n        message.muted !== undefined && (obj.muted = message.muted);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d;\n        const message = createBaseMuteRoomTrackRequest();\n        message.room = (_a = object.room) !== null && _a !== void 0 ? _a : \"\";\n        message.identity = (_b = object.identity) !== null && _b !== void 0 ? _b : \"\";\n        message.trackSid = (_c = object.trackSid) !== null && _c !== void 0 ? _c : \"\";\n        message.muted = (_d = object.muted) !== null && _d !== void 0 ? _d : false;\n        return message;\n    },\n};\nfunction createBaseMuteRoomTrackResponse() {\n    return { track: undefined };\n}\nexports.MuteRoomTrackResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.track !== undefined) {\n            livekit_models_1.TrackInfo.encode(message.track, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMuteRoomTrackResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.track = livekit_models_1.TrackInfo.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return { track: isSet(object.track) ? livekit_models_1.TrackInfo.fromJSON(object.track) : undefined };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.track !== undefined && (obj.track = message.track ? livekit_models_1.TrackInfo.toJSON(message.track) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseMuteRoomTrackResponse();\n        message.track = (object.track !== undefined && object.track !== null)\n            ? livekit_models_1.TrackInfo.fromPartial(object.track)\n            : undefined;\n        return message;\n    },\n};\nfunction createBaseUpdateParticipantRequest() {\n    return { room: \"\", identity: \"\", metadata: \"\", permission: undefined, name: \"\" };\n}\nexports.UpdateParticipantRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.room !== undefined && message.room !== \"\") {\n            writer.uint32(10).string(message.room);\n        }\n        if (message.identity !== undefined && message.identity !== \"\") {\n            writer.uint32(18).string(message.identity);\n        }\n        if (message.metadata !== undefined && message.metadata !== \"\") {\n            writer.uint32(26).string(message.metadata);\n        }\n        if (message.permission !== undefined) {\n            livekit_models_1.ParticipantPermission.encode(message.permission, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.name !== undefined && message.name !== \"\") {\n            writer.uint32(42).string(message.name);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUpdateParticipantRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.room = reader.string();\n                    break;\n                case 2:\n                    message.identity = reader.string();\n                    break;\n                case 3:\n                    message.metadata = reader.string();\n                    break;\n                case 4:\n                    message.permission = livekit_models_1.ParticipantPermission.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.name = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            room: isSet(object.room) ? String(object.room) : \"\",\n            identity: isSet(object.identity) ? String(object.identity) : \"\",\n            metadata: isSet(object.metadata) ? String(object.metadata) : \"\",\n            permission: isSet(object.permission) ? livekit_models_1.ParticipantPermission.fromJSON(object.permission) : undefined,\n            name: isSet(object.name) ? String(object.name) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.room !== undefined && (obj.room = message.room);\n        message.identity !== undefined && (obj.identity = message.identity);\n        message.metadata !== undefined && (obj.metadata = message.metadata);\n        message.permission !== undefined &&\n            (obj.permission = message.permission ? livekit_models_1.ParticipantPermission.toJSON(message.permission) : undefined);\n        message.name !== undefined && (obj.name = message.name);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d;\n        const message = createBaseUpdateParticipantRequest();\n        message.room = (_a = object.room) !== null && _a !== void 0 ? _a : \"\";\n        message.identity = (_b = object.identity) !== null && _b !== void 0 ? _b : \"\";\n        message.metadata = (_c = object.metadata) !== null && _c !== void 0 ? _c : \"\";\n        message.permission = (object.permission !== undefined && object.permission !== null)\n            ? livekit_models_1.ParticipantPermission.fromPartial(object.permission)\n            : undefined;\n        message.name = (_d = object.name) !== null && _d !== void 0 ? _d : \"\";\n        return message;\n    },\n};\nfunction createBaseUpdateSubscriptionsRequest() {\n    return { room: \"\", identity: \"\", trackSids: [], subscribe: false, participantTracks: [] };\n}\nexports.UpdateSubscriptionsRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.room !== undefined && message.room !== \"\") {\n            writer.uint32(10).string(message.room);\n        }\n        if (message.identity !== undefined && message.identity !== \"\") {\n            writer.uint32(18).string(message.identity);\n        }\n        if (message.trackSids !== undefined && message.trackSids.length !== 0) {\n            for (const v of message.trackSids) {\n                writer.uint32(26).string(v);\n            }\n        }\n        if (message.subscribe === true) {\n            writer.uint32(32).bool(message.subscribe);\n        }\n        if (message.participantTracks !== undefined && message.participantTracks.length !== 0) {\n            for (const v of message.participantTracks) {\n                livekit_models_1.ParticipantTracks.encode(v, writer.uint32(42).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUpdateSubscriptionsRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.room = reader.string();\n                    break;\n                case 2:\n                    message.identity = reader.string();\n                    break;\n                case 3:\n                    message.trackSids.push(reader.string());\n                    break;\n                case 4:\n                    message.subscribe = reader.bool();\n                    break;\n                case 5:\n                    message.participantTracks.push(livekit_models_1.ParticipantTracks.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            room: isSet(object.room) ? String(object.room) : \"\",\n            identity: isSet(object.identity) ? String(object.identity) : \"\",\n            trackSids: Array.isArray(object === null || object === void 0 ? void 0 : object.trackSids) ? object.trackSids.map((e) => String(e)) : [],\n            subscribe: isSet(object.subscribe) ? Boolean(object.subscribe) : false,\n            participantTracks: Array.isArray(object === null || object === void 0 ? void 0 : object.participantTracks)\n                ? object.participantTracks.map((e) => livekit_models_1.ParticipantTracks.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.room !== undefined && (obj.room = message.room);\n        message.identity !== undefined && (obj.identity = message.identity);\n        if (message.trackSids) {\n            obj.trackSids = message.trackSids.map((e) => e);\n        }\n        else {\n            obj.trackSids = [];\n        }\n        message.subscribe !== undefined && (obj.subscribe = message.subscribe);\n        if (message.participantTracks) {\n            obj.participantTracks = message.participantTracks.map((e) => e ? livekit_models_1.ParticipantTracks.toJSON(e) : undefined);\n        }\n        else {\n            obj.participantTracks = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e;\n        const message = createBaseUpdateSubscriptionsRequest();\n        message.room = (_a = object.room) !== null && _a !== void 0 ? _a : \"\";\n        message.identity = (_b = object.identity) !== null && _b !== void 0 ? _b : \"\";\n        message.trackSids = ((_c = object.trackSids) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];\n        message.subscribe = (_d = object.subscribe) !== null && _d !== void 0 ? _d : false;\n        message.participantTracks = ((_e = object.participantTracks) === null || _e === void 0 ? void 0 : _e.map((e) => livekit_models_1.ParticipantTracks.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseUpdateSubscriptionsResponse() {\n    return {};\n}\nexports.UpdateSubscriptionsResponse = {\n    encode(_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUpdateSubscriptionsResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        return {};\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = createBaseUpdateSubscriptionsResponse();\n        return message;\n    },\n};\nfunction createBaseSendDataRequest() {\n    return {\n        room: \"\",\n        data: new Uint8Array(),\n        kind: 0,\n        destinationSids: [],\n        destinationIdentities: [],\n        topic: undefined,\n    };\n}\nexports.SendDataRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.room !== undefined && message.room !== \"\") {\n            writer.uint32(10).string(message.room);\n        }\n        if (message.data !== undefined && message.data.length !== 0) {\n            writer.uint32(18).bytes(message.data);\n        }\n        if (message.kind !== undefined && message.kind !== 0) {\n            writer.uint32(24).int32(message.kind);\n        }\n        if (message.destinationSids !== undefined && message.destinationSids.length !== 0) {\n            for (const v of message.destinationSids) {\n                writer.uint32(34).string(v);\n            }\n        }\n        if (message.destinationIdentities !== undefined && message.destinationIdentities.length !== 0) {\n            for (const v of message.destinationIdentities) {\n                writer.uint32(50).string(v);\n            }\n        }\n        if (message.topic !== undefined) {\n            writer.uint32(42).string(message.topic);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSendDataRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.room = reader.string();\n                    break;\n                case 2:\n                    message.data = reader.bytes();\n                    break;\n                case 3:\n                    message.kind = reader.int32();\n                    break;\n                case 4:\n                    message.destinationSids.push(reader.string());\n                    break;\n                case 6:\n                    message.destinationIdentities.push(reader.string());\n                    break;\n                case 5:\n                    message.topic = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            room: isSet(object.room) ? String(object.room) : \"\",\n            data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(),\n            kind: isSet(object.kind) ? livekit_models_1.dataPacket_KindFromJSON(object.kind) : 0,\n            destinationSids: Array.isArray(object === null || object === void 0 ? void 0 : object.destinationSids) ? object.destinationSids.map((e) => String(e)) : [],\n            destinationIdentities: Array.isArray(object === null || object === void 0 ? void 0 : object.destinationIdentities)\n                ? object.destinationIdentities.map((e) => String(e))\n                : [],\n            topic: isSet(object.topic) ? String(object.topic) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.room !== undefined && (obj.room = message.room);\n        message.data !== undefined &&\n            (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));\n        message.kind !== undefined && (obj.kind = livekit_models_1.dataPacket_KindToJSON(message.kind));\n        if (message.destinationSids) {\n            obj.destinationSids = message.destinationSids.map((e) => e);\n        }\n        else {\n            obj.destinationSids = [];\n        }\n        if (message.destinationIdentities) {\n            obj.destinationIdentities = message.destinationIdentities.map((e) => e);\n        }\n        else {\n            obj.destinationIdentities = [];\n        }\n        message.topic !== undefined && (obj.topic = message.topic);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f;\n        const message = createBaseSendDataRequest();\n        message.room = (_a = object.room) !== null && _a !== void 0 ? _a : \"\";\n        message.data = (_b = object.data) !== null && _b !== void 0 ? _b : new Uint8Array();\n        message.kind = (_c = object.kind) !== null && _c !== void 0 ? _c : 0;\n        message.destinationSids = ((_d = object.destinationSids) === null || _d === void 0 ? void 0 : _d.map((e) => e)) || [];\n        message.destinationIdentities = ((_e = object.destinationIdentities) === null || _e === void 0 ? void 0 : _e.map((e) => e)) || [];\n        message.topic = (_f = object.topic) !== null && _f !== void 0 ? _f : undefined;\n        return message;\n    },\n};\nfunction createBaseSendDataResponse() {\n    return {};\n}\nexports.SendDataResponse = {\n    encode(_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSendDataResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        return {};\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = createBaseSendDataResponse();\n        return message;\n    },\n};\nfunction createBaseUpdateRoomMetadataRequest() {\n    return { room: \"\", metadata: \"\" };\n}\nexports.UpdateRoomMetadataRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.room !== undefined && message.room !== \"\") {\n            writer.uint32(10).string(message.room);\n        }\n        if (message.metadata !== undefined && message.metadata !== \"\") {\n            writer.uint32(18).string(message.metadata);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUpdateRoomMetadataRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.room = reader.string();\n                    break;\n                case 2:\n                    message.metadata = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            room: isSet(object.room) ? String(object.room) : \"\",\n            metadata: isSet(object.metadata) ? String(object.metadata) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.room !== undefined && (obj.room = message.room);\n        message.metadata !== undefined && (obj.metadata = message.metadata);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseUpdateRoomMetadataRequest();\n        message.room = (_a = object.room) !== null && _a !== void 0 ? _a : \"\";\n        message.metadata = (_b = object.metadata) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\") {\n        return globalThis;\n    }\n    if (typeof self !== \"undefined\") {\n        return self;\n    }\n    if (typeof window !== \"undefined\") {\n        return window;\n    }\n    if (typeof global !== \"undefined\") {\n        return global;\n    }\n    throw \"Unable to locate global object\";\n})();\nfunction bytesFromBase64(b64) {\n    if (globalThis.Buffer) {\n        return Uint8Array.from(globalThis.Buffer.from(b64, \"base64\"));\n    }\n    else {\n        const bin = globalThis.atob(b64);\n        const arr = new Uint8Array(bin.length);\n        for (let i = 0; i < bin.length; ++i) {\n            arr[i] = bin.charCodeAt(i);\n        }\n        return arr;\n    }\n}\nfunction base64FromBytes(arr) {\n    if (globalThis.Buffer) {\n        return globalThis.Buffer.from(arr).toString(\"base64\");\n    }\n    else {\n        const bin = [];\n        arr.forEach((byte) => {\n            bin.push(String.fromCharCode(byte));\n        });\n        return globalThis.btoa(bin.join(\"\"));\n    }\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=livekit_room.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/livekit-server-sdk/dist/proto/livekit_room.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/livekit-server-sdk/dist/proto/livekit_webhook.js":
/*!***********************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/proto/livekit_webhook.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WebhookEvent = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(__webpack_require__(/*! long */ \"(ssr)/./node_modules/long/umd/index.js\"));\nconst minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\"));\nconst livekit_egress_1 = __webpack_require__(/*! ./livekit_egress */ \"(ssr)/./node_modules/livekit-server-sdk/dist/proto/livekit_egress.js\");\nconst livekit_ingress_1 = __webpack_require__(/*! ./livekit_ingress */ \"(ssr)/./node_modules/livekit-server-sdk/dist/proto/livekit_ingress.js\");\nconst livekit_models_1 = __webpack_require__(/*! ./livekit_models */ \"(ssr)/./node_modules/livekit-server-sdk/dist/proto/livekit_models.js\");\nexports.protobufPackage = \"livekit\";\nfunction createBaseWebhookEvent() {\n    return {\n        event: \"\",\n        room: undefined,\n        participant: undefined,\n        egressInfo: undefined,\n        ingressInfo: undefined,\n        track: undefined,\n        id: \"\",\n        createdAt: 0,\n        numDropped: 0,\n    };\n}\nexports.WebhookEvent = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.event !== undefined && message.event !== \"\") {\n            writer.uint32(10).string(message.event);\n        }\n        if (message.room !== undefined) {\n            livekit_models_1.Room.encode(message.room, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.participant !== undefined) {\n            livekit_models_1.ParticipantInfo.encode(message.participant, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.egressInfo !== undefined) {\n            livekit_egress_1.EgressInfo.encode(message.egressInfo, writer.uint32(74).fork()).ldelim();\n        }\n        if (message.ingressInfo !== undefined) {\n            livekit_ingress_1.IngressInfo.encode(message.ingressInfo, writer.uint32(82).fork()).ldelim();\n        }\n        if (message.track !== undefined) {\n            livekit_models_1.TrackInfo.encode(message.track, writer.uint32(66).fork()).ldelim();\n        }\n        if (message.id !== undefined && message.id !== \"\") {\n            writer.uint32(50).string(message.id);\n        }\n        if (message.createdAt !== undefined && message.createdAt !== 0) {\n            writer.uint32(56).int64(message.createdAt);\n        }\n        if (message.numDropped !== undefined && message.numDropped !== 0) {\n            writer.uint32(88).int32(message.numDropped);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseWebhookEvent();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.event = reader.string();\n                    break;\n                case 2:\n                    message.room = livekit_models_1.Room.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.participant = livekit_models_1.ParticipantInfo.decode(reader, reader.uint32());\n                    break;\n                case 9:\n                    message.egressInfo = livekit_egress_1.EgressInfo.decode(reader, reader.uint32());\n                    break;\n                case 10:\n                    message.ingressInfo = livekit_ingress_1.IngressInfo.decode(reader, reader.uint32());\n                    break;\n                case 8:\n                    message.track = livekit_models_1.TrackInfo.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.id = reader.string();\n                    break;\n                case 7:\n                    message.createdAt = longToNumber(reader.int64());\n                    break;\n                case 11:\n                    message.numDropped = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            event: isSet(object.event) ? String(object.event) : \"\",\n            room: isSet(object.room) ? livekit_models_1.Room.fromJSON(object.room) : undefined,\n            participant: isSet(object.participant) ? livekit_models_1.ParticipantInfo.fromJSON(object.participant) : undefined,\n            egressInfo: isSet(object.egressInfo) ? livekit_egress_1.EgressInfo.fromJSON(object.egressInfo) : undefined,\n            ingressInfo: isSet(object.ingressInfo) ? livekit_ingress_1.IngressInfo.fromJSON(object.ingressInfo) : undefined,\n            track: isSet(object.track) ? livekit_models_1.TrackInfo.fromJSON(object.track) : undefined,\n            id: isSet(object.id) ? String(object.id) : \"\",\n            createdAt: isSet(object.createdAt) ? Number(object.createdAt) : 0,\n            numDropped: isSet(object.numDropped) ? Number(object.numDropped) : 0,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.event !== undefined && (obj.event = message.event);\n        message.room !== undefined && (obj.room = message.room ? livekit_models_1.Room.toJSON(message.room) : undefined);\n        message.participant !== undefined &&\n            (obj.participant = message.participant ? livekit_models_1.ParticipantInfo.toJSON(message.participant) : undefined);\n        message.egressInfo !== undefined &&\n            (obj.egressInfo = message.egressInfo ? livekit_egress_1.EgressInfo.toJSON(message.egressInfo) : undefined);\n        message.ingressInfo !== undefined &&\n            (obj.ingressInfo = message.ingressInfo ? livekit_ingress_1.IngressInfo.toJSON(message.ingressInfo) : undefined);\n        message.track !== undefined && (obj.track = message.track ? livekit_models_1.TrackInfo.toJSON(message.track) : undefined);\n        message.id !== undefined && (obj.id = message.id);\n        message.createdAt !== undefined && (obj.createdAt = Math.round(message.createdAt));\n        message.numDropped !== undefined && (obj.numDropped = Math.round(message.numDropped));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d;\n        const message = createBaseWebhookEvent();\n        message.event = (_a = object.event) !== null && _a !== void 0 ? _a : \"\";\n        message.room = (object.room !== undefined && object.room !== null) ? livekit_models_1.Room.fromPartial(object.room) : undefined;\n        message.participant = (object.participant !== undefined && object.participant !== null)\n            ? livekit_models_1.ParticipantInfo.fromPartial(object.participant)\n            : undefined;\n        message.egressInfo = (object.egressInfo !== undefined && object.egressInfo !== null)\n            ? livekit_egress_1.EgressInfo.fromPartial(object.egressInfo)\n            : undefined;\n        message.ingressInfo = (object.ingressInfo !== undefined && object.ingressInfo !== null)\n            ? livekit_ingress_1.IngressInfo.fromPartial(object.ingressInfo)\n            : undefined;\n        message.track = (object.track !== undefined && object.track !== null)\n            ? livekit_models_1.TrackInfo.fromPartial(object.track)\n            : undefined;\n        message.id = (_b = object.id) !== null && _b !== void 0 ? _b : \"\";\n        message.createdAt = (_c = object.createdAt) !== null && _c !== void 0 ? _c : 0;\n        message.numDropped = (_d = object.numDropped) !== null && _d !== void 0 ? _d : 0;\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\") {\n        return globalThis;\n    }\n    if (typeof self !== \"undefined\") {\n        return self;\n    }\n    if (typeof window !== \"undefined\") {\n        return window;\n    }\n    if (typeof global !== \"undefined\") {\n        return global;\n    }\n    throw \"Unable to locate global object\";\n})();\nfunction longToNumber(long) {\n    if (long.gt(Number.MAX_SAFE_INTEGER)) {\n        throw new globalThis.Error(\"Value is larger than Number.MAX_SAFE_INTEGER\");\n    }\n    return long.toNumber();\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=livekit_webhook.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/livekit-server-sdk/dist/proto/livekit_webhook.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/livekit-server-sdk/dist/AccessToken.js":
/*!*************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/AccessToken.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TokenVerifier = exports.AccessToken = void 0;\nconst jwt = __importStar(__webpack_require__(/*! jsonwebtoken */ \"(action-browser)/./node_modules/jsonwebtoken/index.js\"));\n// 6 hours\nconst defaultTTL = 6 * 60 * 60;\nclass AccessToken {\n    /**\n     * Creates a new AccessToken\n     * @param apiKey API Key, can be set in env LIVEKIT_API_KEY\n     * @param apiSecret Secret, can be set in env LIVEKIT_API_SECRET\n     */\n    constructor(apiKey, apiSecret, options) {\n        if (!apiKey) {\n            apiKey = process.env.LIVEKIT_API_KEY;\n        }\n        if (!apiSecret) {\n            apiSecret = process.env.LIVEKIT_API_SECRET;\n        }\n        if (!apiKey || !apiSecret) {\n            throw Error('api-key and api-secret must be set');\n        }\n        else if (typeof document !== 'undefined') {\n            // check against document rather than window because deno provides window\n            console.error('You should not include your API secret in your web client bundle.\\n\\n' +\n                'Your web client should request a token from your backend server which should then use ' +\n                'the API secret to generate a token. See https://docs.livekit.io/client/connect/');\n        }\n        this.apiKey = apiKey;\n        this.apiSecret = apiSecret;\n        this.grants = {};\n        this.identity = options === null || options === void 0 ? void 0 : options.identity;\n        this.ttl = (options === null || options === void 0 ? void 0 : options.ttl) || defaultTTL;\n        if (options === null || options === void 0 ? void 0 : options.metadata) {\n            this.metadata = options.metadata;\n        }\n        if (options === null || options === void 0 ? void 0 : options.name) {\n            this.name = options.name;\n        }\n    }\n    /**\n     * Adds a video grant to this token.\n     * @param grant\n     */\n    addGrant(grant) {\n        this.grants.video = grant;\n    }\n    /**\n     * Set metadata to be passed to the Participant, used only when joining the room\n     */\n    set metadata(md) {\n        this.grants.metadata = md;\n    }\n    set name(name) {\n        this.grants.name = name;\n    }\n    get sha256() {\n        return this.grants.sha256;\n    }\n    set sha256(sha) {\n        this.grants.sha256 = sha;\n    }\n    /**\n     * @returns JWT encoded token\n     */\n    toJwt() {\n        // TODO: check for video grant validity\n        var _a;\n        const opts = {\n            issuer: this.apiKey,\n            expiresIn: this.ttl,\n            notBefore: 0,\n        };\n        if (this.identity) {\n            opts.subject = this.identity;\n            opts.jwtid = this.identity;\n        }\n        else if ((_a = this.grants.video) === null || _a === void 0 ? void 0 : _a.roomJoin) {\n            throw Error('identity is required for join but not set');\n        }\n        return jwt.sign(this.grants, this.apiSecret, opts);\n    }\n}\nexports.AccessToken = AccessToken;\nclass TokenVerifier {\n    constructor(apiKey, apiSecret) {\n        this.apiKey = apiKey;\n        this.apiSecret = apiSecret;\n    }\n    verify(token) {\n        const decoded = jwt.verify(token, this.apiSecret, { issuer: this.apiKey });\n        if (!decoded) {\n            throw Error('invalid token');\n        }\n        return decoded;\n    }\n}\nexports.TokenVerifier = TokenVerifier;\n//# sourceMappingURL=AccessToken.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9saXZla2l0LXNlcnZlci1zZGsvZGlzdC9BY2Nlc3NUb2tlbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQSxtQ0FBbUMsb0NBQW9DLGdCQUFnQjtBQUN2RixDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLDBDQUEwQyw0QkFBNEI7QUFDdEUsQ0FBQztBQUNEO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHFCQUFxQixHQUFHLG1CQUFtQjtBQUMzQyx5QkFBeUIsbUJBQU8sQ0FBQywyRUFBYztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0REFBNEQscUJBQXFCO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQiIsInNvdXJjZXMiOlsid2VicGFjazovL2xpdmVzdHJlYW0vLi9ub2RlX21vZHVsZXMvbGl2ZWtpdC1zZXJ2ZXItc2RrL2Rpc3QvQWNjZXNzVG9rZW4uanM/ODM5OSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Ub2tlblZlcmlmaWVyID0gZXhwb3J0cy5BY2Nlc3NUb2tlbiA9IHZvaWQgMDtcbmNvbnN0IGp3dCA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwianNvbndlYnRva2VuXCIpKTtcbi8vIDYgaG91cnNcbmNvbnN0IGRlZmF1bHRUVEwgPSA2ICogNjAgKiA2MDtcbmNsYXNzIEFjY2Vzc1Rva2VuIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IEFjY2Vzc1Rva2VuXG4gICAgICogQHBhcmFtIGFwaUtleSBBUEkgS2V5LCBjYW4gYmUgc2V0IGluIGVudiBMSVZFS0lUX0FQSV9LRVlcbiAgICAgKiBAcGFyYW0gYXBpU2VjcmV0IFNlY3JldCwgY2FuIGJlIHNldCBpbiBlbnYgTElWRUtJVF9BUElfU0VDUkVUXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoYXBpS2V5LCBhcGlTZWNyZXQsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCFhcGlLZXkpIHtcbiAgICAgICAgICAgIGFwaUtleSA9IHByb2Nlc3MuZW52LkxJVkVLSVRfQVBJX0tFWTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWFwaVNlY3JldCkge1xuICAgICAgICAgICAgYXBpU2VjcmV0ID0gcHJvY2Vzcy5lbnYuTElWRUtJVF9BUElfU0VDUkVUO1xuICAgICAgICB9XG4gICAgICAgIGlmICghYXBpS2V5IHx8ICFhcGlTZWNyZXQpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdhcGkta2V5IGFuZCBhcGktc2VjcmV0IG11c3QgYmUgc2V0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgLy8gY2hlY2sgYWdhaW5zdCBkb2N1bWVudCByYXRoZXIgdGhhbiB3aW5kb3cgYmVjYXVzZSBkZW5vIHByb3ZpZGVzIHdpbmRvd1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignWW91IHNob3VsZCBub3QgaW5jbHVkZSB5b3VyIEFQSSBzZWNyZXQgaW4geW91ciB3ZWIgY2xpZW50IGJ1bmRsZS5cXG5cXG4nICtcbiAgICAgICAgICAgICAgICAnWW91ciB3ZWIgY2xpZW50IHNob3VsZCByZXF1ZXN0IGEgdG9rZW4gZnJvbSB5b3VyIGJhY2tlbmQgc2VydmVyIHdoaWNoIHNob3VsZCB0aGVuIHVzZSAnICtcbiAgICAgICAgICAgICAgICAndGhlIEFQSSBzZWNyZXQgdG8gZ2VuZXJhdGUgYSB0b2tlbi4gU2VlIGh0dHBzOi8vZG9jcy5saXZla2l0LmlvL2NsaWVudC9jb25uZWN0LycpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYXBpS2V5ID0gYXBpS2V5O1xuICAgICAgICB0aGlzLmFwaVNlY3JldCA9IGFwaVNlY3JldDtcbiAgICAgICAgdGhpcy5ncmFudHMgPSB7fTtcbiAgICAgICAgdGhpcy5pZGVudGl0eSA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5pZGVudGl0eTtcbiAgICAgICAgdGhpcy50dGwgPSAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnR0bCkgfHwgZGVmYXVsdFRUTDtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5tZXRhZGF0YSkge1xuICAgICAgICAgICAgdGhpcy5tZXRhZGF0YSA9IG9wdGlvbnMubWV0YWRhdGE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5uYW1lKSB7XG4gICAgICAgICAgICB0aGlzLm5hbWUgPSBvcHRpb25zLm5hbWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkcyBhIHZpZGVvIGdyYW50IHRvIHRoaXMgdG9rZW4uXG4gICAgICogQHBhcmFtIGdyYW50XG4gICAgICovXG4gICAgYWRkR3JhbnQoZ3JhbnQpIHtcbiAgICAgICAgdGhpcy5ncmFudHMudmlkZW8gPSBncmFudDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IG1ldGFkYXRhIHRvIGJlIHBhc3NlZCB0byB0aGUgUGFydGljaXBhbnQsIHVzZWQgb25seSB3aGVuIGpvaW5pbmcgdGhlIHJvb21cbiAgICAgKi9cbiAgICBzZXQgbWV0YWRhdGEobWQpIHtcbiAgICAgICAgdGhpcy5ncmFudHMubWV0YWRhdGEgPSBtZDtcbiAgICB9XG4gICAgc2V0IG5hbWUobmFtZSkge1xuICAgICAgICB0aGlzLmdyYW50cy5uYW1lID0gbmFtZTtcbiAgICB9XG4gICAgZ2V0IHNoYTI1NigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ3JhbnRzLnNoYTI1NjtcbiAgICB9XG4gICAgc2V0IHNoYTI1NihzaGEpIHtcbiAgICAgICAgdGhpcy5ncmFudHMuc2hhMjU2ID0gc2hhO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyBKV1QgZW5jb2RlZCB0b2tlblxuICAgICAqL1xuICAgIHRvSnd0KCkge1xuICAgICAgICAvLyBUT0RPOiBjaGVjayBmb3IgdmlkZW8gZ3JhbnQgdmFsaWRpdHlcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCBvcHRzID0ge1xuICAgICAgICAgICAgaXNzdWVyOiB0aGlzLmFwaUtleSxcbiAgICAgICAgICAgIGV4cGlyZXNJbjogdGhpcy50dGwsXG4gICAgICAgICAgICBub3RCZWZvcmU6IDAsXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0aGlzLmlkZW50aXR5KSB7XG4gICAgICAgICAgICBvcHRzLnN1YmplY3QgPSB0aGlzLmlkZW50aXR5O1xuICAgICAgICAgICAgb3B0cy5qd3RpZCA9IHRoaXMuaWRlbnRpdHk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoKF9hID0gdGhpcy5ncmFudHMudmlkZW8pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5yb29tSm9pbikge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ2lkZW50aXR5IGlzIHJlcXVpcmVkIGZvciBqb2luIGJ1dCBub3Qgc2V0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGp3dC5zaWduKHRoaXMuZ3JhbnRzLCB0aGlzLmFwaVNlY3JldCwgb3B0cyk7XG4gICAgfVxufVxuZXhwb3J0cy5BY2Nlc3NUb2tlbiA9IEFjY2Vzc1Rva2VuO1xuY2xhc3MgVG9rZW5WZXJpZmllciB7XG4gICAgY29uc3RydWN0b3IoYXBpS2V5LCBhcGlTZWNyZXQpIHtcbiAgICAgICAgdGhpcy5hcGlLZXkgPSBhcGlLZXk7XG4gICAgICAgIHRoaXMuYXBpU2VjcmV0ID0gYXBpU2VjcmV0O1xuICAgIH1cbiAgICB2ZXJpZnkodG9rZW4pIHtcbiAgICAgICAgY29uc3QgZGVjb2RlZCA9IGp3dC52ZXJpZnkodG9rZW4sIHRoaXMuYXBpU2VjcmV0LCB7IGlzc3VlcjogdGhpcy5hcGlLZXkgfSk7XG4gICAgICAgIGlmICghZGVjb2RlZCkge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ2ludmFsaWQgdG9rZW4nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGVjb2RlZDtcbiAgICB9XG59XG5leHBvcnRzLlRva2VuVmVyaWZpZXIgPSBUb2tlblZlcmlmaWVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QWNjZXNzVG9rZW4uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/livekit-server-sdk/dist/AccessToken.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/livekit-server-sdk/dist/EgressClient.js":
/*!**************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/EgressClient.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.EgressClient = void 0;\nconst livekit_egress_1 = __webpack_require__(/*! ./proto/livekit_egress */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/proto/livekit_egress.js\");\nconst ServiceBase_1 = __importDefault(__webpack_require__(/*! ./ServiceBase */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/ServiceBase.js\"));\nconst TwirpRPC_1 = __webpack_require__(/*! ./TwirpRPC */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/TwirpRPC.js\");\nconst svc = 'Egress';\n/**\n * Client to access Egress APIs\n */\nclass EgressClient extends ServiceBase_1.default {\n    /**\n     * @param host hostname including protocol. i.e. 'https://cluster.livekit.io'\n     * @param apiKey API Key, can be set in env var LIVEKIT_API_KEY\n     * @param secret API Secret, can be set in env var LIVEKIT_API_SECRET\n     */\n    constructor(host, apiKey, secret) {\n        super(apiKey, secret);\n        this.rpc = new TwirpRPC_1.TwirpRpc(host, TwirpRPC_1.livekitPackage);\n    }\n    startRoomCompositeEgress(roomName, output, optsOrLayout, options, audioOnly, videoOnly, customBaseUrl) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let layout;\n            if (optsOrLayout !== undefined) {\n                if (typeof optsOrLayout === 'string') {\n                    layout = optsOrLayout;\n                }\n                else {\n                    const opts = optsOrLayout;\n                    layout = opts.layout;\n                    options = opts.encodingOptions;\n                    audioOnly = opts.audioOnly;\n                    videoOnly = opts.videoOnly;\n                    customBaseUrl = opts.customBaseUrl;\n                }\n            }\n            layout !== null && layout !== void 0 ? layout : (layout = '');\n            audioOnly !== null && audioOnly !== void 0 ? audioOnly : (audioOnly = false);\n            videoOnly !== null && videoOnly !== void 0 ? videoOnly : (videoOnly = false);\n            customBaseUrl !== null && customBaseUrl !== void 0 ? customBaseUrl : (customBaseUrl = '');\n            const { file, stream, segments, preset, advanced, fileOutputs, streamOutputs, segmentOutputs } = this.getOutputParams(output, options);\n            const req = livekit_egress_1.RoomCompositeEgressRequest.toJSON({\n                roomName,\n                layout,\n                audioOnly,\n                videoOnly,\n                customBaseUrl,\n                file,\n                stream,\n                segments,\n                preset,\n                advanced,\n                fileOutputs,\n                streamOutputs,\n                segmentOutputs,\n            });\n            const data = yield this.rpc.request(svc, 'StartRoomCompositeEgress', req, this.authHeader({ roomRecord: true }));\n            return livekit_egress_1.EgressInfo.fromJSON(data);\n        });\n    }\n    /**\n     * @param url url\n     * @param output file or stream output\n     * @param opts WebOptions\n     */\n    startWebEgress(url, output, opts) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const audioOnly = (opts === null || opts === void 0 ? void 0 : opts.audioOnly) || false;\n            const videoOnly = (opts === null || opts === void 0 ? void 0 : opts.videoOnly) || false;\n            const awaitStartSignal = (opts === null || opts === void 0 ? void 0 : opts.awaitStartSignal) || false;\n            const { file, stream, segments, preset, advanced, fileOutputs, streamOutputs, segmentOutputs } = this.getOutputParams(output, opts === null || opts === void 0 ? void 0 : opts.encodingOptions);\n            const req = livekit_egress_1.WebEgressRequest.toJSON({\n                url,\n                audioOnly,\n                videoOnly,\n                awaitStartSignal,\n                file,\n                stream,\n                segments,\n                preset,\n                advanced,\n                fileOutputs,\n                streamOutputs,\n                segmentOutputs,\n            });\n            const data = yield this.rpc.request(svc, 'StartWebEgress', req, this.authHeader({ roomRecord: true }));\n            return livekit_egress_1.EgressInfo.fromJSON(data);\n        });\n    }\n    /**\n     * Export a participant's audio and video tracks,\n     *\n     * @param roomName room name\n     * @param output one or more outputs\n     * @param opts ParticipantEgressOptions\n     */\n    startParticipantEgress(roomName, identity, output, opts) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { preset, advanced, fileOutputs, streamOutputs, segmentOutputs } = this.getOutputParams(output, opts === null || opts === void 0 ? void 0 : opts.encodingOptions);\n            const req = livekit_egress_1.ParticipantEgressRequest.toJSON({\n                roomName,\n                identity,\n                preset,\n                advanced,\n                fileOutputs,\n                streamOutputs,\n                segmentOutputs,\n            });\n            const data = yield this.rpc.request(svc, 'StartParticipantEgress', req, this.authHeader({ roomRecord: true }));\n            return livekit_egress_1.EgressInfo.fromJSON(data);\n        });\n    }\n    startTrackCompositeEgress(roomName, output, optsOrAudioTrackId, videoTrackId, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let audioTrackId;\n            if (optsOrAudioTrackId !== undefined) {\n                if (typeof optsOrAudioTrackId === 'string') {\n                    audioTrackId = optsOrAudioTrackId;\n                }\n                else {\n                    const opts = optsOrAudioTrackId;\n                    audioTrackId = opts.audioTrackId;\n                    videoTrackId = opts.videoTrackId;\n                    options = opts.encodingOptions;\n                }\n            }\n            audioTrackId !== null && audioTrackId !== void 0 ? audioTrackId : (audioTrackId = '');\n            videoTrackId !== null && videoTrackId !== void 0 ? videoTrackId : (videoTrackId = '');\n            const { file, stream, segments, preset, advanced, fileOutputs, streamOutputs, segmentOutputs } = this.getOutputParams(output, options);\n            const req = livekit_egress_1.TrackCompositeEgressRequest.toJSON({\n                roomName,\n                audioTrackId,\n                videoTrackId,\n                file,\n                stream,\n                segments,\n                preset,\n                advanced,\n                fileOutputs,\n                streamOutputs,\n                segmentOutputs,\n            });\n            const data = yield this.rpc.request(svc, 'StartTrackCompositeEgress', req, this.authHeader({ roomRecord: true }));\n            return livekit_egress_1.EgressInfo.fromJSON(data);\n        });\n    }\n    isEncodedOutputs(output) {\n        return (output.file !== undefined ||\n            output.stream !== undefined ||\n            output.segments !== undefined);\n    }\n    isEncodedFileOutput(output) {\n        return (output.filepath !== undefined ||\n            output.fileType !== undefined);\n    }\n    isSegmentedFileOutput(output) {\n        return (output.filenamePrefix !== undefined ||\n            output.playlistName !== undefined ||\n            output.filenameSuffix !== undefined);\n    }\n    isStreamOutput(output) {\n        return (output.protocol !== undefined || output.urls !== undefined);\n    }\n    getOutputParams(output, options) {\n        let file;\n        let fileOutputs;\n        let stream;\n        let streamOutputs;\n        let segments;\n        let segmentOutputs;\n        let preset;\n        let advanced;\n        if (this.isEncodedOutputs(output)) {\n            if (output.file !== undefined) {\n                fileOutputs = [output.file];\n            }\n            if (output.stream !== undefined) {\n                streamOutputs = [output.stream];\n            }\n            if (output.segments !== undefined) {\n                segmentOutputs = [output.segments];\n            }\n        }\n        else if (this.isEncodedFileOutput(output)) {\n            file = output;\n            fileOutputs = [file];\n        }\n        else if (this.isSegmentedFileOutput(output)) {\n            segments = output;\n            segmentOutputs = [segments];\n        }\n        else if (this.isStreamOutput(output)) {\n            stream = output;\n            streamOutputs = [stream];\n        }\n        if (options) {\n            if (typeof options === 'number') {\n                preset = options;\n            }\n            else {\n                advanced = options;\n            }\n        }\n        return { file, stream, segments, preset, advanced, fileOutputs, streamOutputs, segmentOutputs };\n    }\n    /**\n     * @param roomName room name\n     * @param output file or websocket output\n     * @param trackId track Id\n     */\n    startTrackEgress(roomName, output, trackId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let file;\n            let websocketUrl;\n            if (typeof output === 'string') {\n                websocketUrl = output;\n            }\n            else {\n                file = output;\n            }\n            const req = livekit_egress_1.TrackEgressRequest.toJSON({\n                roomName,\n                trackId,\n                file,\n                websocketUrl,\n            });\n            const data = yield this.rpc.request(svc, 'StartTrackEgress', req, this.authHeader({ roomRecord: true }));\n            return livekit_egress_1.EgressInfo.fromJSON(data);\n        });\n    }\n    /**\n     * @param egressId\n     * @param layout\n     */\n    updateLayout(egressId, layout) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = yield this.rpc.request(svc, 'UpdateLayout', livekit_egress_1.UpdateLayoutRequest.toJSON({ egressId, layout }), this.authHeader({ roomRecord: true }));\n            return livekit_egress_1.EgressInfo.fromJSON(data);\n        });\n    }\n    /**\n     * @param egressId\n     * @param addOutputUrls\n     * @param removeOutputUrls\n     */\n    updateStream(egressId, addOutputUrls, removeOutputUrls) {\n        return __awaiter(this, void 0, void 0, function* () {\n            addOutputUrls !== null && addOutputUrls !== void 0 ? addOutputUrls : (addOutputUrls = []);\n            removeOutputUrls !== null && removeOutputUrls !== void 0 ? removeOutputUrls : (removeOutputUrls = []);\n            const data = yield this.rpc.request(svc, 'UpdateStream', livekit_egress_1.UpdateStreamRequest.toJSON({ egressId, addOutputUrls, removeOutputUrls }), this.authHeader({ roomRecord: true }));\n            return livekit_egress_1.EgressInfo.fromJSON(data);\n        });\n    }\n    /**\n     * @param roomName list egress for one room only\n     */\n    listEgress(options) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            let req = {};\n            if (typeof options === 'string') {\n                req.roomName = options;\n            }\n            else if (options !== undefined) {\n                req = options;\n            }\n            const data = yield this.rpc.request(svc, 'ListEgress', livekit_egress_1.ListEgressRequest.toJSON(req), this.authHeader({ roomRecord: true }));\n            return (_a = livekit_egress_1.ListEgressResponse.fromJSON(data).items) !== null && _a !== void 0 ? _a : [];\n        });\n    }\n    /**\n     * @param egressId\n     */\n    stopEgress(egressId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = yield this.rpc.request(svc, 'StopEgress', livekit_egress_1.StopEgressRequest.toJSON({ egressId }), this.authHeader({ roomRecord: true }));\n            return livekit_egress_1.EgressInfo.fromJSON(data);\n        });\n    }\n}\nexports.EgressClient = EgressClient;\n//# sourceMappingURL=EgressClient.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/livekit-server-sdk/dist/EgressClient.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/livekit-server-sdk/dist/IngressClient.js":
/*!***************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/IngressClient.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.IngressClient = void 0;\nconst livekit_ingress_1 = __webpack_require__(/*! ./proto/livekit_ingress */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/proto/livekit_ingress.js\");\nconst ServiceBase_1 = __importDefault(__webpack_require__(/*! ./ServiceBase */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/ServiceBase.js\"));\nconst TwirpRPC_1 = __webpack_require__(/*! ./TwirpRPC */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/TwirpRPC.js\");\nconst svc = 'Ingress';\n/**\n * Client to access Ingress APIs\n */\nclass IngressClient extends ServiceBase_1.default {\n    /**\n     * @param host hostname including protocol. i.e. 'https://cluster.livekit.io'\n     * @param apiKey API Key, can be set in env var LIVEKIT_API_KEY\n     * @param secret API Secret, can be set in env var LIVEKIT_API_SECRET\n     */\n    constructor(host, apiKey, secret) {\n        super(apiKey, secret);\n        this.rpc = new TwirpRPC_1.TwirpRpc(host, TwirpRPC_1.livekitPackage);\n    }\n    /**\n     * @param inputType protocol for the ingress\n     * @param opts CreateIngressOptions\n     */\n    createIngress(inputType, opts) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let name = '';\n            let roomName = '';\n            let participantName = '';\n            let participantIdentity = '';\n            let bypassTranscoding = false;\n            let url = '';\n            let audio;\n            let video;\n            if (opts !== undefined) {\n                name = opts.name || '';\n                roomName = opts.roomName || '';\n                participantName = opts.participantName || '';\n                participantIdentity = opts.participantIdentity || '';\n                bypassTranscoding = opts.bypassTranscoding || false;\n                url = opts.url || '';\n                audio = opts.audio;\n                video = opts.video;\n            }\n            const req = livekit_ingress_1.CreateIngressRequest.toJSON({\n                inputType,\n                name,\n                roomName,\n                participantIdentity,\n                participantName,\n                bypassTranscoding,\n                url,\n                audio,\n                video,\n            });\n            const data = yield this.rpc.request(svc, 'CreateIngress', req, this.authHeader({ ingressAdmin: true }));\n            return livekit_ingress_1.IngressInfo.fromJSON(data);\n        });\n    }\n    /**\n     * @param ingressId ID of the ingress to update\n     * @param opts UpdateIngressOptions\n     */\n    updateIngress(ingressId, opts) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const name = opts.name || '';\n            const roomName = opts.roomName || '';\n            const participantName = opts.participantName || '';\n            const participantIdentity = opts.participantIdentity || '';\n            const { audio, video, bypassTranscoding } = opts;\n            const req = livekit_ingress_1.UpdateIngressRequest.toJSON({\n                ingressId,\n                name,\n                roomName,\n                participantIdentity,\n                participantName,\n                bypassTranscoding,\n                audio,\n                video,\n            });\n            const data = yield this.rpc.request(svc, 'UpdateIngress', req, this.authHeader({ ingressAdmin: true }));\n            return livekit_ingress_1.IngressInfo.fromJSON(data);\n        });\n    }\n    listIngress(arg) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            let req = {};\n            if (typeof arg === 'string') {\n                req.roomName = arg;\n            }\n            else if (arg) {\n                req = arg;\n            }\n            const data = yield this.rpc.request(svc, 'ListIngress', livekit_ingress_1.ListIngressRequest.toJSON(req), this.authHeader({ ingressAdmin: true }));\n            return (_a = livekit_ingress_1.ListIngressResponse.fromJSON(data).items) !== null && _a !== void 0 ? _a : [];\n        });\n    }\n    /**\n     * @param ingressId ingress to delete\n     */\n    deleteIngress(ingressId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = yield this.rpc.request(svc, 'DeleteIngress', livekit_ingress_1.DeleteIngressRequest.toJSON({ ingressId }), this.authHeader({ ingressAdmin: true }));\n            return livekit_ingress_1.IngressInfo.fromJSON(data);\n        });\n    }\n}\nexports.IngressClient = IngressClient;\n//# sourceMappingURL=IngressClient.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/livekit-server-sdk/dist/IngressClient.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/livekit-server-sdk/dist/RoomServiceClient.js":
/*!*******************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/RoomServiceClient.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RoomServiceClient = void 0;\nconst livekit_models_1 = __webpack_require__(/*! ./proto/livekit_models */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/proto/livekit_models.js\");\nconst livekit_room_1 = __webpack_require__(/*! ./proto/livekit_room */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/proto/livekit_room.js\");\nconst ServiceBase_1 = __importDefault(__webpack_require__(/*! ./ServiceBase */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/ServiceBase.js\"));\nconst TwirpRPC_1 = __webpack_require__(/*! ./TwirpRPC */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/TwirpRPC.js\");\nconst svc = 'RoomService';\n/**\n * Client to access Room APIs\n */\nclass RoomServiceClient extends ServiceBase_1.default {\n    /**\n     *\n     * @param host hostname including protocol. i.e. 'https://cluster.livekit.io'\n     * @param apiKey API Key, can be set in env var LIVEKIT_API_KEY\n     * @param secret API Secret, can be set in env var LIVEKIT_API_SECRET\n     */\n    constructor(host, apiKey, secret) {\n        super(apiKey, secret);\n        this.rpc = new TwirpRPC_1.TwirpRpc(host, TwirpRPC_1.livekitPackage);\n    }\n    /**\n     * Creates a new room. Explicit room creation is not required, since rooms will\n     * be automatically created when the first participant joins. This method can be\n     * used to customize room settings.\n     * @param options\n     */\n    createRoom(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = yield this.rpc.request(svc, 'CreateRoom', livekit_room_1.CreateRoomRequest.toJSON(livekit_room_1.CreateRoomRequest.fromPartial(options)), this.authHeader({ roomCreate: true }));\n            return livekit_models_1.Room.fromJSON(data);\n        });\n    }\n    /**\n     * List active rooms\n     * @param names when undefined or empty, list all rooms.\n     *              otherwise returns rooms with matching names\n     * @returns\n     */\n    listRooms(names) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = yield this.rpc.request(svc, 'ListRooms', livekit_room_1.ListRoomsRequest.toJSON({ names: names !== null && names !== void 0 ? names : [] }), this.authHeader({ roomList: true }));\n            const res = livekit_room_1.ListRoomsResponse.fromJSON(data);\n            return (_a = res.rooms) !== null && _a !== void 0 ? _a : [];\n        });\n    }\n    deleteRoom(room) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.rpc.request(svc, 'DeleteRoom', livekit_room_1.DeleteRoomRequest.toJSON({ room }), this.authHeader({ roomCreate: true }));\n        });\n    }\n    /**\n     * Update metadata of a room\n     * @param room name of the room\n     * @param metadata the new metadata for the room\n     */\n    updateRoomMetadata(room, metadata) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = yield this.rpc.request(svc, 'UpdateRoomMetadata', livekit_room_1.UpdateRoomMetadataRequest.toJSON({ room, metadata }), this.authHeader({ roomAdmin: true, room }));\n            return livekit_models_1.Room.fromJSON(data);\n        });\n    }\n    /**\n     * List participants in a room\n     * @param room name of the room\n     */\n    listParticipants(room) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = yield this.rpc.request(svc, 'ListParticipants', livekit_room_1.ListParticipantsRequest.toJSON({ room }), this.authHeader({ roomAdmin: true, room }));\n            const res = livekit_room_1.ListParticipantsResponse.fromJSON(data);\n            return (_a = res.participants) !== null && _a !== void 0 ? _a : [];\n        });\n    }\n    /**\n     * Get information on a specific participant, including the tracks that participant\n     * has published\n     * @param room name of the room\n     * @param identity identity of the participant to return\n     */\n    getParticipant(room, identity) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = yield this.rpc.request(svc, 'GetParticipant', livekit_room_1.RoomParticipantIdentity.toJSON({ room, identity }), this.authHeader({ roomAdmin: true, room }));\n            return livekit_models_1.ParticipantInfo.fromJSON(data);\n        });\n    }\n    /**\n     * Removes a participant in the room. This will disconnect the participant\n     * and will emit a Disconnected event for that participant.\n     * Even after being removed, the participant can still re-join the room.\n     * @param room\n     * @param identity\n     */\n    removeParticipant(room, identity) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.rpc.request(svc, 'RemoveParticipant', livekit_room_1.RoomParticipantIdentity.toJSON({ room, identity }), this.authHeader({ roomAdmin: true, room }));\n        });\n    }\n    /**\n     * Mutes a track that the participant has published.\n     * @param room\n     * @param identity\n     * @param trackSid sid of the track to be muted\n     * @param muted true to mute, false to unmute\n     */\n    mutePublishedTrack(room, identity, trackSid, muted) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const req = livekit_room_1.MuteRoomTrackRequest.toJSON({\n                room,\n                identity,\n                trackSid,\n                muted,\n            });\n            const data = yield this.rpc.request(svc, 'MutePublishedTrack', req, this.authHeader({ roomAdmin: true, room }));\n            const res = livekit_room_1.MuteRoomTrackResponse.fromJSON(data);\n            return res.track;\n        });\n    }\n    /**\n     * Updates a participant's metadata or permissions\n     * @param room\n     * @param identity\n     * @param metadata optional, metadata to update\n     * @param permission optional, new permissions to assign to participant\n     * @param name optional, new name for participant\n     */\n    updateParticipant(room, identity, metadata, permission, name) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const req = {\n                room,\n                identity,\n                metadata: metadata || '',\n                name: name || '',\n            };\n            if (permission) {\n                req.permission = livekit_models_1.ParticipantPermission.fromPartial(permission);\n            }\n            const data = yield this.rpc.request(svc, 'UpdateParticipant', livekit_room_1.UpdateParticipantRequest.toJSON(req), this.authHeader({ roomAdmin: true, room }));\n            return livekit_models_1.ParticipantInfo.fromJSON(data);\n        });\n    }\n    /**\n     * Updates a participant's subscription to tracks\n     * @param room\n     * @param identity\n     * @param trackSids\n     * @param subscribe true to subscribe, false to unsubscribe\n     */\n    updateSubscriptions(room, identity, trackSids, subscribe) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const req = livekit_room_1.UpdateSubscriptionsRequest.toJSON({\n                room,\n                identity,\n                trackSids,\n                subscribe,\n                participantTracks: [],\n            });\n            yield this.rpc.request(svc, 'UpdateSubscriptions', req, this.authHeader({ roomAdmin: true, room }));\n        });\n    }\n    sendData(room, data, kind, options = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const destinationSids = Array.isArray(options) ? options : options.destinationSids;\n            const topic = Array.isArray(options) ? undefined : options.topic;\n            const req = {\n                room,\n                data,\n                kind,\n                destinationSids: destinationSids !== null && destinationSids !== void 0 ? destinationSids : [],\n                topic,\n            };\n            if (!Array.isArray(options) && options.destinationIdentities) {\n                req.destinationIdentities = options.destinationIdentities;\n            }\n            yield this.rpc.request(svc, 'SendData', livekit_room_1.SendDataRequest.toJSON(req), this.authHeader({ roomAdmin: true, room }));\n        });\n    }\n}\nexports.RoomServiceClient = RoomServiceClient;\n//# sourceMappingURL=RoomServiceClient.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/livekit-server-sdk/dist/RoomServiceClient.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/livekit-server-sdk/dist/ServiceBase.js":
/*!*************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/ServiceBase.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst AccessToken_1 = __webpack_require__(/*! ./AccessToken */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/AccessToken.js\");\n/**\n * Utilities to handle authentication\n */\nclass ServiceBase {\n    /**\n     * @param apiKey API Key.\n     * @param secret API Secret.\n     * @param ttl token TTL\n     */\n    constructor(apiKey, secret, ttl) {\n        this.apiKey = apiKey;\n        this.secret = secret;\n        this.ttl = ttl || '10m';\n    }\n    authHeader(grant) {\n        const at = new AccessToken_1.AccessToken(this.apiKey, this.secret, { ttl: this.ttl });\n        at.addGrant(grant);\n        return {\n            Authorization: `Bearer ${at.toJwt()}`,\n        };\n    }\n}\nexports[\"default\"] = ServiceBase;\n//# sourceMappingURL=ServiceBase.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9saXZla2l0LXNlcnZlci1zZGsvZGlzdC9TZXJ2aWNlQmFzZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0IsbUJBQU8sQ0FBQyw2RkFBZTtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2RUFBNkUsZUFBZTtBQUM1RjtBQUNBO0FBQ0EscUNBQXFDLFdBQVc7QUFDaEQ7QUFDQTtBQUNBO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL2xpdmVzdHJlYW0vLi9ub2RlX21vZHVsZXMvbGl2ZWtpdC1zZXJ2ZXItc2RrL2Rpc3QvU2VydmljZUJhc2UuanM/ZDY2ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IEFjY2Vzc1Rva2VuXzEgPSByZXF1aXJlKFwiLi9BY2Nlc3NUb2tlblwiKTtcbi8qKlxuICogVXRpbGl0aWVzIHRvIGhhbmRsZSBhdXRoZW50aWNhdGlvblxuICovXG5jbGFzcyBTZXJ2aWNlQmFzZSB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIGFwaUtleSBBUEkgS2V5LlxuICAgICAqIEBwYXJhbSBzZWNyZXQgQVBJIFNlY3JldC5cbiAgICAgKiBAcGFyYW0gdHRsIHRva2VuIFRUTFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGFwaUtleSwgc2VjcmV0LCB0dGwpIHtcbiAgICAgICAgdGhpcy5hcGlLZXkgPSBhcGlLZXk7XG4gICAgICAgIHRoaXMuc2VjcmV0ID0gc2VjcmV0O1xuICAgICAgICB0aGlzLnR0bCA9IHR0bCB8fCAnMTBtJztcbiAgICB9XG4gICAgYXV0aEhlYWRlcihncmFudCkge1xuICAgICAgICBjb25zdCBhdCA9IG5ldyBBY2Nlc3NUb2tlbl8xLkFjY2Vzc1Rva2VuKHRoaXMuYXBpS2V5LCB0aGlzLnNlY3JldCwgeyB0dGw6IHRoaXMudHRsIH0pO1xuICAgICAgICBhdC5hZGRHcmFudChncmFudCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7YXQudG9Kd3QoKX1gLFxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFNlcnZpY2VCYXNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U2VydmljZUJhc2UuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/livekit-server-sdk/dist/ServiceBase.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/livekit-server-sdk/dist/TwirpRPC.js":
/*!**********************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/TwirpRPC.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TwirpRpc = exports.livekitPackage = void 0;\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(action-browser)/./node_modules/axios/dist/node/axios.cjs\"));\nconst camelcase_keys_1 = __importDefault(__webpack_require__(/*! camelcase-keys */ \"(action-browser)/./node_modules/camelcase-keys/index.js\"));\n// twirp RPC adapter for client implementation\nconst defaultPrefix = '/twirp';\nexports.livekitPackage = 'livekit';\n/**\n * JSON based Twirp V7 RPC\n */\nclass TwirpRpc {\n    constructor(host, pkg, prefix) {\n        if (host.startsWith('ws')) {\n            host = host.replace('ws', 'http');\n        }\n        this.host = host;\n        this.pkg = pkg;\n        this.prefix = prefix || defaultPrefix;\n        this.instance = axios_1.default.create({\n            baseURL: host,\n        });\n    }\n    request(service, method, data, headers) {\n        return new Promise((resolve, reject) => {\n            const path = `${this.prefix}/${this.pkg}.${service}/${method}`;\n            this.instance\n                .post(path, data, { headers })\n                .then((res) => {\n                resolve(camelcase_keys_1.default(res.data, { deep: true }));\n            })\n                .catch(reject);\n        });\n    }\n}\nexports.TwirpRpc = TwirpRpc;\n//# sourceMappingURL=TwirpRPC.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9saXZla2l0LXNlcnZlci1zZGsvZGlzdC9Ud2lycFJQQy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGdCQUFnQixHQUFHLHNCQUFzQjtBQUN6QyxnQ0FBZ0MsbUJBQU8sQ0FBQyx3RUFBTztBQUMvQyx5Q0FBeUMsbUJBQU8sQ0FBQywrRUFBZ0I7QUFDakU7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsWUFBWSxHQUFHLFNBQVMsR0FBRyxRQUFRLEdBQUcsT0FBTztBQUN6RTtBQUNBLG9DQUFvQyxTQUFTO0FBQzdDO0FBQ0EsNkRBQTZELFlBQVk7QUFDekUsYUFBYTtBQUNiO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saXZlc3RyZWFtLy4vbm9kZV9tb2R1bGVzL2xpdmVraXQtc2VydmVyLXNkay9kaXN0L1R3aXJwUlBDLmpzP2ZkNjgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlR3aXJwUnBjID0gZXhwb3J0cy5saXZla2l0UGFja2FnZSA9IHZvaWQgMDtcbmNvbnN0IGF4aW9zXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImF4aW9zXCIpKTtcbmNvbnN0IGNhbWVsY2FzZV9rZXlzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImNhbWVsY2FzZS1rZXlzXCIpKTtcbi8vIHR3aXJwIFJQQyBhZGFwdGVyIGZvciBjbGllbnQgaW1wbGVtZW50YXRpb25cbmNvbnN0IGRlZmF1bHRQcmVmaXggPSAnL3R3aXJwJztcbmV4cG9ydHMubGl2ZWtpdFBhY2thZ2UgPSAnbGl2ZWtpdCc7XG4vKipcbiAqIEpTT04gYmFzZWQgVHdpcnAgVjcgUlBDXG4gKi9cbmNsYXNzIFR3aXJwUnBjIHtcbiAgICBjb25zdHJ1Y3Rvcihob3N0LCBwa2csIHByZWZpeCkge1xuICAgICAgICBpZiAoaG9zdC5zdGFydHNXaXRoKCd3cycpKSB7XG4gICAgICAgICAgICBob3N0ID0gaG9zdC5yZXBsYWNlKCd3cycsICdodHRwJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ob3N0ID0gaG9zdDtcbiAgICAgICAgdGhpcy5wa2cgPSBwa2c7XG4gICAgICAgIHRoaXMucHJlZml4ID0gcHJlZml4IHx8IGRlZmF1bHRQcmVmaXg7XG4gICAgICAgIHRoaXMuaW5zdGFuY2UgPSBheGlvc18xLmRlZmF1bHQuY3JlYXRlKHtcbiAgICAgICAgICAgIGJhc2VVUkw6IGhvc3QsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXF1ZXN0KHNlcnZpY2UsIG1ldGhvZCwgZGF0YSwgaGVhZGVycykge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcGF0aCA9IGAke3RoaXMucHJlZml4fS8ke3RoaXMucGtnfS4ke3NlcnZpY2V9LyR7bWV0aG9kfWA7XG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlXG4gICAgICAgICAgICAgICAgLnBvc3QocGF0aCwgZGF0YSwgeyBoZWFkZXJzIH0pXG4gICAgICAgICAgICAgICAgLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoY2FtZWxjYXNlX2tleXNfMS5kZWZhdWx0KHJlcy5kYXRhLCB7IGRlZXA6IHRydWUgfSkpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuY2F0Y2gocmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5Ud2lycFJwYyA9IFR3aXJwUnBjO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VHdpcnBSUEMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/livekit-server-sdk/dist/TwirpRPC.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/livekit-server-sdk/dist/WebhookReceiver.js":
/*!*****************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/WebhookReceiver.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WebhookReceiver = exports.authorizeHeader = void 0;\nconst crypto_1 = __importDefault(__webpack_require__(/*! crypto */ \"crypto\"));\nconst AccessToken_1 = __webpack_require__(/*! ./AccessToken */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/AccessToken.js\");\nconst livekit_webhook_1 = __webpack_require__(/*! ./proto/livekit_webhook */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/proto/livekit_webhook.js\");\nexports.authorizeHeader = 'Authorize';\nclass WebhookReceiver {\n    constructor(apiKey, apiSecret) {\n        this.verifier = new AccessToken_1.TokenVerifier(apiKey, apiSecret);\n    }\n    /**\n     *\n     * @param body string of the posted body\n     * @param authHeader `Authorization` header from the request\n     * @param skipAuth true to skip auth validation\n     * @returns\n     */\n    receive(body, authHeader, skipAuth = false) {\n        // verify token\n        if (!skipAuth) {\n            if (!authHeader) {\n                throw new Error('authorization header is empty');\n            }\n            const claims = this.verifier.verify(authHeader);\n            // confirm sha\n            const hash = crypto_1.default.createHash('sha256');\n            hash.update(body);\n            if (claims.sha256 !== hash.digest('base64')) {\n                throw new Error('sha256 checksum of body does not match');\n            }\n        }\n        return livekit_webhook_1.WebhookEvent.fromJSON(JSON.parse(body));\n    }\n}\nexports.WebhookReceiver = WebhookReceiver;\n//# sourceMappingURL=WebhookReceiver.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9saXZla2l0LXNlcnZlci1zZGsvZGlzdC9XZWJob29rUmVjZWl2ZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx1QkFBdUIsR0FBRyx1QkFBdUI7QUFDakQsaUNBQWlDLG1CQUFPLENBQUMsc0JBQVE7QUFDakQsc0JBQXNCLG1CQUFPLENBQUMsNkZBQWU7QUFDN0MsMEJBQTBCLG1CQUFPLENBQUMsaUhBQXlCO0FBQzNELHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QiIsInNvdXJjZXMiOlsid2VicGFjazovL2xpdmVzdHJlYW0vLi9ub2RlX21vZHVsZXMvbGl2ZWtpdC1zZXJ2ZXItc2RrL2Rpc3QvV2ViaG9va1JlY2VpdmVyLmpzP2IxMDYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLldlYmhvb2tSZWNlaXZlciA9IGV4cG9ydHMuYXV0aG9yaXplSGVhZGVyID0gdm9pZCAwO1xuY29uc3QgY3J5cHRvXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImNyeXB0b1wiKSk7XG5jb25zdCBBY2Nlc3NUb2tlbl8xID0gcmVxdWlyZShcIi4vQWNjZXNzVG9rZW5cIik7XG5jb25zdCBsaXZla2l0X3dlYmhvb2tfMSA9IHJlcXVpcmUoXCIuL3Byb3RvL2xpdmVraXRfd2ViaG9va1wiKTtcbmV4cG9ydHMuYXV0aG9yaXplSGVhZGVyID0gJ0F1dGhvcml6ZSc7XG5jbGFzcyBXZWJob29rUmVjZWl2ZXIge1xuICAgIGNvbnN0cnVjdG9yKGFwaUtleSwgYXBpU2VjcmV0KSB7XG4gICAgICAgIHRoaXMudmVyaWZpZXIgPSBuZXcgQWNjZXNzVG9rZW5fMS5Ub2tlblZlcmlmaWVyKGFwaUtleSwgYXBpU2VjcmV0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYm9keSBzdHJpbmcgb2YgdGhlIHBvc3RlZCBib2R5XG4gICAgICogQHBhcmFtIGF1dGhIZWFkZXIgYEF1dGhvcml6YXRpb25gIGhlYWRlciBmcm9tIHRoZSByZXF1ZXN0XG4gICAgICogQHBhcmFtIHNraXBBdXRoIHRydWUgdG8gc2tpcCBhdXRoIHZhbGlkYXRpb25cbiAgICAgKiBAcmV0dXJuc1xuICAgICAqL1xuICAgIHJlY2VpdmUoYm9keSwgYXV0aEhlYWRlciwgc2tpcEF1dGggPSBmYWxzZSkge1xuICAgICAgICAvLyB2ZXJpZnkgdG9rZW5cbiAgICAgICAgaWYgKCFza2lwQXV0aCkge1xuICAgICAgICAgICAgaWYgKCFhdXRoSGVhZGVyKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdhdXRob3JpemF0aW9uIGhlYWRlciBpcyBlbXB0eScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgY2xhaW1zID0gdGhpcy52ZXJpZmllci52ZXJpZnkoYXV0aEhlYWRlcik7XG4gICAgICAgICAgICAvLyBjb25maXJtIHNoYVxuICAgICAgICAgICAgY29uc3QgaGFzaCA9IGNyeXB0b18xLmRlZmF1bHQuY3JlYXRlSGFzaCgnc2hhMjU2Jyk7XG4gICAgICAgICAgICBoYXNoLnVwZGF0ZShib2R5KTtcbiAgICAgICAgICAgIGlmIChjbGFpbXMuc2hhMjU2ICE9PSBoYXNoLmRpZ2VzdCgnYmFzZTY0JykpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3NoYTI1NiBjaGVja3N1bSBvZiBib2R5IGRvZXMgbm90IG1hdGNoJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxpdmVraXRfd2ViaG9va18xLldlYmhvb2tFdmVudC5mcm9tSlNPTihKU09OLnBhcnNlKGJvZHkpKTtcbiAgICB9XG59XG5leHBvcnRzLldlYmhvb2tSZWNlaXZlciA9IFdlYmhvb2tSZWNlaXZlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVdlYmhvb2tSZWNlaXZlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/livekit-server-sdk/dist/WebhookReceiver.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/livekit-server-sdk/dist/grants.js":
/*!********************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/grants.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TrackSource = void 0;\nvar TrackSource;\n(function (TrackSource) {\n    TrackSource[\"CAMERA\"] = \"camera\";\n    TrackSource[\"MICROPHONE\"] = \"microphone\";\n    TrackSource[\"SCREEN_SHARE\"] = \"screen_share\";\n    TrackSource[\"SCREEN_SHARE_AUDIO\"] = \"screen_share_audio\";\n})(TrackSource = exports.TrackSource || (exports.TrackSource = {}));\n//# sourceMappingURL=grants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9saXZla2l0LXNlcnZlci1zZGsvZGlzdC9ncmFudHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsd0NBQXdDLG1CQUFtQixLQUFLO0FBQ2pFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGl2ZXN0cmVhbS8uL25vZGVfbW9kdWxlcy9saXZla2l0LXNlcnZlci1zZGsvZGlzdC9ncmFudHMuanM/ZDkxMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVHJhY2tTb3VyY2UgPSB2b2lkIDA7XG52YXIgVHJhY2tTb3VyY2U7XG4oZnVuY3Rpb24gKFRyYWNrU291cmNlKSB7XG4gICAgVHJhY2tTb3VyY2VbXCJDQU1FUkFcIl0gPSBcImNhbWVyYVwiO1xuICAgIFRyYWNrU291cmNlW1wiTUlDUk9QSE9ORVwiXSA9IFwibWljcm9waG9uZVwiO1xuICAgIFRyYWNrU291cmNlW1wiU0NSRUVOX1NIQVJFXCJdID0gXCJzY3JlZW5fc2hhcmVcIjtcbiAgICBUcmFja1NvdXJjZVtcIlNDUkVFTl9TSEFSRV9BVURJT1wiXSA9IFwic2NyZWVuX3NoYXJlX2F1ZGlvXCI7XG59KShUcmFja1NvdXJjZSA9IGV4cG9ydHMuVHJhY2tTb3VyY2UgfHwgKGV4cG9ydHMuVHJhY2tTb3VyY2UgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z3JhbnRzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/livekit-server-sdk/dist/grants.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/livekit-server-sdk/dist/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/index.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TrackType = exports.TrackInfo = exports.Room = exports.ParticipantPermission = exports.ParticipantInfo_State = exports.ParticipantInfo = exports.DataPacket_Kind = exports.IngressVideoOptions = exports.IngressVideoEncodingPreset = exports.IngressVideoEncodingOptions = exports.IngressState = exports.IngressInput = exports.IngressInfo = exports.IngressAudioOptions = exports.IngressAudioEncodingPreset = exports.IngressAudioEncodingOptions = exports.StreamProtocol = exports.StreamOutput = exports.SegmentedFileProtocol = exports.SegmentedFileOutput = exports.EncodingOptionsPreset = exports.EncodingOptions = exports.EncodedFileType = exports.EncodedFileOutput = exports.EgressInfo = exports.DirectFileOutput = void 0;\n__exportStar(__webpack_require__(/*! ./AccessToken */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/AccessToken.js\"), exports);\n__exportStar(__webpack_require__(/*! ./EgressClient */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/EgressClient.js\"), exports);\n__exportStar(__webpack_require__(/*! ./IngressClient */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/IngressClient.js\"), exports);\n__exportStar(__webpack_require__(/*! ./RoomServiceClient */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/RoomServiceClient.js\"), exports);\n__exportStar(__webpack_require__(/*! ./WebhookReceiver */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/WebhookReceiver.js\"), exports);\n__exportStar(__webpack_require__(/*! ./grants */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/grants.js\"), exports);\nvar livekit_egress_1 = __webpack_require__(/*! ./proto/livekit_egress */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/proto/livekit_egress.js\");\nObject.defineProperty(exports, \"DirectFileOutput\", ({ enumerable: true, get: function () { return livekit_egress_1.DirectFileOutput; } }));\nObject.defineProperty(exports, \"EgressInfo\", ({ enumerable: true, get: function () { return livekit_egress_1.EgressInfo; } }));\nObject.defineProperty(exports, \"EncodedFileOutput\", ({ enumerable: true, get: function () { return livekit_egress_1.EncodedFileOutput; } }));\nObject.defineProperty(exports, \"EncodedFileType\", ({ enumerable: true, get: function () { return livekit_egress_1.EncodedFileType; } }));\nObject.defineProperty(exports, \"EncodingOptions\", ({ enumerable: true, get: function () { return livekit_egress_1.EncodingOptions; } }));\nObject.defineProperty(exports, \"EncodingOptionsPreset\", ({ enumerable: true, get: function () { return livekit_egress_1.EncodingOptionsPreset; } }));\nObject.defineProperty(exports, \"SegmentedFileOutput\", ({ enumerable: true, get: function () { return livekit_egress_1.SegmentedFileOutput; } }));\nObject.defineProperty(exports, \"SegmentedFileProtocol\", ({ enumerable: true, get: function () { return livekit_egress_1.SegmentedFileProtocol; } }));\nObject.defineProperty(exports, \"StreamOutput\", ({ enumerable: true, get: function () { return livekit_egress_1.StreamOutput; } }));\nObject.defineProperty(exports, \"StreamProtocol\", ({ enumerable: true, get: function () { return livekit_egress_1.StreamProtocol; } }));\nvar livekit_ingress_1 = __webpack_require__(/*! ./proto/livekit_ingress */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/proto/livekit_ingress.js\");\nObject.defineProperty(exports, \"IngressAudioEncodingOptions\", ({ enumerable: true, get: function () { return livekit_ingress_1.IngressAudioEncodingOptions; } }));\nObject.defineProperty(exports, \"IngressAudioEncodingPreset\", ({ enumerable: true, get: function () { return livekit_ingress_1.IngressAudioEncodingPreset; } }));\nObject.defineProperty(exports, \"IngressAudioOptions\", ({ enumerable: true, get: function () { return livekit_ingress_1.IngressAudioOptions; } }));\nObject.defineProperty(exports, \"IngressInfo\", ({ enumerable: true, get: function () { return livekit_ingress_1.IngressInfo; } }));\nObject.defineProperty(exports, \"IngressInput\", ({ enumerable: true, get: function () { return livekit_ingress_1.IngressInput; } }));\nObject.defineProperty(exports, \"IngressState\", ({ enumerable: true, get: function () { return livekit_ingress_1.IngressState; } }));\nObject.defineProperty(exports, \"IngressVideoEncodingOptions\", ({ enumerable: true, get: function () { return livekit_ingress_1.IngressVideoEncodingOptions; } }));\nObject.defineProperty(exports, \"IngressVideoEncodingPreset\", ({ enumerable: true, get: function () { return livekit_ingress_1.IngressVideoEncodingPreset; } }));\nObject.defineProperty(exports, \"IngressVideoOptions\", ({ enumerable: true, get: function () { return livekit_ingress_1.IngressVideoOptions; } }));\nvar livekit_models_1 = __webpack_require__(/*! ./proto/livekit_models */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/proto/livekit_models.js\");\nObject.defineProperty(exports, \"DataPacket_Kind\", ({ enumerable: true, get: function () { return livekit_models_1.DataPacket_Kind; } }));\nObject.defineProperty(exports, \"ParticipantInfo\", ({ enumerable: true, get: function () { return livekit_models_1.ParticipantInfo; } }));\nObject.defineProperty(exports, \"ParticipantInfo_State\", ({ enumerable: true, get: function () { return livekit_models_1.ParticipantInfo_State; } }));\nObject.defineProperty(exports, \"ParticipantPermission\", ({ enumerable: true, get: function () { return livekit_models_1.ParticipantPermission; } }));\nObject.defineProperty(exports, \"Room\", ({ enumerable: true, get: function () { return livekit_models_1.Room; } }));\nObject.defineProperty(exports, \"TrackInfo\", ({ enumerable: true, get: function () { return livekit_models_1.TrackInfo; } }));\nObject.defineProperty(exports, \"TrackType\", ({ enumerable: true, get: function () { return livekit_models_1.TrackType; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9saXZla2l0LXNlcnZlci1zZGsvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQSxtQ0FBbUMsb0NBQW9DLGdCQUFnQjtBQUN2RixDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUJBQWlCLEdBQUcsaUJBQWlCLEdBQUcsWUFBWSxHQUFHLDZCQUE2QixHQUFHLDZCQUE2QixHQUFHLHVCQUF1QixHQUFHLHVCQUF1QixHQUFHLDJCQUEyQixHQUFHLGtDQUFrQyxHQUFHLG1DQUFtQyxHQUFHLG9CQUFvQixHQUFHLG9CQUFvQixHQUFHLG1CQUFtQixHQUFHLDJCQUEyQixHQUFHLGtDQUFrQyxHQUFHLG1DQUFtQyxHQUFHLHNCQUFzQixHQUFHLG9CQUFvQixHQUFHLDZCQUE2QixHQUFHLDJCQUEyQixHQUFHLDZCQUE2QixHQUFHLHVCQUF1QixHQUFHLHVCQUF1QixHQUFHLHlCQUF5QixHQUFHLGtCQUFrQixHQUFHLHdCQUF3QjtBQUM1c0IsYUFBYSxtQkFBTyxDQUFDLDZGQUFlO0FBQ3BDLGFBQWEsbUJBQU8sQ0FBQywrRkFBZ0I7QUFDckMsYUFBYSxtQkFBTyxDQUFDLGlHQUFpQjtBQUN0QyxhQUFhLG1CQUFPLENBQUMseUdBQXFCO0FBQzFDLGFBQWEsbUJBQU8sQ0FBQyxxR0FBbUI7QUFDeEMsYUFBYSxtQkFBTyxDQUFDLG1GQUFVO0FBQy9CLHVCQUF1QixtQkFBTyxDQUFDLCtHQUF3QjtBQUN2RCxvREFBbUQsRUFBRSxxQ0FBcUMsNkNBQTZDLEVBQUM7QUFDeEksOENBQTZDLEVBQUUscUNBQXFDLHVDQUF1QyxFQUFDO0FBQzVILHFEQUFvRCxFQUFFLHFDQUFxQyw4Q0FBOEMsRUFBQztBQUMxSSxtREFBa0QsRUFBRSxxQ0FBcUMsNENBQTRDLEVBQUM7QUFDdEksbURBQWtELEVBQUUscUNBQXFDLDRDQUE0QyxFQUFDO0FBQ3RJLHlEQUF3RCxFQUFFLHFDQUFxQyxrREFBa0QsRUFBQztBQUNsSix1REFBc0QsRUFBRSxxQ0FBcUMsZ0RBQWdELEVBQUM7QUFDOUkseURBQXdELEVBQUUscUNBQXFDLGtEQUFrRCxFQUFDO0FBQ2xKLGdEQUErQyxFQUFFLHFDQUFxQyx5Q0FBeUMsRUFBQztBQUNoSSxrREFBaUQsRUFBRSxxQ0FBcUMsMkNBQTJDLEVBQUM7QUFDcEksd0JBQXdCLG1CQUFPLENBQUMsaUhBQXlCO0FBQ3pELCtEQUE4RCxFQUFFLHFDQUFxQyx5REFBeUQsRUFBQztBQUMvSiw4REFBNkQsRUFBRSxxQ0FBcUMsd0RBQXdELEVBQUM7QUFDN0osdURBQXNELEVBQUUscUNBQXFDLGlEQUFpRCxFQUFDO0FBQy9JLCtDQUE4QyxFQUFFLHFDQUFxQyx5Q0FBeUMsRUFBQztBQUMvSCxnREFBK0MsRUFBRSxxQ0FBcUMsMENBQTBDLEVBQUM7QUFDakksZ0RBQStDLEVBQUUscUNBQXFDLDBDQUEwQyxFQUFDO0FBQ2pJLCtEQUE4RCxFQUFFLHFDQUFxQyx5REFBeUQsRUFBQztBQUMvSiw4REFBNkQsRUFBRSxxQ0FBcUMsd0RBQXdELEVBQUM7QUFDN0osdURBQXNELEVBQUUscUNBQXFDLGlEQUFpRCxFQUFDO0FBQy9JLHVCQUF1QixtQkFBTyxDQUFDLCtHQUF3QjtBQUN2RCxtREFBa0QsRUFBRSxxQ0FBcUMsNENBQTRDLEVBQUM7QUFDdEksbURBQWtELEVBQUUscUNBQXFDLDRDQUE0QyxFQUFDO0FBQ3RJLHlEQUF3RCxFQUFFLHFDQUFxQyxrREFBa0QsRUFBQztBQUNsSix5REFBd0QsRUFBRSxxQ0FBcUMsa0RBQWtELEVBQUM7QUFDbEosd0NBQXVDLEVBQUUscUNBQXFDLGlDQUFpQyxFQUFDO0FBQ2hILDZDQUE0QyxFQUFFLHFDQUFxQyxzQ0FBc0MsRUFBQztBQUMxSCw2Q0FBNEMsRUFBRSxxQ0FBcUMsc0NBQXNDLEVBQUM7QUFDMUgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saXZlc3RyZWFtLy4vbm9kZV9tb2R1bGVzL2xpdmVraXQtc2VydmVyLXNkay9kaXN0L2luZGV4LmpzPzRkMGYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVHJhY2tUeXBlID0gZXhwb3J0cy5UcmFja0luZm8gPSBleHBvcnRzLlJvb20gPSBleHBvcnRzLlBhcnRpY2lwYW50UGVybWlzc2lvbiA9IGV4cG9ydHMuUGFydGljaXBhbnRJbmZvX1N0YXRlID0gZXhwb3J0cy5QYXJ0aWNpcGFudEluZm8gPSBleHBvcnRzLkRhdGFQYWNrZXRfS2luZCA9IGV4cG9ydHMuSW5ncmVzc1ZpZGVvT3B0aW9ucyA9IGV4cG9ydHMuSW5ncmVzc1ZpZGVvRW5jb2RpbmdQcmVzZXQgPSBleHBvcnRzLkluZ3Jlc3NWaWRlb0VuY29kaW5nT3B0aW9ucyA9IGV4cG9ydHMuSW5ncmVzc1N0YXRlID0gZXhwb3J0cy5JbmdyZXNzSW5wdXQgPSBleHBvcnRzLkluZ3Jlc3NJbmZvID0gZXhwb3J0cy5JbmdyZXNzQXVkaW9PcHRpb25zID0gZXhwb3J0cy5JbmdyZXNzQXVkaW9FbmNvZGluZ1ByZXNldCA9IGV4cG9ydHMuSW5ncmVzc0F1ZGlvRW5jb2RpbmdPcHRpb25zID0gZXhwb3J0cy5TdHJlYW1Qcm90b2NvbCA9IGV4cG9ydHMuU3RyZWFtT3V0cHV0ID0gZXhwb3J0cy5TZWdtZW50ZWRGaWxlUHJvdG9jb2wgPSBleHBvcnRzLlNlZ21lbnRlZEZpbGVPdXRwdXQgPSBleHBvcnRzLkVuY29kaW5nT3B0aW9uc1ByZXNldCA9IGV4cG9ydHMuRW5jb2RpbmdPcHRpb25zID0gZXhwb3J0cy5FbmNvZGVkRmlsZVR5cGUgPSBleHBvcnRzLkVuY29kZWRGaWxlT3V0cHV0ID0gZXhwb3J0cy5FZ3Jlc3NJbmZvID0gZXhwb3J0cy5EaXJlY3RGaWxlT3V0cHV0ID0gdm9pZCAwO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0FjY2Vzc1Rva2VuXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9FZ3Jlc3NDbGllbnRcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0luZ3Jlc3NDbGllbnRcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL1Jvb21TZXJ2aWNlQ2xpZW50XCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9XZWJob29rUmVjZWl2ZXJcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2dyYW50c1wiKSwgZXhwb3J0cyk7XG52YXIgbGl2ZWtpdF9lZ3Jlc3NfMSA9IHJlcXVpcmUoXCIuL3Byb3RvL2xpdmVraXRfZWdyZXNzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRGlyZWN0RmlsZU91dHB1dFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbGl2ZWtpdF9lZ3Jlc3NfMS5EaXJlY3RGaWxlT3V0cHV0OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRWdyZXNzSW5mb1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbGl2ZWtpdF9lZ3Jlc3NfMS5FZ3Jlc3NJbmZvOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRW5jb2RlZEZpbGVPdXRwdXRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGxpdmVraXRfZWdyZXNzXzEuRW5jb2RlZEZpbGVPdXRwdXQ7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJFbmNvZGVkRmlsZVR5cGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGxpdmVraXRfZWdyZXNzXzEuRW5jb2RlZEZpbGVUeXBlOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRW5jb2RpbmdPcHRpb25zXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBsaXZla2l0X2VncmVzc18xLkVuY29kaW5nT3B0aW9uczsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkVuY29kaW5nT3B0aW9uc1ByZXNldFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbGl2ZWtpdF9lZ3Jlc3NfMS5FbmNvZGluZ09wdGlvbnNQcmVzZXQ7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTZWdtZW50ZWRGaWxlT3V0cHV0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBsaXZla2l0X2VncmVzc18xLlNlZ21lbnRlZEZpbGVPdXRwdXQ7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTZWdtZW50ZWRGaWxlUHJvdG9jb2xcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGxpdmVraXRfZWdyZXNzXzEuU2VnbWVudGVkRmlsZVByb3RvY29sOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU3RyZWFtT3V0cHV0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBsaXZla2l0X2VncmVzc18xLlN0cmVhbU91dHB1dDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlN0cmVhbVByb3RvY29sXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBsaXZla2l0X2VncmVzc18xLlN0cmVhbVByb3RvY29sOyB9IH0pO1xudmFyIGxpdmVraXRfaW5ncmVzc18xID0gcmVxdWlyZShcIi4vcHJvdG8vbGl2ZWtpdF9pbmdyZXNzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSW5ncmVzc0F1ZGlvRW5jb2RpbmdPcHRpb25zXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBsaXZla2l0X2luZ3Jlc3NfMS5JbmdyZXNzQXVkaW9FbmNvZGluZ09wdGlvbnM7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJJbmdyZXNzQXVkaW9FbmNvZGluZ1ByZXNldFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbGl2ZWtpdF9pbmdyZXNzXzEuSW5ncmVzc0F1ZGlvRW5jb2RpbmdQcmVzZXQ7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJJbmdyZXNzQXVkaW9PcHRpb25zXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBsaXZla2l0X2luZ3Jlc3NfMS5JbmdyZXNzQXVkaW9PcHRpb25zOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSW5ncmVzc0luZm9cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGxpdmVraXRfaW5ncmVzc18xLkluZ3Jlc3NJbmZvOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSW5ncmVzc0lucHV0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBsaXZla2l0X2luZ3Jlc3NfMS5JbmdyZXNzSW5wdXQ7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJJbmdyZXNzU3RhdGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGxpdmVraXRfaW5ncmVzc18xLkluZ3Jlc3NTdGF0ZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkluZ3Jlc3NWaWRlb0VuY29kaW5nT3B0aW9uc1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbGl2ZWtpdF9pbmdyZXNzXzEuSW5ncmVzc1ZpZGVvRW5jb2RpbmdPcHRpb25zOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSW5ncmVzc1ZpZGVvRW5jb2RpbmdQcmVzZXRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGxpdmVraXRfaW5ncmVzc18xLkluZ3Jlc3NWaWRlb0VuY29kaW5nUHJlc2V0OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSW5ncmVzc1ZpZGVvT3B0aW9uc1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbGl2ZWtpdF9pbmdyZXNzXzEuSW5ncmVzc1ZpZGVvT3B0aW9uczsgfSB9KTtcbnZhciBsaXZla2l0X21vZGVsc18xID0gcmVxdWlyZShcIi4vcHJvdG8vbGl2ZWtpdF9tb2RlbHNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEYXRhUGFja2V0X0tpbmRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGxpdmVraXRfbW9kZWxzXzEuRGF0YVBhY2tldF9LaW5kOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUGFydGljaXBhbnRJbmZvXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBsaXZla2l0X21vZGVsc18xLlBhcnRpY2lwYW50SW5mbzsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlBhcnRpY2lwYW50SW5mb19TdGF0ZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbGl2ZWtpdF9tb2RlbHNfMS5QYXJ0aWNpcGFudEluZm9fU3RhdGU7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJQYXJ0aWNpcGFudFBlcm1pc3Npb25cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGxpdmVraXRfbW9kZWxzXzEuUGFydGljaXBhbnRQZXJtaXNzaW9uOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUm9vbVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbGl2ZWtpdF9tb2RlbHNfMS5Sb29tOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVHJhY2tJbmZvXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBsaXZla2l0X21vZGVsc18xLlRyYWNrSW5mbzsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlRyYWNrVHlwZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbGl2ZWtpdF9tb2RlbHNfMS5UcmFja1R5cGU7IH0gfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/livekit-server-sdk/dist/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/livekit-server-sdk/dist/proto/google/protobuf/timestamp.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/proto/google/protobuf/timestamp.js ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Timestamp = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(__webpack_require__(/*! long */ \"(action-browser)/./node_modules/long/umd/index.js\"));\nconst minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ \"(action-browser)/./node_modules/protobufjs/minimal.js\"));\nexports.protobufPackage = \"google.protobuf\";\nfunction createBaseTimestamp() {\n    return { seconds: 0, nanos: 0 };\n}\nexports.Timestamp = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.seconds !== 0) {\n            writer.uint32(8).int64(message.seconds);\n        }\n        if (message.nanos !== 0) {\n            writer.uint32(16).int32(message.nanos);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTimestamp();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.seconds = longToNumber(reader.int64());\n                    break;\n                case 2:\n                    message.nanos = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            seconds: isSet(object.seconds) ? Number(object.seconds) : 0,\n            nanos: isSet(object.nanos) ? Number(object.nanos) : 0,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.seconds !== undefined && (obj.seconds = Math.round(message.seconds));\n        message.nanos !== undefined && (obj.nanos = Math.round(message.nanos));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseTimestamp();\n        message.seconds = (_a = object.seconds) !== null && _a !== void 0 ? _a : 0;\n        message.nanos = (_b = object.nanos) !== null && _b !== void 0 ? _b : 0;\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\") {\n        return globalThis;\n    }\n    if (typeof self !== \"undefined\") {\n        return self;\n    }\n    if (typeof window !== \"undefined\") {\n        return window;\n    }\n    if (typeof global !== \"undefined\") {\n        return global;\n    }\n    throw \"Unable to locate global object\";\n})();\nfunction longToNumber(long) {\n    if (long.gt(Number.MAX_SAFE_INTEGER)) {\n        throw new globalThis.Error(\"Value is larger than Number.MAX_SAFE_INTEGER\");\n    }\n    return long.toNumber();\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=timestamp.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9saXZla2l0LXNlcnZlci1zZGsvZGlzdC9wcm90by9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUJBQWlCLEdBQUcsdUJBQXVCO0FBQzNDO0FBQ0EsK0JBQStCLG1CQUFPLENBQUMsK0RBQU07QUFDN0Msa0NBQWtDLG1CQUFPLENBQUMsaUZBQW9CO0FBQzlELHVCQUF1QjtBQUN2QjtBQUNBLGFBQWE7QUFDYjtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saXZlc3RyZWFtLy4vbm9kZV9tb2R1bGVzL2xpdmVraXQtc2VydmVyLXNkay9kaXN0L3Byb3RvL2dvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAuanM/MTYwMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVGltZXN0YW1wID0gZXhwb3J0cy5wcm90b2J1ZlBhY2thZ2UgPSB2b2lkIDA7XG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuY29uc3QgbG9uZ18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJsb25nXCIpKTtcbmNvbnN0IG1pbmltYWxfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwicHJvdG9idWZqcy9taW5pbWFsXCIpKTtcbmV4cG9ydHMucHJvdG9idWZQYWNrYWdlID0gXCJnb29nbGUucHJvdG9idWZcIjtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VUaW1lc3RhbXAoKSB7XG4gICAgcmV0dXJuIHsgc2Vjb25kczogMCwgbmFub3M6IDAgfTtcbn1cbmV4cG9ydHMuVGltZXN0YW1wID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBtaW5pbWFsXzEuZGVmYXVsdC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2Uuc2Vjb25kcyAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig4KS5pbnQ2NChtZXNzYWdlLnNlY29uZHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLm5hbm9zICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDE2KS5pbnQzMihtZXNzYWdlLm5hbm9zKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBtaW5pbWFsXzEuZGVmYXVsdC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBtaW5pbWFsXzEuZGVmYXVsdC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VUaW1lc3RhbXAoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnNlY29uZHMgPSBsb25nVG9OdW1iZXIocmVhZGVyLmludDY0KCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubmFub3MgPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2Vjb25kczogaXNTZXQob2JqZWN0LnNlY29uZHMpID8gTnVtYmVyKG9iamVjdC5zZWNvbmRzKSA6IDAsXG4gICAgICAgICAgICBuYW5vczogaXNTZXQob2JqZWN0Lm5hbm9zKSA/IE51bWJlcihvYmplY3QubmFub3MpIDogMCxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLnNlY29uZHMgIT09IHVuZGVmaW5lZCAmJiAob2JqLnNlY29uZHMgPSBNYXRoLnJvdW5kKG1lc3NhZ2Uuc2Vjb25kcykpO1xuICAgICAgICBtZXNzYWdlLm5hbm9zICE9PSB1bmRlZmluZWQgJiYgKG9iai5uYW5vcyA9IE1hdGgucm91bmQobWVzc2FnZS5uYW5vcykpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlVGltZXN0YW1wKCk7XG4gICAgICAgIG1lc3NhZ2Uuc2Vjb25kcyA9IChfYSA9IG9iamVjdC5zZWNvbmRzKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAwO1xuICAgICAgICBtZXNzYWdlLm5hbm9zID0gKF9iID0gb2JqZWN0Lm5hbm9zKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAwO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbnZhciBnbG9iYWxUaGlzID0gKCgpID0+IHtcbiAgICBpZiAodHlwZW9mIGdsb2JhbFRoaXMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIGdsb2JhbFRoaXM7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICByZXR1cm4gc2VsZjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvdztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIGdsb2JhbDtcbiAgICB9XG4gICAgdGhyb3cgXCJVbmFibGUgdG8gbG9jYXRlIGdsb2JhbCBvYmplY3RcIjtcbn0pKCk7XG5mdW5jdGlvbiBsb25nVG9OdW1iZXIobG9uZykge1xuICAgIGlmIChsb25nLmd0KE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKSkge1xuICAgICAgICB0aHJvdyBuZXcgZ2xvYmFsVGhpcy5FcnJvcihcIlZhbHVlIGlzIGxhcmdlciB0aGFuIE51bWJlci5NQVhfU0FGRV9JTlRFR0VSXCIpO1xuICAgIH1cbiAgICByZXR1cm4gbG9uZy50b051bWJlcigpO1xufVxuaWYgKG1pbmltYWxfMS5kZWZhdWx0LnV0aWwuTG9uZyAhPT0gbG9uZ18xLmRlZmF1bHQpIHtcbiAgICBtaW5pbWFsXzEuZGVmYXVsdC51dGlsLkxvbmcgPSBsb25nXzEuZGVmYXVsdDtcbiAgICBtaW5pbWFsXzEuZGVmYXVsdC5jb25maWd1cmUoKTtcbn1cbmZ1bmN0aW9uIGlzU2V0KHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB1bmRlZmluZWQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aW1lc3RhbXAuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/livekit-server-sdk/dist/proto/google/protobuf/timestamp.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/livekit-server-sdk/dist/proto/livekit_egress.js":
/*!**********************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/proto/livekit_egress.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StreamInfo = exports.StreamInfoList = exports.EgressInfo = exports.StopEgressRequest = exports.ListEgressResponse = exports.ListEgressRequest = exports.UpdateOutputsRequest = exports.UpdateStreamRequest = exports.UpdateLayoutRequest = exports.EncodingOptions = exports.StreamOutput = exports.AliOSSUpload = exports.AzureBlobUpload = exports.GCPUpload = exports.S3Upload_MetadataEntry = exports.S3Upload = exports.ImageOutput = exports.DirectFileOutput = exports.SegmentedFileOutput = exports.EncodedFileOutput = exports.TrackEgressRequest = exports.TrackCompositeEgressRequest = exports.ParticipantEgressRequest = exports.WebEgressRequest = exports.RoomCompositeEgressRequest = exports.streamInfo_StatusToJSON = exports.streamInfo_StatusFromJSON = exports.StreamInfo_Status = exports.egressStatusToJSON = exports.egressStatusFromJSON = exports.EgressStatus = exports.encodingOptionsPresetToJSON = exports.encodingOptionsPresetFromJSON = exports.EncodingOptionsPreset = exports.streamProtocolToJSON = exports.streamProtocolFromJSON = exports.StreamProtocol = exports.imageFileSuffixToJSON = exports.imageFileSuffixFromJSON = exports.ImageFileSuffix = exports.segmentedFileSuffixToJSON = exports.segmentedFileSuffixFromJSON = exports.SegmentedFileSuffix = exports.segmentedFileProtocolToJSON = exports.segmentedFileProtocolFromJSON = exports.SegmentedFileProtocol = exports.encodedFileTypeToJSON = exports.encodedFileTypeFromJSON = exports.EncodedFileType = exports.protobufPackage = void 0;\nexports.AutoTrackEgress = exports.AutoParticipantEgress = exports.ImagesInfo = exports.SegmentsInfo = exports.FileInfo = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(__webpack_require__(/*! long */ \"(action-browser)/./node_modules/long/umd/index.js\"));\nconst minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ \"(action-browser)/./node_modules/protobufjs/minimal.js\"));\nconst livekit_models_1 = __webpack_require__(/*! ./livekit_models */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/proto/livekit_models.js\");\nexports.protobufPackage = \"livekit\";\nvar EncodedFileType;\n(function (EncodedFileType) {\n    /** DEFAULT_FILETYPE - file type chosen based on codecs */\n    EncodedFileType[EncodedFileType[\"DEFAULT_FILETYPE\"] = 0] = \"DEFAULT_FILETYPE\";\n    EncodedFileType[EncodedFileType[\"MP4\"] = 1] = \"MP4\";\n    EncodedFileType[EncodedFileType[\"OGG\"] = 2] = \"OGG\";\n    EncodedFileType[EncodedFileType[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(EncodedFileType = exports.EncodedFileType || (exports.EncodedFileType = {}));\nfunction encodedFileTypeFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"DEFAULT_FILETYPE\":\n            return EncodedFileType.DEFAULT_FILETYPE;\n        case 1:\n        case \"MP4\":\n            return EncodedFileType.MP4;\n        case 2:\n        case \"OGG\":\n            return EncodedFileType.OGG;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return EncodedFileType.UNRECOGNIZED;\n    }\n}\nexports.encodedFileTypeFromJSON = encodedFileTypeFromJSON;\nfunction encodedFileTypeToJSON(object) {\n    switch (object) {\n        case EncodedFileType.DEFAULT_FILETYPE:\n            return \"DEFAULT_FILETYPE\";\n        case EncodedFileType.MP4:\n            return \"MP4\";\n        case EncodedFileType.OGG:\n            return \"OGG\";\n        case EncodedFileType.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.encodedFileTypeToJSON = encodedFileTypeToJSON;\nvar SegmentedFileProtocol;\n(function (SegmentedFileProtocol) {\n    SegmentedFileProtocol[SegmentedFileProtocol[\"DEFAULT_SEGMENTED_FILE_PROTOCOL\"] = 0] = \"DEFAULT_SEGMENTED_FILE_PROTOCOL\";\n    SegmentedFileProtocol[SegmentedFileProtocol[\"HLS_PROTOCOL\"] = 1] = \"HLS_PROTOCOL\";\n    SegmentedFileProtocol[SegmentedFileProtocol[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(SegmentedFileProtocol = exports.SegmentedFileProtocol || (exports.SegmentedFileProtocol = {}));\nfunction segmentedFileProtocolFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"DEFAULT_SEGMENTED_FILE_PROTOCOL\":\n            return SegmentedFileProtocol.DEFAULT_SEGMENTED_FILE_PROTOCOL;\n        case 1:\n        case \"HLS_PROTOCOL\":\n            return SegmentedFileProtocol.HLS_PROTOCOL;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return SegmentedFileProtocol.UNRECOGNIZED;\n    }\n}\nexports.segmentedFileProtocolFromJSON = segmentedFileProtocolFromJSON;\nfunction segmentedFileProtocolToJSON(object) {\n    switch (object) {\n        case SegmentedFileProtocol.DEFAULT_SEGMENTED_FILE_PROTOCOL:\n            return \"DEFAULT_SEGMENTED_FILE_PROTOCOL\";\n        case SegmentedFileProtocol.HLS_PROTOCOL:\n            return \"HLS_PROTOCOL\";\n        case SegmentedFileProtocol.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.segmentedFileProtocolToJSON = segmentedFileProtocolToJSON;\nvar SegmentedFileSuffix;\n(function (SegmentedFileSuffix) {\n    SegmentedFileSuffix[SegmentedFileSuffix[\"INDEX\"] = 0] = \"INDEX\";\n    SegmentedFileSuffix[SegmentedFileSuffix[\"TIMESTAMP\"] = 1] = \"TIMESTAMP\";\n    SegmentedFileSuffix[SegmentedFileSuffix[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(SegmentedFileSuffix = exports.SegmentedFileSuffix || (exports.SegmentedFileSuffix = {}));\nfunction segmentedFileSuffixFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"INDEX\":\n            return SegmentedFileSuffix.INDEX;\n        case 1:\n        case \"TIMESTAMP\":\n            return SegmentedFileSuffix.TIMESTAMP;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return SegmentedFileSuffix.UNRECOGNIZED;\n    }\n}\nexports.segmentedFileSuffixFromJSON = segmentedFileSuffixFromJSON;\nfunction segmentedFileSuffixToJSON(object) {\n    switch (object) {\n        case SegmentedFileSuffix.INDEX:\n            return \"INDEX\";\n        case SegmentedFileSuffix.TIMESTAMP:\n            return \"TIMESTAMP\";\n        case SegmentedFileSuffix.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.segmentedFileSuffixToJSON = segmentedFileSuffixToJSON;\nvar ImageFileSuffix;\n(function (ImageFileSuffix) {\n    ImageFileSuffix[ImageFileSuffix[\"IMAGE_SUFFIX_INDEX\"] = 0] = \"IMAGE_SUFFIX_INDEX\";\n    ImageFileSuffix[ImageFileSuffix[\"IMAGE_SUFFIX_TIMESTAMP\"] = 1] = \"IMAGE_SUFFIX_TIMESTAMP\";\n    ImageFileSuffix[ImageFileSuffix[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(ImageFileSuffix = exports.ImageFileSuffix || (exports.ImageFileSuffix = {}));\nfunction imageFileSuffixFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"IMAGE_SUFFIX_INDEX\":\n            return ImageFileSuffix.IMAGE_SUFFIX_INDEX;\n        case 1:\n        case \"IMAGE_SUFFIX_TIMESTAMP\":\n            return ImageFileSuffix.IMAGE_SUFFIX_TIMESTAMP;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return ImageFileSuffix.UNRECOGNIZED;\n    }\n}\nexports.imageFileSuffixFromJSON = imageFileSuffixFromJSON;\nfunction imageFileSuffixToJSON(object) {\n    switch (object) {\n        case ImageFileSuffix.IMAGE_SUFFIX_INDEX:\n            return \"IMAGE_SUFFIX_INDEX\";\n        case ImageFileSuffix.IMAGE_SUFFIX_TIMESTAMP:\n            return \"IMAGE_SUFFIX_TIMESTAMP\";\n        case ImageFileSuffix.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.imageFileSuffixToJSON = imageFileSuffixToJSON;\nvar StreamProtocol;\n(function (StreamProtocol) {\n    /** DEFAULT_PROTOCOL - protocol chosen based on urls */\n    StreamProtocol[StreamProtocol[\"DEFAULT_PROTOCOL\"] = 0] = \"DEFAULT_PROTOCOL\";\n    StreamProtocol[StreamProtocol[\"RTMP\"] = 1] = \"RTMP\";\n    StreamProtocol[StreamProtocol[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(StreamProtocol = exports.StreamProtocol || (exports.StreamProtocol = {}));\nfunction streamProtocolFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"DEFAULT_PROTOCOL\":\n            return StreamProtocol.DEFAULT_PROTOCOL;\n        case 1:\n        case \"RTMP\":\n            return StreamProtocol.RTMP;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return StreamProtocol.UNRECOGNIZED;\n    }\n}\nexports.streamProtocolFromJSON = streamProtocolFromJSON;\nfunction streamProtocolToJSON(object) {\n    switch (object) {\n        case StreamProtocol.DEFAULT_PROTOCOL:\n            return \"DEFAULT_PROTOCOL\";\n        case StreamProtocol.RTMP:\n            return \"RTMP\";\n        case StreamProtocol.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.streamProtocolToJSON = streamProtocolToJSON;\nvar EncodingOptionsPreset;\n(function (EncodingOptionsPreset) {\n    /** H264_720P_30 - 1280x720, 30fps, 3000kpbs, H.264_MAIN / OPUS */\n    EncodingOptionsPreset[EncodingOptionsPreset[\"H264_720P_30\"] = 0] = \"H264_720P_30\";\n    /** H264_720P_60 - 1280x720, 60fps, 4500kbps, H.264_MAIN / OPUS */\n    EncodingOptionsPreset[EncodingOptionsPreset[\"H264_720P_60\"] = 1] = \"H264_720P_60\";\n    /** H264_1080P_30 - 1920x1080, 30fps, 4500kbps, H.264_MAIN / OPUS */\n    EncodingOptionsPreset[EncodingOptionsPreset[\"H264_1080P_30\"] = 2] = \"H264_1080P_30\";\n    /** H264_1080P_60 - 1920x1080, 60fps, 6000kbps, H.264_MAIN / OPUS */\n    EncodingOptionsPreset[EncodingOptionsPreset[\"H264_1080P_60\"] = 3] = \"H264_1080P_60\";\n    /** PORTRAIT_H264_720P_30 - 720x1280, 30fps, 3000kpbs, H.264_MAIN / OPUS */\n    EncodingOptionsPreset[EncodingOptionsPreset[\"PORTRAIT_H264_720P_30\"] = 4] = \"PORTRAIT_H264_720P_30\";\n    /** PORTRAIT_H264_720P_60 - 720x1280, 60fps, 4500kbps, H.264_MAIN / OPUS */\n    EncodingOptionsPreset[EncodingOptionsPreset[\"PORTRAIT_H264_720P_60\"] = 5] = \"PORTRAIT_H264_720P_60\";\n    /** PORTRAIT_H264_1080P_30 - 1080x1920, 30fps, 4500kbps, H.264_MAIN / OPUS */\n    EncodingOptionsPreset[EncodingOptionsPreset[\"PORTRAIT_H264_1080P_30\"] = 6] = \"PORTRAIT_H264_1080P_30\";\n    /** PORTRAIT_H264_1080P_60 - 1080x1920, 60fps, 6000kbps, H.264_MAIN / OPUS */\n    EncodingOptionsPreset[EncodingOptionsPreset[\"PORTRAIT_H264_1080P_60\"] = 7] = \"PORTRAIT_H264_1080P_60\";\n    EncodingOptionsPreset[EncodingOptionsPreset[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(EncodingOptionsPreset = exports.EncodingOptionsPreset || (exports.EncodingOptionsPreset = {}));\nfunction encodingOptionsPresetFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"H264_720P_30\":\n            return EncodingOptionsPreset.H264_720P_30;\n        case 1:\n        case \"H264_720P_60\":\n            return EncodingOptionsPreset.H264_720P_60;\n        case 2:\n        case \"H264_1080P_30\":\n            return EncodingOptionsPreset.H264_1080P_30;\n        case 3:\n        case \"H264_1080P_60\":\n            return EncodingOptionsPreset.H264_1080P_60;\n        case 4:\n        case \"PORTRAIT_H264_720P_30\":\n            return EncodingOptionsPreset.PORTRAIT_H264_720P_30;\n        case 5:\n        case \"PORTRAIT_H264_720P_60\":\n            return EncodingOptionsPreset.PORTRAIT_H264_720P_60;\n        case 6:\n        case \"PORTRAIT_H264_1080P_30\":\n            return EncodingOptionsPreset.PORTRAIT_H264_1080P_30;\n        case 7:\n        case \"PORTRAIT_H264_1080P_60\":\n            return EncodingOptionsPreset.PORTRAIT_H264_1080P_60;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return EncodingOptionsPreset.UNRECOGNIZED;\n    }\n}\nexports.encodingOptionsPresetFromJSON = encodingOptionsPresetFromJSON;\nfunction encodingOptionsPresetToJSON(object) {\n    switch (object) {\n        case EncodingOptionsPreset.H264_720P_30:\n            return \"H264_720P_30\";\n        case EncodingOptionsPreset.H264_720P_60:\n            return \"H264_720P_60\";\n        case EncodingOptionsPreset.H264_1080P_30:\n            return \"H264_1080P_30\";\n        case EncodingOptionsPreset.H264_1080P_60:\n            return \"H264_1080P_60\";\n        case EncodingOptionsPreset.PORTRAIT_H264_720P_30:\n            return \"PORTRAIT_H264_720P_30\";\n        case EncodingOptionsPreset.PORTRAIT_H264_720P_60:\n            return \"PORTRAIT_H264_720P_60\";\n        case EncodingOptionsPreset.PORTRAIT_H264_1080P_30:\n            return \"PORTRAIT_H264_1080P_30\";\n        case EncodingOptionsPreset.PORTRAIT_H264_1080P_60:\n            return \"PORTRAIT_H264_1080P_60\";\n        case EncodingOptionsPreset.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.encodingOptionsPresetToJSON = encodingOptionsPresetToJSON;\nvar EgressStatus;\n(function (EgressStatus) {\n    EgressStatus[EgressStatus[\"EGRESS_STARTING\"] = 0] = \"EGRESS_STARTING\";\n    EgressStatus[EgressStatus[\"EGRESS_ACTIVE\"] = 1] = \"EGRESS_ACTIVE\";\n    EgressStatus[EgressStatus[\"EGRESS_ENDING\"] = 2] = \"EGRESS_ENDING\";\n    EgressStatus[EgressStatus[\"EGRESS_COMPLETE\"] = 3] = \"EGRESS_COMPLETE\";\n    EgressStatus[EgressStatus[\"EGRESS_FAILED\"] = 4] = \"EGRESS_FAILED\";\n    EgressStatus[EgressStatus[\"EGRESS_ABORTED\"] = 5] = \"EGRESS_ABORTED\";\n    EgressStatus[EgressStatus[\"EGRESS_LIMIT_REACHED\"] = 6] = \"EGRESS_LIMIT_REACHED\";\n    EgressStatus[EgressStatus[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(EgressStatus = exports.EgressStatus || (exports.EgressStatus = {}));\nfunction egressStatusFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"EGRESS_STARTING\":\n            return EgressStatus.EGRESS_STARTING;\n        case 1:\n        case \"EGRESS_ACTIVE\":\n            return EgressStatus.EGRESS_ACTIVE;\n        case 2:\n        case \"EGRESS_ENDING\":\n            return EgressStatus.EGRESS_ENDING;\n        case 3:\n        case \"EGRESS_COMPLETE\":\n            return EgressStatus.EGRESS_COMPLETE;\n        case 4:\n        case \"EGRESS_FAILED\":\n            return EgressStatus.EGRESS_FAILED;\n        case 5:\n        case \"EGRESS_ABORTED\":\n            return EgressStatus.EGRESS_ABORTED;\n        case 6:\n        case \"EGRESS_LIMIT_REACHED\":\n            return EgressStatus.EGRESS_LIMIT_REACHED;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return EgressStatus.UNRECOGNIZED;\n    }\n}\nexports.egressStatusFromJSON = egressStatusFromJSON;\nfunction egressStatusToJSON(object) {\n    switch (object) {\n        case EgressStatus.EGRESS_STARTING:\n            return \"EGRESS_STARTING\";\n        case EgressStatus.EGRESS_ACTIVE:\n            return \"EGRESS_ACTIVE\";\n        case EgressStatus.EGRESS_ENDING:\n            return \"EGRESS_ENDING\";\n        case EgressStatus.EGRESS_COMPLETE:\n            return \"EGRESS_COMPLETE\";\n        case EgressStatus.EGRESS_FAILED:\n            return \"EGRESS_FAILED\";\n        case EgressStatus.EGRESS_ABORTED:\n            return \"EGRESS_ABORTED\";\n        case EgressStatus.EGRESS_LIMIT_REACHED:\n            return \"EGRESS_LIMIT_REACHED\";\n        case EgressStatus.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.egressStatusToJSON = egressStatusToJSON;\nvar StreamInfo_Status;\n(function (StreamInfo_Status) {\n    StreamInfo_Status[StreamInfo_Status[\"ACTIVE\"] = 0] = \"ACTIVE\";\n    StreamInfo_Status[StreamInfo_Status[\"FINISHED\"] = 1] = \"FINISHED\";\n    StreamInfo_Status[StreamInfo_Status[\"FAILED\"] = 2] = \"FAILED\";\n    StreamInfo_Status[StreamInfo_Status[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(StreamInfo_Status = exports.StreamInfo_Status || (exports.StreamInfo_Status = {}));\nfunction streamInfo_StatusFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"ACTIVE\":\n            return StreamInfo_Status.ACTIVE;\n        case 1:\n        case \"FINISHED\":\n            return StreamInfo_Status.FINISHED;\n        case 2:\n        case \"FAILED\":\n            return StreamInfo_Status.FAILED;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return StreamInfo_Status.UNRECOGNIZED;\n    }\n}\nexports.streamInfo_StatusFromJSON = streamInfo_StatusFromJSON;\nfunction streamInfo_StatusToJSON(object) {\n    switch (object) {\n        case StreamInfo_Status.ACTIVE:\n            return \"ACTIVE\";\n        case StreamInfo_Status.FINISHED:\n            return \"FINISHED\";\n        case StreamInfo_Status.FAILED:\n            return \"FAILED\";\n        case StreamInfo_Status.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.streamInfo_StatusToJSON = streamInfo_StatusToJSON;\nfunction createBaseRoomCompositeEgressRequest() {\n    return {\n        roomName: \"\",\n        layout: \"\",\n        audioOnly: false,\n        videoOnly: false,\n        customBaseUrl: \"\",\n        file: undefined,\n        stream: undefined,\n        segments: undefined,\n        preset: undefined,\n        advanced: undefined,\n        fileOutputs: [],\n        streamOutputs: [],\n        segmentOutputs: [],\n        imageOutputs: [],\n    };\n}\nexports.RoomCompositeEgressRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.roomName !== undefined && message.roomName !== \"\") {\n            writer.uint32(10).string(message.roomName);\n        }\n        if (message.layout !== undefined && message.layout !== \"\") {\n            writer.uint32(18).string(message.layout);\n        }\n        if (message.audioOnly === true) {\n            writer.uint32(24).bool(message.audioOnly);\n        }\n        if (message.videoOnly === true) {\n            writer.uint32(32).bool(message.videoOnly);\n        }\n        if (message.customBaseUrl !== undefined && message.customBaseUrl !== \"\") {\n            writer.uint32(42).string(message.customBaseUrl);\n        }\n        if (message.file !== undefined) {\n            exports.EncodedFileOutput.encode(message.file, writer.uint32(50).fork()).ldelim();\n        }\n        if (message.stream !== undefined) {\n            exports.StreamOutput.encode(message.stream, writer.uint32(58).fork()).ldelim();\n        }\n        if (message.segments !== undefined) {\n            exports.SegmentedFileOutput.encode(message.segments, writer.uint32(82).fork()).ldelim();\n        }\n        if (message.preset !== undefined) {\n            writer.uint32(64).int32(message.preset);\n        }\n        if (message.advanced !== undefined) {\n            exports.EncodingOptions.encode(message.advanced, writer.uint32(74).fork()).ldelim();\n        }\n        if (message.fileOutputs !== undefined && message.fileOutputs.length !== 0) {\n            for (const v of message.fileOutputs) {\n                exports.EncodedFileOutput.encode(v, writer.uint32(90).fork()).ldelim();\n            }\n        }\n        if (message.streamOutputs !== undefined && message.streamOutputs.length !== 0) {\n            for (const v of message.streamOutputs) {\n                exports.StreamOutput.encode(v, writer.uint32(98).fork()).ldelim();\n            }\n        }\n        if (message.segmentOutputs !== undefined && message.segmentOutputs.length !== 0) {\n            for (const v of message.segmentOutputs) {\n                exports.SegmentedFileOutput.encode(v, writer.uint32(106).fork()).ldelim();\n            }\n        }\n        if (message.imageOutputs !== undefined && message.imageOutputs.length !== 0) {\n            for (const v of message.imageOutputs) {\n                exports.ImageOutput.encode(v, writer.uint32(114).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseRoomCompositeEgressRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.roomName = reader.string();\n                    break;\n                case 2:\n                    message.layout = reader.string();\n                    break;\n                case 3:\n                    message.audioOnly = reader.bool();\n                    break;\n                case 4:\n                    message.videoOnly = reader.bool();\n                    break;\n                case 5:\n                    message.customBaseUrl = reader.string();\n                    break;\n                case 6:\n                    message.file = exports.EncodedFileOutput.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.stream = exports.StreamOutput.decode(reader, reader.uint32());\n                    break;\n                case 10:\n                    message.segments = exports.SegmentedFileOutput.decode(reader, reader.uint32());\n                    break;\n                case 8:\n                    message.preset = reader.int32();\n                    break;\n                case 9:\n                    message.advanced = exports.EncodingOptions.decode(reader, reader.uint32());\n                    break;\n                case 11:\n                    message.fileOutputs.push(exports.EncodedFileOutput.decode(reader, reader.uint32()));\n                    break;\n                case 12:\n                    message.streamOutputs.push(exports.StreamOutput.decode(reader, reader.uint32()));\n                    break;\n                case 13:\n                    message.segmentOutputs.push(exports.SegmentedFileOutput.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    message.imageOutputs.push(exports.ImageOutput.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            roomName: isSet(object.roomName) ? String(object.roomName) : \"\",\n            layout: isSet(object.layout) ? String(object.layout) : \"\",\n            audioOnly: isSet(object.audioOnly) ? Boolean(object.audioOnly) : false,\n            videoOnly: isSet(object.videoOnly) ? Boolean(object.videoOnly) : false,\n            customBaseUrl: isSet(object.customBaseUrl) ? String(object.customBaseUrl) : \"\",\n            file: isSet(object.file) ? exports.EncodedFileOutput.fromJSON(object.file) : undefined,\n            stream: isSet(object.stream) ? exports.StreamOutput.fromJSON(object.stream) : undefined,\n            segments: isSet(object.segments) ? exports.SegmentedFileOutput.fromJSON(object.segments) : undefined,\n            preset: isSet(object.preset) ? encodingOptionsPresetFromJSON(object.preset) : undefined,\n            advanced: isSet(object.advanced) ? exports.EncodingOptions.fromJSON(object.advanced) : undefined,\n            fileOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.fileOutputs)\n                ? object.fileOutputs.map((e) => exports.EncodedFileOutput.fromJSON(e))\n                : [],\n            streamOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.streamOutputs)\n                ? object.streamOutputs.map((e) => exports.StreamOutput.fromJSON(e))\n                : [],\n            segmentOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.segmentOutputs)\n                ? object.segmentOutputs.map((e) => exports.SegmentedFileOutput.fromJSON(e))\n                : [],\n            imageOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.imageOutputs)\n                ? object.imageOutputs.map((e) => exports.ImageOutput.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.roomName !== undefined && (obj.roomName = message.roomName);\n        message.layout !== undefined && (obj.layout = message.layout);\n        message.audioOnly !== undefined && (obj.audioOnly = message.audioOnly);\n        message.videoOnly !== undefined && (obj.videoOnly = message.videoOnly);\n        message.customBaseUrl !== undefined && (obj.customBaseUrl = message.customBaseUrl);\n        message.file !== undefined && (obj.file = message.file ? exports.EncodedFileOutput.toJSON(message.file) : undefined);\n        message.stream !== undefined && (obj.stream = message.stream ? exports.StreamOutput.toJSON(message.stream) : undefined);\n        message.segments !== undefined &&\n            (obj.segments = message.segments ? exports.SegmentedFileOutput.toJSON(message.segments) : undefined);\n        message.preset !== undefined &&\n            (obj.preset = message.preset !== undefined ? encodingOptionsPresetToJSON(message.preset) : undefined);\n        message.advanced !== undefined &&\n            (obj.advanced = message.advanced ? exports.EncodingOptions.toJSON(message.advanced) : undefined);\n        if (message.fileOutputs) {\n            obj.fileOutputs = message.fileOutputs.map((e) => e ? exports.EncodedFileOutput.toJSON(e) : undefined);\n        }\n        else {\n            obj.fileOutputs = [];\n        }\n        if (message.streamOutputs) {\n            obj.streamOutputs = message.streamOutputs.map((e) => e ? exports.StreamOutput.toJSON(e) : undefined);\n        }\n        else {\n            obj.streamOutputs = [];\n        }\n        if (message.segmentOutputs) {\n            obj.segmentOutputs = message.segmentOutputs.map((e) => e ? exports.SegmentedFileOutput.toJSON(e) : undefined);\n        }\n        else {\n            obj.segmentOutputs = [];\n        }\n        if (message.imageOutputs) {\n            obj.imageOutputs = message.imageOutputs.map((e) => e ? exports.ImageOutput.toJSON(e) : undefined);\n        }\n        else {\n            obj.imageOutputs = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n        const message = createBaseRoomCompositeEgressRequest();\n        message.roomName = (_a = object.roomName) !== null && _a !== void 0 ? _a : \"\";\n        message.layout = (_b = object.layout) !== null && _b !== void 0 ? _b : \"\";\n        message.audioOnly = (_c = object.audioOnly) !== null && _c !== void 0 ? _c : false;\n        message.videoOnly = (_d = object.videoOnly) !== null && _d !== void 0 ? _d : false;\n        message.customBaseUrl = (_e = object.customBaseUrl) !== null && _e !== void 0 ? _e : \"\";\n        message.file = (object.file !== undefined && object.file !== null)\n            ? exports.EncodedFileOutput.fromPartial(object.file)\n            : undefined;\n        message.stream = (object.stream !== undefined && object.stream !== null)\n            ? exports.StreamOutput.fromPartial(object.stream)\n            : undefined;\n        message.segments = (object.segments !== undefined && object.segments !== null)\n            ? exports.SegmentedFileOutput.fromPartial(object.segments)\n            : undefined;\n        message.preset = (_f = object.preset) !== null && _f !== void 0 ? _f : undefined;\n        message.advanced = (object.advanced !== undefined && object.advanced !== null)\n            ? exports.EncodingOptions.fromPartial(object.advanced)\n            : undefined;\n        message.fileOutputs = ((_g = object.fileOutputs) === null || _g === void 0 ? void 0 : _g.map((e) => exports.EncodedFileOutput.fromPartial(e))) || [];\n        message.streamOutputs = ((_h = object.streamOutputs) === null || _h === void 0 ? void 0 : _h.map((e) => exports.StreamOutput.fromPartial(e))) || [];\n        message.segmentOutputs = ((_j = object.segmentOutputs) === null || _j === void 0 ? void 0 : _j.map((e) => exports.SegmentedFileOutput.fromPartial(e))) || [];\n        message.imageOutputs = ((_k = object.imageOutputs) === null || _k === void 0 ? void 0 : _k.map((e) => exports.ImageOutput.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseWebEgressRequest() {\n    return {\n        url: \"\",\n        audioOnly: false,\n        videoOnly: false,\n        awaitStartSignal: false,\n        file: undefined,\n        stream: undefined,\n        segments: undefined,\n        preset: undefined,\n        advanced: undefined,\n        fileOutputs: [],\n        streamOutputs: [],\n        segmentOutputs: [],\n        imageOutputs: [],\n    };\n}\nexports.WebEgressRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.url !== undefined && message.url !== \"\") {\n            writer.uint32(10).string(message.url);\n        }\n        if (message.audioOnly === true) {\n            writer.uint32(16).bool(message.audioOnly);\n        }\n        if (message.videoOnly === true) {\n            writer.uint32(24).bool(message.videoOnly);\n        }\n        if (message.awaitStartSignal === true) {\n            writer.uint32(96).bool(message.awaitStartSignal);\n        }\n        if (message.file !== undefined) {\n            exports.EncodedFileOutput.encode(message.file, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.stream !== undefined) {\n            exports.StreamOutput.encode(message.stream, writer.uint32(42).fork()).ldelim();\n        }\n        if (message.segments !== undefined) {\n            exports.SegmentedFileOutput.encode(message.segments, writer.uint32(50).fork()).ldelim();\n        }\n        if (message.preset !== undefined) {\n            writer.uint32(56).int32(message.preset);\n        }\n        if (message.advanced !== undefined) {\n            exports.EncodingOptions.encode(message.advanced, writer.uint32(66).fork()).ldelim();\n        }\n        if (message.fileOutputs !== undefined && message.fileOutputs.length !== 0) {\n            for (const v of message.fileOutputs) {\n                exports.EncodedFileOutput.encode(v, writer.uint32(74).fork()).ldelim();\n            }\n        }\n        if (message.streamOutputs !== undefined && message.streamOutputs.length !== 0) {\n            for (const v of message.streamOutputs) {\n                exports.StreamOutput.encode(v, writer.uint32(82).fork()).ldelim();\n            }\n        }\n        if (message.segmentOutputs !== undefined && message.segmentOutputs.length !== 0) {\n            for (const v of message.segmentOutputs) {\n                exports.SegmentedFileOutput.encode(v, writer.uint32(90).fork()).ldelim();\n            }\n        }\n        if (message.imageOutputs !== undefined && message.imageOutputs.length !== 0) {\n            for (const v of message.imageOutputs) {\n                exports.ImageOutput.encode(v, writer.uint32(106).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseWebEgressRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.url = reader.string();\n                    break;\n                case 2:\n                    message.audioOnly = reader.bool();\n                    break;\n                case 3:\n                    message.videoOnly = reader.bool();\n                    break;\n                case 12:\n                    message.awaitStartSignal = reader.bool();\n                    break;\n                case 4:\n                    message.file = exports.EncodedFileOutput.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.stream = exports.StreamOutput.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.segments = exports.SegmentedFileOutput.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.preset = reader.int32();\n                    break;\n                case 8:\n                    message.advanced = exports.EncodingOptions.decode(reader, reader.uint32());\n                    break;\n                case 9:\n                    message.fileOutputs.push(exports.EncodedFileOutput.decode(reader, reader.uint32()));\n                    break;\n                case 10:\n                    message.streamOutputs.push(exports.StreamOutput.decode(reader, reader.uint32()));\n                    break;\n                case 11:\n                    message.segmentOutputs.push(exports.SegmentedFileOutput.decode(reader, reader.uint32()));\n                    break;\n                case 13:\n                    message.imageOutputs.push(exports.ImageOutput.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            url: isSet(object.url) ? String(object.url) : \"\",\n            audioOnly: isSet(object.audioOnly) ? Boolean(object.audioOnly) : false,\n            videoOnly: isSet(object.videoOnly) ? Boolean(object.videoOnly) : false,\n            awaitStartSignal: isSet(object.awaitStartSignal) ? Boolean(object.awaitStartSignal) : false,\n            file: isSet(object.file) ? exports.EncodedFileOutput.fromJSON(object.file) : undefined,\n            stream: isSet(object.stream) ? exports.StreamOutput.fromJSON(object.stream) : undefined,\n            segments: isSet(object.segments) ? exports.SegmentedFileOutput.fromJSON(object.segments) : undefined,\n            preset: isSet(object.preset) ? encodingOptionsPresetFromJSON(object.preset) : undefined,\n            advanced: isSet(object.advanced) ? exports.EncodingOptions.fromJSON(object.advanced) : undefined,\n            fileOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.fileOutputs)\n                ? object.fileOutputs.map((e) => exports.EncodedFileOutput.fromJSON(e))\n                : [],\n            streamOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.streamOutputs)\n                ? object.streamOutputs.map((e) => exports.StreamOutput.fromJSON(e))\n                : [],\n            segmentOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.segmentOutputs)\n                ? object.segmentOutputs.map((e) => exports.SegmentedFileOutput.fromJSON(e))\n                : [],\n            imageOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.imageOutputs)\n                ? object.imageOutputs.map((e) => exports.ImageOutput.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.url !== undefined && (obj.url = message.url);\n        message.audioOnly !== undefined && (obj.audioOnly = message.audioOnly);\n        message.videoOnly !== undefined && (obj.videoOnly = message.videoOnly);\n        message.awaitStartSignal !== undefined && (obj.awaitStartSignal = message.awaitStartSignal);\n        message.file !== undefined && (obj.file = message.file ? exports.EncodedFileOutput.toJSON(message.file) : undefined);\n        message.stream !== undefined && (obj.stream = message.stream ? exports.StreamOutput.toJSON(message.stream) : undefined);\n        message.segments !== undefined &&\n            (obj.segments = message.segments ? exports.SegmentedFileOutput.toJSON(message.segments) : undefined);\n        message.preset !== undefined &&\n            (obj.preset = message.preset !== undefined ? encodingOptionsPresetToJSON(message.preset) : undefined);\n        message.advanced !== undefined &&\n            (obj.advanced = message.advanced ? exports.EncodingOptions.toJSON(message.advanced) : undefined);\n        if (message.fileOutputs) {\n            obj.fileOutputs = message.fileOutputs.map((e) => e ? exports.EncodedFileOutput.toJSON(e) : undefined);\n        }\n        else {\n            obj.fileOutputs = [];\n        }\n        if (message.streamOutputs) {\n            obj.streamOutputs = message.streamOutputs.map((e) => e ? exports.StreamOutput.toJSON(e) : undefined);\n        }\n        else {\n            obj.streamOutputs = [];\n        }\n        if (message.segmentOutputs) {\n            obj.segmentOutputs = message.segmentOutputs.map((e) => e ? exports.SegmentedFileOutput.toJSON(e) : undefined);\n        }\n        else {\n            obj.segmentOutputs = [];\n        }\n        if (message.imageOutputs) {\n            obj.imageOutputs = message.imageOutputs.map((e) => e ? exports.ImageOutput.toJSON(e) : undefined);\n        }\n        else {\n            obj.imageOutputs = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        const message = createBaseWebEgressRequest();\n        message.url = (_a = object.url) !== null && _a !== void 0 ? _a : \"\";\n        message.audioOnly = (_b = object.audioOnly) !== null && _b !== void 0 ? _b : false;\n        message.videoOnly = (_c = object.videoOnly) !== null && _c !== void 0 ? _c : false;\n        message.awaitStartSignal = (_d = object.awaitStartSignal) !== null && _d !== void 0 ? _d : false;\n        message.file = (object.file !== undefined && object.file !== null)\n            ? exports.EncodedFileOutput.fromPartial(object.file)\n            : undefined;\n        message.stream = (object.stream !== undefined && object.stream !== null)\n            ? exports.StreamOutput.fromPartial(object.stream)\n            : undefined;\n        message.segments = (object.segments !== undefined && object.segments !== null)\n            ? exports.SegmentedFileOutput.fromPartial(object.segments)\n            : undefined;\n        message.preset = (_e = object.preset) !== null && _e !== void 0 ? _e : undefined;\n        message.advanced = (object.advanced !== undefined && object.advanced !== null)\n            ? exports.EncodingOptions.fromPartial(object.advanced)\n            : undefined;\n        message.fileOutputs = ((_f = object.fileOutputs) === null || _f === void 0 ? void 0 : _f.map((e) => exports.EncodedFileOutput.fromPartial(e))) || [];\n        message.streamOutputs = ((_g = object.streamOutputs) === null || _g === void 0 ? void 0 : _g.map((e) => exports.StreamOutput.fromPartial(e))) || [];\n        message.segmentOutputs = ((_h = object.segmentOutputs) === null || _h === void 0 ? void 0 : _h.map((e) => exports.SegmentedFileOutput.fromPartial(e))) || [];\n        message.imageOutputs = ((_j = object.imageOutputs) === null || _j === void 0 ? void 0 : _j.map((e) => exports.ImageOutput.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseParticipantEgressRequest() {\n    return {\n        roomName: \"\",\n        identity: \"\",\n        screenShare: false,\n        preset: undefined,\n        advanced: undefined,\n        fileOutputs: [],\n        streamOutputs: [],\n        segmentOutputs: [],\n        imageOutputs: [],\n    };\n}\nexports.ParticipantEgressRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.roomName !== undefined && message.roomName !== \"\") {\n            writer.uint32(10).string(message.roomName);\n        }\n        if (message.identity !== undefined && message.identity !== \"\") {\n            writer.uint32(18).string(message.identity);\n        }\n        if (message.screenShare === true) {\n            writer.uint32(24).bool(message.screenShare);\n        }\n        if (message.preset !== undefined) {\n            writer.uint32(32).int32(message.preset);\n        }\n        if (message.advanced !== undefined) {\n            exports.EncodingOptions.encode(message.advanced, writer.uint32(42).fork()).ldelim();\n        }\n        if (message.fileOutputs !== undefined && message.fileOutputs.length !== 0) {\n            for (const v of message.fileOutputs) {\n                exports.EncodedFileOutput.encode(v, writer.uint32(50).fork()).ldelim();\n            }\n        }\n        if (message.streamOutputs !== undefined && message.streamOutputs.length !== 0) {\n            for (const v of message.streamOutputs) {\n                exports.StreamOutput.encode(v, writer.uint32(58).fork()).ldelim();\n            }\n        }\n        if (message.segmentOutputs !== undefined && message.segmentOutputs.length !== 0) {\n            for (const v of message.segmentOutputs) {\n                exports.SegmentedFileOutput.encode(v, writer.uint32(66).fork()).ldelim();\n            }\n        }\n        if (message.imageOutputs !== undefined && message.imageOutputs.length !== 0) {\n            for (const v of message.imageOutputs) {\n                exports.ImageOutput.encode(v, writer.uint32(74).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseParticipantEgressRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.roomName = reader.string();\n                    break;\n                case 2:\n                    message.identity = reader.string();\n                    break;\n                case 3:\n                    message.screenShare = reader.bool();\n                    break;\n                case 4:\n                    message.preset = reader.int32();\n                    break;\n                case 5:\n                    message.advanced = exports.EncodingOptions.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.fileOutputs.push(exports.EncodedFileOutput.decode(reader, reader.uint32()));\n                    break;\n                case 7:\n                    message.streamOutputs.push(exports.StreamOutput.decode(reader, reader.uint32()));\n                    break;\n                case 8:\n                    message.segmentOutputs.push(exports.SegmentedFileOutput.decode(reader, reader.uint32()));\n                    break;\n                case 9:\n                    message.imageOutputs.push(exports.ImageOutput.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            roomName: isSet(object.roomName) ? String(object.roomName) : \"\",\n            identity: isSet(object.identity) ? String(object.identity) : \"\",\n            screenShare: isSet(object.screenShare) ? Boolean(object.screenShare) : false,\n            preset: isSet(object.preset) ? encodingOptionsPresetFromJSON(object.preset) : undefined,\n            advanced: isSet(object.advanced) ? exports.EncodingOptions.fromJSON(object.advanced) : undefined,\n            fileOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.fileOutputs)\n                ? object.fileOutputs.map((e) => exports.EncodedFileOutput.fromJSON(e))\n                : [],\n            streamOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.streamOutputs)\n                ? object.streamOutputs.map((e) => exports.StreamOutput.fromJSON(e))\n                : [],\n            segmentOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.segmentOutputs)\n                ? object.segmentOutputs.map((e) => exports.SegmentedFileOutput.fromJSON(e))\n                : [],\n            imageOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.imageOutputs)\n                ? object.imageOutputs.map((e) => exports.ImageOutput.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.roomName !== undefined && (obj.roomName = message.roomName);\n        message.identity !== undefined && (obj.identity = message.identity);\n        message.screenShare !== undefined && (obj.screenShare = message.screenShare);\n        message.preset !== undefined &&\n            (obj.preset = message.preset !== undefined ? encodingOptionsPresetToJSON(message.preset) : undefined);\n        message.advanced !== undefined &&\n            (obj.advanced = message.advanced ? exports.EncodingOptions.toJSON(message.advanced) : undefined);\n        if (message.fileOutputs) {\n            obj.fileOutputs = message.fileOutputs.map((e) => e ? exports.EncodedFileOutput.toJSON(e) : undefined);\n        }\n        else {\n            obj.fileOutputs = [];\n        }\n        if (message.streamOutputs) {\n            obj.streamOutputs = message.streamOutputs.map((e) => e ? exports.StreamOutput.toJSON(e) : undefined);\n        }\n        else {\n            obj.streamOutputs = [];\n        }\n        if (message.segmentOutputs) {\n            obj.segmentOutputs = message.segmentOutputs.map((e) => e ? exports.SegmentedFileOutput.toJSON(e) : undefined);\n        }\n        else {\n            obj.segmentOutputs = [];\n        }\n        if (message.imageOutputs) {\n            obj.imageOutputs = message.imageOutputs.map((e) => e ? exports.ImageOutput.toJSON(e) : undefined);\n        }\n        else {\n            obj.imageOutputs = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        const message = createBaseParticipantEgressRequest();\n        message.roomName = (_a = object.roomName) !== null && _a !== void 0 ? _a : \"\";\n        message.identity = (_b = object.identity) !== null && _b !== void 0 ? _b : \"\";\n        message.screenShare = (_c = object.screenShare) !== null && _c !== void 0 ? _c : false;\n        message.preset = (_d = object.preset) !== null && _d !== void 0 ? _d : undefined;\n        message.advanced = (object.advanced !== undefined && object.advanced !== null)\n            ? exports.EncodingOptions.fromPartial(object.advanced)\n            : undefined;\n        message.fileOutputs = ((_e = object.fileOutputs) === null || _e === void 0 ? void 0 : _e.map((e) => exports.EncodedFileOutput.fromPartial(e))) || [];\n        message.streamOutputs = ((_f = object.streamOutputs) === null || _f === void 0 ? void 0 : _f.map((e) => exports.StreamOutput.fromPartial(e))) || [];\n        message.segmentOutputs = ((_g = object.segmentOutputs) === null || _g === void 0 ? void 0 : _g.map((e) => exports.SegmentedFileOutput.fromPartial(e))) || [];\n        message.imageOutputs = ((_h = object.imageOutputs) === null || _h === void 0 ? void 0 : _h.map((e) => exports.ImageOutput.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseTrackCompositeEgressRequest() {\n    return {\n        roomName: \"\",\n        audioTrackId: \"\",\n        videoTrackId: \"\",\n        file: undefined,\n        stream: undefined,\n        segments: undefined,\n        preset: undefined,\n        advanced: undefined,\n        fileOutputs: [],\n        streamOutputs: [],\n        segmentOutputs: [],\n        imageOutputs: [],\n    };\n}\nexports.TrackCompositeEgressRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.roomName !== undefined && message.roomName !== \"\") {\n            writer.uint32(10).string(message.roomName);\n        }\n        if (message.audioTrackId !== undefined && message.audioTrackId !== \"\") {\n            writer.uint32(18).string(message.audioTrackId);\n        }\n        if (message.videoTrackId !== undefined && message.videoTrackId !== \"\") {\n            writer.uint32(26).string(message.videoTrackId);\n        }\n        if (message.file !== undefined) {\n            exports.EncodedFileOutput.encode(message.file, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.stream !== undefined) {\n            exports.StreamOutput.encode(message.stream, writer.uint32(42).fork()).ldelim();\n        }\n        if (message.segments !== undefined) {\n            exports.SegmentedFileOutput.encode(message.segments, writer.uint32(66).fork()).ldelim();\n        }\n        if (message.preset !== undefined) {\n            writer.uint32(48).int32(message.preset);\n        }\n        if (message.advanced !== undefined) {\n            exports.EncodingOptions.encode(message.advanced, writer.uint32(58).fork()).ldelim();\n        }\n        if (message.fileOutputs !== undefined && message.fileOutputs.length !== 0) {\n            for (const v of message.fileOutputs) {\n                exports.EncodedFileOutput.encode(v, writer.uint32(90).fork()).ldelim();\n            }\n        }\n        if (message.streamOutputs !== undefined && message.streamOutputs.length !== 0) {\n            for (const v of message.streamOutputs) {\n                exports.StreamOutput.encode(v, writer.uint32(98).fork()).ldelim();\n            }\n        }\n        if (message.segmentOutputs !== undefined && message.segmentOutputs.length !== 0) {\n            for (const v of message.segmentOutputs) {\n                exports.SegmentedFileOutput.encode(v, writer.uint32(106).fork()).ldelim();\n            }\n        }\n        if (message.imageOutputs !== undefined && message.imageOutputs.length !== 0) {\n            for (const v of message.imageOutputs) {\n                exports.ImageOutput.encode(v, writer.uint32(114).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTrackCompositeEgressRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.roomName = reader.string();\n                    break;\n                case 2:\n                    message.audioTrackId = reader.string();\n                    break;\n                case 3:\n                    message.videoTrackId = reader.string();\n                    break;\n                case 4:\n                    message.file = exports.EncodedFileOutput.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.stream = exports.StreamOutput.decode(reader, reader.uint32());\n                    break;\n                case 8:\n                    message.segments = exports.SegmentedFileOutput.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.preset = reader.int32();\n                    break;\n                case 7:\n                    message.advanced = exports.EncodingOptions.decode(reader, reader.uint32());\n                    break;\n                case 11:\n                    message.fileOutputs.push(exports.EncodedFileOutput.decode(reader, reader.uint32()));\n                    break;\n                case 12:\n                    message.streamOutputs.push(exports.StreamOutput.decode(reader, reader.uint32()));\n                    break;\n                case 13:\n                    message.segmentOutputs.push(exports.SegmentedFileOutput.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    message.imageOutputs.push(exports.ImageOutput.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            roomName: isSet(object.roomName) ? String(object.roomName) : \"\",\n            audioTrackId: isSet(object.audioTrackId) ? String(object.audioTrackId) : \"\",\n            videoTrackId: isSet(object.videoTrackId) ? String(object.videoTrackId) : \"\",\n            file: isSet(object.file) ? exports.EncodedFileOutput.fromJSON(object.file) : undefined,\n            stream: isSet(object.stream) ? exports.StreamOutput.fromJSON(object.stream) : undefined,\n            segments: isSet(object.segments) ? exports.SegmentedFileOutput.fromJSON(object.segments) : undefined,\n            preset: isSet(object.preset) ? encodingOptionsPresetFromJSON(object.preset) : undefined,\n            advanced: isSet(object.advanced) ? exports.EncodingOptions.fromJSON(object.advanced) : undefined,\n            fileOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.fileOutputs)\n                ? object.fileOutputs.map((e) => exports.EncodedFileOutput.fromJSON(e))\n                : [],\n            streamOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.streamOutputs)\n                ? object.streamOutputs.map((e) => exports.StreamOutput.fromJSON(e))\n                : [],\n            segmentOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.segmentOutputs)\n                ? object.segmentOutputs.map((e) => exports.SegmentedFileOutput.fromJSON(e))\n                : [],\n            imageOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.imageOutputs)\n                ? object.imageOutputs.map((e) => exports.ImageOutput.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.roomName !== undefined && (obj.roomName = message.roomName);\n        message.audioTrackId !== undefined && (obj.audioTrackId = message.audioTrackId);\n        message.videoTrackId !== undefined && (obj.videoTrackId = message.videoTrackId);\n        message.file !== undefined && (obj.file = message.file ? exports.EncodedFileOutput.toJSON(message.file) : undefined);\n        message.stream !== undefined && (obj.stream = message.stream ? exports.StreamOutput.toJSON(message.stream) : undefined);\n        message.segments !== undefined &&\n            (obj.segments = message.segments ? exports.SegmentedFileOutput.toJSON(message.segments) : undefined);\n        message.preset !== undefined &&\n            (obj.preset = message.preset !== undefined ? encodingOptionsPresetToJSON(message.preset) : undefined);\n        message.advanced !== undefined &&\n            (obj.advanced = message.advanced ? exports.EncodingOptions.toJSON(message.advanced) : undefined);\n        if (message.fileOutputs) {\n            obj.fileOutputs = message.fileOutputs.map((e) => e ? exports.EncodedFileOutput.toJSON(e) : undefined);\n        }\n        else {\n            obj.fileOutputs = [];\n        }\n        if (message.streamOutputs) {\n            obj.streamOutputs = message.streamOutputs.map((e) => e ? exports.StreamOutput.toJSON(e) : undefined);\n        }\n        else {\n            obj.streamOutputs = [];\n        }\n        if (message.segmentOutputs) {\n            obj.segmentOutputs = message.segmentOutputs.map((e) => e ? exports.SegmentedFileOutput.toJSON(e) : undefined);\n        }\n        else {\n            obj.segmentOutputs = [];\n        }\n        if (message.imageOutputs) {\n            obj.imageOutputs = message.imageOutputs.map((e) => e ? exports.ImageOutput.toJSON(e) : undefined);\n        }\n        else {\n            obj.imageOutputs = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        const message = createBaseTrackCompositeEgressRequest();\n        message.roomName = (_a = object.roomName) !== null && _a !== void 0 ? _a : \"\";\n        message.audioTrackId = (_b = object.audioTrackId) !== null && _b !== void 0 ? _b : \"\";\n        message.videoTrackId = (_c = object.videoTrackId) !== null && _c !== void 0 ? _c : \"\";\n        message.file = (object.file !== undefined && object.file !== null)\n            ? exports.EncodedFileOutput.fromPartial(object.file)\n            : undefined;\n        message.stream = (object.stream !== undefined && object.stream !== null)\n            ? exports.StreamOutput.fromPartial(object.stream)\n            : undefined;\n        message.segments = (object.segments !== undefined && object.segments !== null)\n            ? exports.SegmentedFileOutput.fromPartial(object.segments)\n            : undefined;\n        message.preset = (_d = object.preset) !== null && _d !== void 0 ? _d : undefined;\n        message.advanced = (object.advanced !== undefined && object.advanced !== null)\n            ? exports.EncodingOptions.fromPartial(object.advanced)\n            : undefined;\n        message.fileOutputs = ((_e = object.fileOutputs) === null || _e === void 0 ? void 0 : _e.map((e) => exports.EncodedFileOutput.fromPartial(e))) || [];\n        message.streamOutputs = ((_f = object.streamOutputs) === null || _f === void 0 ? void 0 : _f.map((e) => exports.StreamOutput.fromPartial(e))) || [];\n        message.segmentOutputs = ((_g = object.segmentOutputs) === null || _g === void 0 ? void 0 : _g.map((e) => exports.SegmentedFileOutput.fromPartial(e))) || [];\n        message.imageOutputs = ((_h = object.imageOutputs) === null || _h === void 0 ? void 0 : _h.map((e) => exports.ImageOutput.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseTrackEgressRequest() {\n    return { roomName: \"\", trackId: \"\", file: undefined, websocketUrl: undefined };\n}\nexports.TrackEgressRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.roomName !== undefined && message.roomName !== \"\") {\n            writer.uint32(10).string(message.roomName);\n        }\n        if (message.trackId !== undefined && message.trackId !== \"\") {\n            writer.uint32(18).string(message.trackId);\n        }\n        if (message.file !== undefined) {\n            exports.DirectFileOutput.encode(message.file, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.websocketUrl !== undefined) {\n            writer.uint32(34).string(message.websocketUrl);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTrackEgressRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.roomName = reader.string();\n                    break;\n                case 2:\n                    message.trackId = reader.string();\n                    break;\n                case 3:\n                    message.file = exports.DirectFileOutput.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.websocketUrl = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            roomName: isSet(object.roomName) ? String(object.roomName) : \"\",\n            trackId: isSet(object.trackId) ? String(object.trackId) : \"\",\n            file: isSet(object.file) ? exports.DirectFileOutput.fromJSON(object.file) : undefined,\n            websocketUrl: isSet(object.websocketUrl) ? String(object.websocketUrl) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.roomName !== undefined && (obj.roomName = message.roomName);\n        message.trackId !== undefined && (obj.trackId = message.trackId);\n        message.file !== undefined && (obj.file = message.file ? exports.DirectFileOutput.toJSON(message.file) : undefined);\n        message.websocketUrl !== undefined && (obj.websocketUrl = message.websocketUrl);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseTrackEgressRequest();\n        message.roomName = (_a = object.roomName) !== null && _a !== void 0 ? _a : \"\";\n        message.trackId = (_b = object.trackId) !== null && _b !== void 0 ? _b : \"\";\n        message.file = (object.file !== undefined && object.file !== null)\n            ? exports.DirectFileOutput.fromPartial(object.file)\n            : undefined;\n        message.websocketUrl = (_c = object.websocketUrl) !== null && _c !== void 0 ? _c : undefined;\n        return message;\n    },\n};\nfunction createBaseEncodedFileOutput() {\n    return {\n        fileType: 0,\n        filepath: \"\",\n        disableManifest: false,\n        s3: undefined,\n        gcp: undefined,\n        azure: undefined,\n        aliOSS: undefined,\n    };\n}\nexports.EncodedFileOutput = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.fileType !== undefined && message.fileType !== 0) {\n            writer.uint32(8).int32(message.fileType);\n        }\n        if (message.filepath !== undefined && message.filepath !== \"\") {\n            writer.uint32(18).string(message.filepath);\n        }\n        if (message.disableManifest === true) {\n            writer.uint32(48).bool(message.disableManifest);\n        }\n        if (message.s3 !== undefined) {\n            exports.S3Upload.encode(message.s3, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.gcp !== undefined) {\n            exports.GCPUpload.encode(message.gcp, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.azure !== undefined) {\n            exports.AzureBlobUpload.encode(message.azure, writer.uint32(42).fork()).ldelim();\n        }\n        if (message.aliOSS !== undefined) {\n            exports.AliOSSUpload.encode(message.aliOSS, writer.uint32(58).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseEncodedFileOutput();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.fileType = reader.int32();\n                    break;\n                case 2:\n                    message.filepath = reader.string();\n                    break;\n                case 6:\n                    message.disableManifest = reader.bool();\n                    break;\n                case 3:\n                    message.s3 = exports.S3Upload.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.gcp = exports.GCPUpload.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.azure = exports.AzureBlobUpload.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.aliOSS = exports.AliOSSUpload.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            fileType: isSet(object.fileType) ? encodedFileTypeFromJSON(object.fileType) : 0,\n            filepath: isSet(object.filepath) ? String(object.filepath) : \"\",\n            disableManifest: isSet(object.disableManifest) ? Boolean(object.disableManifest) : false,\n            s3: isSet(object.s3) ? exports.S3Upload.fromJSON(object.s3) : undefined,\n            gcp: isSet(object.gcp) ? exports.GCPUpload.fromJSON(object.gcp) : undefined,\n            azure: isSet(object.azure) ? exports.AzureBlobUpload.fromJSON(object.azure) : undefined,\n            aliOSS: isSet(object.aliOSS) ? exports.AliOSSUpload.fromJSON(object.aliOSS) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.fileType !== undefined && (obj.fileType = encodedFileTypeToJSON(message.fileType));\n        message.filepath !== undefined && (obj.filepath = message.filepath);\n        message.disableManifest !== undefined && (obj.disableManifest = message.disableManifest);\n        message.s3 !== undefined && (obj.s3 = message.s3 ? exports.S3Upload.toJSON(message.s3) : undefined);\n        message.gcp !== undefined && (obj.gcp = message.gcp ? exports.GCPUpload.toJSON(message.gcp) : undefined);\n        message.azure !== undefined && (obj.azure = message.azure ? exports.AzureBlobUpload.toJSON(message.azure) : undefined);\n        message.aliOSS !== undefined && (obj.aliOSS = message.aliOSS ? exports.AliOSSUpload.toJSON(message.aliOSS) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseEncodedFileOutput();\n        message.fileType = (_a = object.fileType) !== null && _a !== void 0 ? _a : 0;\n        message.filepath = (_b = object.filepath) !== null && _b !== void 0 ? _b : \"\";\n        message.disableManifest = (_c = object.disableManifest) !== null && _c !== void 0 ? _c : false;\n        message.s3 = (object.s3 !== undefined && object.s3 !== null) ? exports.S3Upload.fromPartial(object.s3) : undefined;\n        message.gcp = (object.gcp !== undefined && object.gcp !== null) ? exports.GCPUpload.fromPartial(object.gcp) : undefined;\n        message.azure = (object.azure !== undefined && object.azure !== null)\n            ? exports.AzureBlobUpload.fromPartial(object.azure)\n            : undefined;\n        message.aliOSS = (object.aliOSS !== undefined && object.aliOSS !== null)\n            ? exports.AliOSSUpload.fromPartial(object.aliOSS)\n            : undefined;\n        return message;\n    },\n};\nfunction createBaseSegmentedFileOutput() {\n    return {\n        protocol: 0,\n        filenamePrefix: \"\",\n        playlistName: \"\",\n        livePlaylistName: \"\",\n        segmentDuration: 0,\n        filenameSuffix: 0,\n        disableManifest: false,\n        s3: undefined,\n        gcp: undefined,\n        azure: undefined,\n        aliOSS: undefined,\n    };\n}\nexports.SegmentedFileOutput = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.protocol !== undefined && message.protocol !== 0) {\n            writer.uint32(8).int32(message.protocol);\n        }\n        if (message.filenamePrefix !== undefined && message.filenamePrefix !== \"\") {\n            writer.uint32(18).string(message.filenamePrefix);\n        }\n        if (message.playlistName !== undefined && message.playlistName !== \"\") {\n            writer.uint32(26).string(message.playlistName);\n        }\n        if (message.livePlaylistName !== undefined && message.livePlaylistName !== \"\") {\n            writer.uint32(90).string(message.livePlaylistName);\n        }\n        if (message.segmentDuration !== undefined && message.segmentDuration !== 0) {\n            writer.uint32(32).uint32(message.segmentDuration);\n        }\n        if (message.filenameSuffix !== undefined && message.filenameSuffix !== 0) {\n            writer.uint32(80).int32(message.filenameSuffix);\n        }\n        if (message.disableManifest === true) {\n            writer.uint32(64).bool(message.disableManifest);\n        }\n        if (message.s3 !== undefined) {\n            exports.S3Upload.encode(message.s3, writer.uint32(42).fork()).ldelim();\n        }\n        if (message.gcp !== undefined) {\n            exports.GCPUpload.encode(message.gcp, writer.uint32(50).fork()).ldelim();\n        }\n        if (message.azure !== undefined) {\n            exports.AzureBlobUpload.encode(message.azure, writer.uint32(58).fork()).ldelim();\n        }\n        if (message.aliOSS !== undefined) {\n            exports.AliOSSUpload.encode(message.aliOSS, writer.uint32(74).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSegmentedFileOutput();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.protocol = reader.int32();\n                    break;\n                case 2:\n                    message.filenamePrefix = reader.string();\n                    break;\n                case 3:\n                    message.playlistName = reader.string();\n                    break;\n                case 11:\n                    message.livePlaylistName = reader.string();\n                    break;\n                case 4:\n                    message.segmentDuration = reader.uint32();\n                    break;\n                case 10:\n                    message.filenameSuffix = reader.int32();\n                    break;\n                case 8:\n                    message.disableManifest = reader.bool();\n                    break;\n                case 5:\n                    message.s3 = exports.S3Upload.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.gcp = exports.GCPUpload.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.azure = exports.AzureBlobUpload.decode(reader, reader.uint32());\n                    break;\n                case 9:\n                    message.aliOSS = exports.AliOSSUpload.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            protocol: isSet(object.protocol) ? segmentedFileProtocolFromJSON(object.protocol) : 0,\n            filenamePrefix: isSet(object.filenamePrefix) ? String(object.filenamePrefix) : \"\",\n            playlistName: isSet(object.playlistName) ? String(object.playlistName) : \"\",\n            livePlaylistName: isSet(object.livePlaylistName) ? String(object.livePlaylistName) : \"\",\n            segmentDuration: isSet(object.segmentDuration) ? Number(object.segmentDuration) : 0,\n            filenameSuffix: isSet(object.filenameSuffix) ? segmentedFileSuffixFromJSON(object.filenameSuffix) : 0,\n            disableManifest: isSet(object.disableManifest) ? Boolean(object.disableManifest) : false,\n            s3: isSet(object.s3) ? exports.S3Upload.fromJSON(object.s3) : undefined,\n            gcp: isSet(object.gcp) ? exports.GCPUpload.fromJSON(object.gcp) : undefined,\n            azure: isSet(object.azure) ? exports.AzureBlobUpload.fromJSON(object.azure) : undefined,\n            aliOSS: isSet(object.aliOSS) ? exports.AliOSSUpload.fromJSON(object.aliOSS) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.protocol !== undefined && (obj.protocol = segmentedFileProtocolToJSON(message.protocol));\n        message.filenamePrefix !== undefined && (obj.filenamePrefix = message.filenamePrefix);\n        message.playlistName !== undefined && (obj.playlistName = message.playlistName);\n        message.livePlaylistName !== undefined && (obj.livePlaylistName = message.livePlaylistName);\n        message.segmentDuration !== undefined && (obj.segmentDuration = Math.round(message.segmentDuration));\n        message.filenameSuffix !== undefined && (obj.filenameSuffix = segmentedFileSuffixToJSON(message.filenameSuffix));\n        message.disableManifest !== undefined && (obj.disableManifest = message.disableManifest);\n        message.s3 !== undefined && (obj.s3 = message.s3 ? exports.S3Upload.toJSON(message.s3) : undefined);\n        message.gcp !== undefined && (obj.gcp = message.gcp ? exports.GCPUpload.toJSON(message.gcp) : undefined);\n        message.azure !== undefined && (obj.azure = message.azure ? exports.AzureBlobUpload.toJSON(message.azure) : undefined);\n        message.aliOSS !== undefined && (obj.aliOSS = message.aliOSS ? exports.AliOSSUpload.toJSON(message.aliOSS) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const message = createBaseSegmentedFileOutput();\n        message.protocol = (_a = object.protocol) !== null && _a !== void 0 ? _a : 0;\n        message.filenamePrefix = (_b = object.filenamePrefix) !== null && _b !== void 0 ? _b : \"\";\n        message.playlistName = (_c = object.playlistName) !== null && _c !== void 0 ? _c : \"\";\n        message.livePlaylistName = (_d = object.livePlaylistName) !== null && _d !== void 0 ? _d : \"\";\n        message.segmentDuration = (_e = object.segmentDuration) !== null && _e !== void 0 ? _e : 0;\n        message.filenameSuffix = (_f = object.filenameSuffix) !== null && _f !== void 0 ? _f : 0;\n        message.disableManifest = (_g = object.disableManifest) !== null && _g !== void 0 ? _g : false;\n        message.s3 = (object.s3 !== undefined && object.s3 !== null) ? exports.S3Upload.fromPartial(object.s3) : undefined;\n        message.gcp = (object.gcp !== undefined && object.gcp !== null) ? exports.GCPUpload.fromPartial(object.gcp) : undefined;\n        message.azure = (object.azure !== undefined && object.azure !== null)\n            ? exports.AzureBlobUpload.fromPartial(object.azure)\n            : undefined;\n        message.aliOSS = (object.aliOSS !== undefined && object.aliOSS !== null)\n            ? exports.AliOSSUpload.fromPartial(object.aliOSS)\n            : undefined;\n        return message;\n    },\n};\nfunction createBaseDirectFileOutput() {\n    return { filepath: \"\", disableManifest: false, s3: undefined, gcp: undefined, azure: undefined, aliOSS: undefined };\n}\nexports.DirectFileOutput = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.filepath !== undefined && message.filepath !== \"\") {\n            writer.uint32(10).string(message.filepath);\n        }\n        if (message.disableManifest === true) {\n            writer.uint32(40).bool(message.disableManifest);\n        }\n        if (message.s3 !== undefined) {\n            exports.S3Upload.encode(message.s3, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.gcp !== undefined) {\n            exports.GCPUpload.encode(message.gcp, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.azure !== undefined) {\n            exports.AzureBlobUpload.encode(message.azure, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.aliOSS !== undefined) {\n            exports.AliOSSUpload.encode(message.aliOSS, writer.uint32(50).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDirectFileOutput();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.filepath = reader.string();\n                    break;\n                case 5:\n                    message.disableManifest = reader.bool();\n                    break;\n                case 2:\n                    message.s3 = exports.S3Upload.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.gcp = exports.GCPUpload.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.azure = exports.AzureBlobUpload.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.aliOSS = exports.AliOSSUpload.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            filepath: isSet(object.filepath) ? String(object.filepath) : \"\",\n            disableManifest: isSet(object.disableManifest) ? Boolean(object.disableManifest) : false,\n            s3: isSet(object.s3) ? exports.S3Upload.fromJSON(object.s3) : undefined,\n            gcp: isSet(object.gcp) ? exports.GCPUpload.fromJSON(object.gcp) : undefined,\n            azure: isSet(object.azure) ? exports.AzureBlobUpload.fromJSON(object.azure) : undefined,\n            aliOSS: isSet(object.aliOSS) ? exports.AliOSSUpload.fromJSON(object.aliOSS) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.filepath !== undefined && (obj.filepath = message.filepath);\n        message.disableManifest !== undefined && (obj.disableManifest = message.disableManifest);\n        message.s3 !== undefined && (obj.s3 = message.s3 ? exports.S3Upload.toJSON(message.s3) : undefined);\n        message.gcp !== undefined && (obj.gcp = message.gcp ? exports.GCPUpload.toJSON(message.gcp) : undefined);\n        message.azure !== undefined && (obj.azure = message.azure ? exports.AzureBlobUpload.toJSON(message.azure) : undefined);\n        message.aliOSS !== undefined && (obj.aliOSS = message.aliOSS ? exports.AliOSSUpload.toJSON(message.aliOSS) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseDirectFileOutput();\n        message.filepath = (_a = object.filepath) !== null && _a !== void 0 ? _a : \"\";\n        message.disableManifest = (_b = object.disableManifest) !== null && _b !== void 0 ? _b : false;\n        message.s3 = (object.s3 !== undefined && object.s3 !== null) ? exports.S3Upload.fromPartial(object.s3) : undefined;\n        message.gcp = (object.gcp !== undefined && object.gcp !== null) ? exports.GCPUpload.fromPartial(object.gcp) : undefined;\n        message.azure = (object.azure !== undefined && object.azure !== null)\n            ? exports.AzureBlobUpload.fromPartial(object.azure)\n            : undefined;\n        message.aliOSS = (object.aliOSS !== undefined && object.aliOSS !== null)\n            ? exports.AliOSSUpload.fromPartial(object.aliOSS)\n            : undefined;\n        return message;\n    },\n};\nfunction createBaseImageOutput() {\n    return {\n        captureInterval: 0,\n        width: 0,\n        height: 0,\n        filenamePrefix: \"\",\n        filenameSuffix: 0,\n        imageCodec: 0,\n        disableManifest: false,\n        s3: undefined,\n        gcp: undefined,\n        azure: undefined,\n        aliOSS: undefined,\n    };\n}\nexports.ImageOutput = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.captureInterval !== undefined && message.captureInterval !== 0) {\n            writer.uint32(8).uint32(message.captureInterval);\n        }\n        if (message.width !== undefined && message.width !== 0) {\n            writer.uint32(16).int32(message.width);\n        }\n        if (message.height !== undefined && message.height !== 0) {\n            writer.uint32(24).int32(message.height);\n        }\n        if (message.filenamePrefix !== undefined && message.filenamePrefix !== \"\") {\n            writer.uint32(34).string(message.filenamePrefix);\n        }\n        if (message.filenameSuffix !== undefined && message.filenameSuffix !== 0) {\n            writer.uint32(40).int32(message.filenameSuffix);\n        }\n        if (message.imageCodec !== undefined && message.imageCodec !== 0) {\n            writer.uint32(48).int32(message.imageCodec);\n        }\n        if (message.disableManifest === true) {\n            writer.uint32(56).bool(message.disableManifest);\n        }\n        if (message.s3 !== undefined) {\n            exports.S3Upload.encode(message.s3, writer.uint32(66).fork()).ldelim();\n        }\n        if (message.gcp !== undefined) {\n            exports.GCPUpload.encode(message.gcp, writer.uint32(74).fork()).ldelim();\n        }\n        if (message.azure !== undefined) {\n            exports.AzureBlobUpload.encode(message.azure, writer.uint32(82).fork()).ldelim();\n        }\n        if (message.aliOSS !== undefined) {\n            exports.AliOSSUpload.encode(message.aliOSS, writer.uint32(90).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseImageOutput();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.captureInterval = reader.uint32();\n                    break;\n                case 2:\n                    message.width = reader.int32();\n                    break;\n                case 3:\n                    message.height = reader.int32();\n                    break;\n                case 4:\n                    message.filenamePrefix = reader.string();\n                    break;\n                case 5:\n                    message.filenameSuffix = reader.int32();\n                    break;\n                case 6:\n                    message.imageCodec = reader.int32();\n                    break;\n                case 7:\n                    message.disableManifest = reader.bool();\n                    break;\n                case 8:\n                    message.s3 = exports.S3Upload.decode(reader, reader.uint32());\n                    break;\n                case 9:\n                    message.gcp = exports.GCPUpload.decode(reader, reader.uint32());\n                    break;\n                case 10:\n                    message.azure = exports.AzureBlobUpload.decode(reader, reader.uint32());\n                    break;\n                case 11:\n                    message.aliOSS = exports.AliOSSUpload.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            captureInterval: isSet(object.captureInterval) ? Number(object.captureInterval) : 0,\n            width: isSet(object.width) ? Number(object.width) : 0,\n            height: isSet(object.height) ? Number(object.height) : 0,\n            filenamePrefix: isSet(object.filenamePrefix) ? String(object.filenamePrefix) : \"\",\n            filenameSuffix: isSet(object.filenameSuffix) ? imageFileSuffixFromJSON(object.filenameSuffix) : 0,\n            imageCodec: isSet(object.imageCodec) ? livekit_models_1.imageCodecFromJSON(object.imageCodec) : 0,\n            disableManifest: isSet(object.disableManifest) ? Boolean(object.disableManifest) : false,\n            s3: isSet(object.s3) ? exports.S3Upload.fromJSON(object.s3) : undefined,\n            gcp: isSet(object.gcp) ? exports.GCPUpload.fromJSON(object.gcp) : undefined,\n            azure: isSet(object.azure) ? exports.AzureBlobUpload.fromJSON(object.azure) : undefined,\n            aliOSS: isSet(object.aliOSS) ? exports.AliOSSUpload.fromJSON(object.aliOSS) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.captureInterval !== undefined && (obj.captureInterval = Math.round(message.captureInterval));\n        message.width !== undefined && (obj.width = Math.round(message.width));\n        message.height !== undefined && (obj.height = Math.round(message.height));\n        message.filenamePrefix !== undefined && (obj.filenamePrefix = message.filenamePrefix);\n        message.filenameSuffix !== undefined && (obj.filenameSuffix = imageFileSuffixToJSON(message.filenameSuffix));\n        message.imageCodec !== undefined && (obj.imageCodec = livekit_models_1.imageCodecToJSON(message.imageCodec));\n        message.disableManifest !== undefined && (obj.disableManifest = message.disableManifest);\n        message.s3 !== undefined && (obj.s3 = message.s3 ? exports.S3Upload.toJSON(message.s3) : undefined);\n        message.gcp !== undefined && (obj.gcp = message.gcp ? exports.GCPUpload.toJSON(message.gcp) : undefined);\n        message.azure !== undefined && (obj.azure = message.azure ? exports.AzureBlobUpload.toJSON(message.azure) : undefined);\n        message.aliOSS !== undefined && (obj.aliOSS = message.aliOSS ? exports.AliOSSUpload.toJSON(message.aliOSS) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const message = createBaseImageOutput();\n        message.captureInterval = (_a = object.captureInterval) !== null && _a !== void 0 ? _a : 0;\n        message.width = (_b = object.width) !== null && _b !== void 0 ? _b : 0;\n        message.height = (_c = object.height) !== null && _c !== void 0 ? _c : 0;\n        message.filenamePrefix = (_d = object.filenamePrefix) !== null && _d !== void 0 ? _d : \"\";\n        message.filenameSuffix = (_e = object.filenameSuffix) !== null && _e !== void 0 ? _e : 0;\n        message.imageCodec = (_f = object.imageCodec) !== null && _f !== void 0 ? _f : 0;\n        message.disableManifest = (_g = object.disableManifest) !== null && _g !== void 0 ? _g : false;\n        message.s3 = (object.s3 !== undefined && object.s3 !== null) ? exports.S3Upload.fromPartial(object.s3) : undefined;\n        message.gcp = (object.gcp !== undefined && object.gcp !== null) ? exports.GCPUpload.fromPartial(object.gcp) : undefined;\n        message.azure = (object.azure !== undefined && object.azure !== null)\n            ? exports.AzureBlobUpload.fromPartial(object.azure)\n            : undefined;\n        message.aliOSS = (object.aliOSS !== undefined && object.aliOSS !== null)\n            ? exports.AliOSSUpload.fromPartial(object.aliOSS)\n            : undefined;\n        return message;\n    },\n};\nfunction createBaseS3Upload() {\n    return {\n        accessKey: \"\",\n        secret: \"\",\n        region: \"\",\n        endpoint: \"\",\n        bucket: \"\",\n        forcePathStyle: false,\n        metadata: {},\n        tagging: \"\",\n    };\n}\nexports.S3Upload = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.accessKey !== undefined && message.accessKey !== \"\") {\n            writer.uint32(10).string(message.accessKey);\n        }\n        if (message.secret !== undefined && message.secret !== \"\") {\n            writer.uint32(18).string(message.secret);\n        }\n        if (message.region !== undefined && message.region !== \"\") {\n            writer.uint32(26).string(message.region);\n        }\n        if (message.endpoint !== undefined && message.endpoint !== \"\") {\n            writer.uint32(34).string(message.endpoint);\n        }\n        if (message.bucket !== undefined && message.bucket !== \"\") {\n            writer.uint32(42).string(message.bucket);\n        }\n        if (message.forcePathStyle === true) {\n            writer.uint32(48).bool(message.forcePathStyle);\n        }\n        Object.entries(message.metadata || {}).forEach(([key, value]) => {\n            exports.S3Upload_MetadataEntry.encode({ key: key, value }, writer.uint32(58).fork()).ldelim();\n        });\n        if (message.tagging !== undefined && message.tagging !== \"\") {\n            writer.uint32(66).string(message.tagging);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseS3Upload();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.accessKey = reader.string();\n                    break;\n                case 2:\n                    message.secret = reader.string();\n                    break;\n                case 3:\n                    message.region = reader.string();\n                    break;\n                case 4:\n                    message.endpoint = reader.string();\n                    break;\n                case 5:\n                    message.bucket = reader.string();\n                    break;\n                case 6:\n                    message.forcePathStyle = reader.bool();\n                    break;\n                case 7:\n                    const entry7 = exports.S3Upload_MetadataEntry.decode(reader, reader.uint32());\n                    if (entry7.value !== undefined) {\n                        message.metadata[entry7.key] = entry7.value;\n                    }\n                    break;\n                case 8:\n                    message.tagging = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            accessKey: isSet(object.accessKey) ? String(object.accessKey) : \"\",\n            secret: isSet(object.secret) ? String(object.secret) : \"\",\n            region: isSet(object.region) ? String(object.region) : \"\",\n            endpoint: isSet(object.endpoint) ? String(object.endpoint) : \"\",\n            bucket: isSet(object.bucket) ? String(object.bucket) : \"\",\n            forcePathStyle: isSet(object.forcePathStyle) ? Boolean(object.forcePathStyle) : false,\n            metadata: isObject(object.metadata)\n                ? Object.entries(object.metadata).reduce((acc, [key, value]) => {\n                    acc[key] = String(value);\n                    return acc;\n                }, {})\n                : {},\n            tagging: isSet(object.tagging) ? String(object.tagging) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.accessKey !== undefined && (obj.accessKey = message.accessKey);\n        message.secret !== undefined && (obj.secret = message.secret);\n        message.region !== undefined && (obj.region = message.region);\n        message.endpoint !== undefined && (obj.endpoint = message.endpoint);\n        message.bucket !== undefined && (obj.bucket = message.bucket);\n        message.forcePathStyle !== undefined && (obj.forcePathStyle = message.forcePathStyle);\n        obj.metadata = {};\n        if (message.metadata) {\n            Object.entries(message.metadata).forEach(([k, v]) => {\n                obj.metadata[k] = v;\n            });\n        }\n        message.tagging !== undefined && (obj.tagging = message.tagging);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        const message = createBaseS3Upload();\n        message.accessKey = (_a = object.accessKey) !== null && _a !== void 0 ? _a : \"\";\n        message.secret = (_b = object.secret) !== null && _b !== void 0 ? _b : \"\";\n        message.region = (_c = object.region) !== null && _c !== void 0 ? _c : \"\";\n        message.endpoint = (_d = object.endpoint) !== null && _d !== void 0 ? _d : \"\";\n        message.bucket = (_e = object.bucket) !== null && _e !== void 0 ? _e : \"\";\n        message.forcePathStyle = (_f = object.forcePathStyle) !== null && _f !== void 0 ? _f : false;\n        message.metadata = Object.entries((_g = object.metadata) !== null && _g !== void 0 ? _g : {}).reduce((acc, [key, value]) => {\n            if (value !== undefined) {\n                acc[key] = String(value);\n            }\n            return acc;\n        }, {});\n        message.tagging = (_h = object.tagging) !== null && _h !== void 0 ? _h : \"\";\n        return message;\n    },\n};\nfunction createBaseS3Upload_MetadataEntry() {\n    return { key: \"\", value: \"\" };\n}\nexports.S3Upload_MetadataEntry = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.key !== \"\") {\n            writer.uint32(10).string(message.key);\n        }\n        if (message.value !== \"\") {\n            writer.uint32(18).string(message.value);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseS3Upload_MetadataEntry();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.value = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return { key: isSet(object.key) ? String(object.key) : \"\", value: isSet(object.value) ? String(object.value) : \"\" };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.key !== undefined && (obj.key = message.key);\n        message.value !== undefined && (obj.value = message.value);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseS3Upload_MetadataEntry();\n        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : \"\";\n        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    },\n};\nfunction createBaseGCPUpload() {\n    return { credentials: \"\", bucket: \"\" };\n}\nexports.GCPUpload = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.credentials !== undefined && message.credentials !== \"\") {\n            writer.uint32(10).string(message.credentials);\n        }\n        if (message.bucket !== undefined && message.bucket !== \"\") {\n            writer.uint32(18).string(message.bucket);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGCPUpload();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.credentials = reader.string();\n                    break;\n                case 2:\n                    message.bucket = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            credentials: isSet(object.credentials) ? String(object.credentials) : \"\",\n            bucket: isSet(object.bucket) ? String(object.bucket) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.credentials !== undefined && (obj.credentials = message.credentials);\n        message.bucket !== undefined && (obj.bucket = message.bucket);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseGCPUpload();\n        message.credentials = (_a = object.credentials) !== null && _a !== void 0 ? _a : \"\";\n        message.bucket = (_b = object.bucket) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    },\n};\nfunction createBaseAzureBlobUpload() {\n    return { accountName: \"\", accountKey: \"\", containerName: \"\" };\n}\nexports.AzureBlobUpload = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.accountName !== undefined && message.accountName !== \"\") {\n            writer.uint32(10).string(message.accountName);\n        }\n        if (message.accountKey !== undefined && message.accountKey !== \"\") {\n            writer.uint32(18).string(message.accountKey);\n        }\n        if (message.containerName !== undefined && message.containerName !== \"\") {\n            writer.uint32(26).string(message.containerName);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseAzureBlobUpload();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.accountName = reader.string();\n                    break;\n                case 2:\n                    message.accountKey = reader.string();\n                    break;\n                case 3:\n                    message.containerName = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            accountName: isSet(object.accountName) ? String(object.accountName) : \"\",\n            accountKey: isSet(object.accountKey) ? String(object.accountKey) : \"\",\n            containerName: isSet(object.containerName) ? String(object.containerName) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.accountName !== undefined && (obj.accountName = message.accountName);\n        message.accountKey !== undefined && (obj.accountKey = message.accountKey);\n        message.containerName !== undefined && (obj.containerName = message.containerName);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseAzureBlobUpload();\n        message.accountName = (_a = object.accountName) !== null && _a !== void 0 ? _a : \"\";\n        message.accountKey = (_b = object.accountKey) !== null && _b !== void 0 ? _b : \"\";\n        message.containerName = (_c = object.containerName) !== null && _c !== void 0 ? _c : \"\";\n        return message;\n    },\n};\nfunction createBaseAliOSSUpload() {\n    return { accessKey: \"\", secret: \"\", region: \"\", endpoint: \"\", bucket: \"\" };\n}\nexports.AliOSSUpload = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.accessKey !== undefined && message.accessKey !== \"\") {\n            writer.uint32(10).string(message.accessKey);\n        }\n        if (message.secret !== undefined && message.secret !== \"\") {\n            writer.uint32(18).string(message.secret);\n        }\n        if (message.region !== undefined && message.region !== \"\") {\n            writer.uint32(26).string(message.region);\n        }\n        if (message.endpoint !== undefined && message.endpoint !== \"\") {\n            writer.uint32(34).string(message.endpoint);\n        }\n        if (message.bucket !== undefined && message.bucket !== \"\") {\n            writer.uint32(42).string(message.bucket);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseAliOSSUpload();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.accessKey = reader.string();\n                    break;\n                case 2:\n                    message.secret = reader.string();\n                    break;\n                case 3:\n                    message.region = reader.string();\n                    break;\n                case 4:\n                    message.endpoint = reader.string();\n                    break;\n                case 5:\n                    message.bucket = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            accessKey: isSet(object.accessKey) ? String(object.accessKey) : \"\",\n            secret: isSet(object.secret) ? String(object.secret) : \"\",\n            region: isSet(object.region) ? String(object.region) : \"\",\n            endpoint: isSet(object.endpoint) ? String(object.endpoint) : \"\",\n            bucket: isSet(object.bucket) ? String(object.bucket) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.accessKey !== undefined && (obj.accessKey = message.accessKey);\n        message.secret !== undefined && (obj.secret = message.secret);\n        message.region !== undefined && (obj.region = message.region);\n        message.endpoint !== undefined && (obj.endpoint = message.endpoint);\n        message.bucket !== undefined && (obj.bucket = message.bucket);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e;\n        const message = createBaseAliOSSUpload();\n        message.accessKey = (_a = object.accessKey) !== null && _a !== void 0 ? _a : \"\";\n        message.secret = (_b = object.secret) !== null && _b !== void 0 ? _b : \"\";\n        message.region = (_c = object.region) !== null && _c !== void 0 ? _c : \"\";\n        message.endpoint = (_d = object.endpoint) !== null && _d !== void 0 ? _d : \"\";\n        message.bucket = (_e = object.bucket) !== null && _e !== void 0 ? _e : \"\";\n        return message;\n    },\n};\nfunction createBaseStreamOutput() {\n    return { protocol: 0, urls: [] };\n}\nexports.StreamOutput = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.protocol !== undefined && message.protocol !== 0) {\n            writer.uint32(8).int32(message.protocol);\n        }\n        if (message.urls !== undefined && message.urls.length !== 0) {\n            for (const v of message.urls) {\n                writer.uint32(18).string(v);\n            }\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseStreamOutput();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.protocol = reader.int32();\n                    break;\n                case 2:\n                    message.urls.push(reader.string());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            protocol: isSet(object.protocol) ? streamProtocolFromJSON(object.protocol) : 0,\n            urls: Array.isArray(object === null || object === void 0 ? void 0 : object.urls) ? object.urls.map((e) => String(e)) : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.protocol !== undefined && (obj.protocol = streamProtocolToJSON(message.protocol));\n        if (message.urls) {\n            obj.urls = message.urls.map((e) => e);\n        }\n        else {\n            obj.urls = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseStreamOutput();\n        message.protocol = (_a = object.protocol) !== null && _a !== void 0 ? _a : 0;\n        message.urls = ((_b = object.urls) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];\n        return message;\n    },\n};\nfunction createBaseEncodingOptions() {\n    return {\n        width: 0,\n        height: 0,\n        depth: 0,\n        framerate: 0,\n        audioCodec: 0,\n        audioBitrate: 0,\n        audioFrequency: 0,\n        videoCodec: 0,\n        videoBitrate: 0,\n        keyFrameInterval: 0,\n    };\n}\nexports.EncodingOptions = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.width !== undefined && message.width !== 0) {\n            writer.uint32(8).int32(message.width);\n        }\n        if (message.height !== undefined && message.height !== 0) {\n            writer.uint32(16).int32(message.height);\n        }\n        if (message.depth !== undefined && message.depth !== 0) {\n            writer.uint32(24).int32(message.depth);\n        }\n        if (message.framerate !== undefined && message.framerate !== 0) {\n            writer.uint32(32).int32(message.framerate);\n        }\n        if (message.audioCodec !== undefined && message.audioCodec !== 0) {\n            writer.uint32(40).int32(message.audioCodec);\n        }\n        if (message.audioBitrate !== undefined && message.audioBitrate !== 0) {\n            writer.uint32(48).int32(message.audioBitrate);\n        }\n        if (message.audioFrequency !== undefined && message.audioFrequency !== 0) {\n            writer.uint32(56).int32(message.audioFrequency);\n        }\n        if (message.videoCodec !== undefined && message.videoCodec !== 0) {\n            writer.uint32(64).int32(message.videoCodec);\n        }\n        if (message.videoBitrate !== undefined && message.videoBitrate !== 0) {\n            writer.uint32(72).int32(message.videoBitrate);\n        }\n        if (message.keyFrameInterval !== undefined && message.keyFrameInterval !== 0) {\n            writer.uint32(81).double(message.keyFrameInterval);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseEncodingOptions();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.width = reader.int32();\n                    break;\n                case 2:\n                    message.height = reader.int32();\n                    break;\n                case 3:\n                    message.depth = reader.int32();\n                    break;\n                case 4:\n                    message.framerate = reader.int32();\n                    break;\n                case 5:\n                    message.audioCodec = reader.int32();\n                    break;\n                case 6:\n                    message.audioBitrate = reader.int32();\n                    break;\n                case 7:\n                    message.audioFrequency = reader.int32();\n                    break;\n                case 8:\n                    message.videoCodec = reader.int32();\n                    break;\n                case 9:\n                    message.videoBitrate = reader.int32();\n                    break;\n                case 10:\n                    message.keyFrameInterval = reader.double();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            width: isSet(object.width) ? Number(object.width) : 0,\n            height: isSet(object.height) ? Number(object.height) : 0,\n            depth: isSet(object.depth) ? Number(object.depth) : 0,\n            framerate: isSet(object.framerate) ? Number(object.framerate) : 0,\n            audioCodec: isSet(object.audioCodec) ? livekit_models_1.audioCodecFromJSON(object.audioCodec) : 0,\n            audioBitrate: isSet(object.audioBitrate) ? Number(object.audioBitrate) : 0,\n            audioFrequency: isSet(object.audioFrequency) ? Number(object.audioFrequency) : 0,\n            videoCodec: isSet(object.videoCodec) ? livekit_models_1.videoCodecFromJSON(object.videoCodec) : 0,\n            videoBitrate: isSet(object.videoBitrate) ? Number(object.videoBitrate) : 0,\n            keyFrameInterval: isSet(object.keyFrameInterval) ? Number(object.keyFrameInterval) : 0,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.width !== undefined && (obj.width = Math.round(message.width));\n        message.height !== undefined && (obj.height = Math.round(message.height));\n        message.depth !== undefined && (obj.depth = Math.round(message.depth));\n        message.framerate !== undefined && (obj.framerate = Math.round(message.framerate));\n        message.audioCodec !== undefined && (obj.audioCodec = livekit_models_1.audioCodecToJSON(message.audioCodec));\n        message.audioBitrate !== undefined && (obj.audioBitrate = Math.round(message.audioBitrate));\n        message.audioFrequency !== undefined && (obj.audioFrequency = Math.round(message.audioFrequency));\n        message.videoCodec !== undefined && (obj.videoCodec = livekit_models_1.videoCodecToJSON(message.videoCodec));\n        message.videoBitrate !== undefined && (obj.videoBitrate = Math.round(message.videoBitrate));\n        message.keyFrameInterval !== undefined && (obj.keyFrameInterval = message.keyFrameInterval);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n        const message = createBaseEncodingOptions();\n        message.width = (_a = object.width) !== null && _a !== void 0 ? _a : 0;\n        message.height = (_b = object.height) !== null && _b !== void 0 ? _b : 0;\n        message.depth = (_c = object.depth) !== null && _c !== void 0 ? _c : 0;\n        message.framerate = (_d = object.framerate) !== null && _d !== void 0 ? _d : 0;\n        message.audioCodec = (_e = object.audioCodec) !== null && _e !== void 0 ? _e : 0;\n        message.audioBitrate = (_f = object.audioBitrate) !== null && _f !== void 0 ? _f : 0;\n        message.audioFrequency = (_g = object.audioFrequency) !== null && _g !== void 0 ? _g : 0;\n        message.videoCodec = (_h = object.videoCodec) !== null && _h !== void 0 ? _h : 0;\n        message.videoBitrate = (_j = object.videoBitrate) !== null && _j !== void 0 ? _j : 0;\n        message.keyFrameInterval = (_k = object.keyFrameInterval) !== null && _k !== void 0 ? _k : 0;\n        return message;\n    },\n};\nfunction createBaseUpdateLayoutRequest() {\n    return { egressId: \"\", layout: \"\" };\n}\nexports.UpdateLayoutRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.egressId !== undefined && message.egressId !== \"\") {\n            writer.uint32(10).string(message.egressId);\n        }\n        if (message.layout !== undefined && message.layout !== \"\") {\n            writer.uint32(18).string(message.layout);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUpdateLayoutRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.egressId = reader.string();\n                    break;\n                case 2:\n                    message.layout = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            egressId: isSet(object.egressId) ? String(object.egressId) : \"\",\n            layout: isSet(object.layout) ? String(object.layout) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.egressId !== undefined && (obj.egressId = message.egressId);\n        message.layout !== undefined && (obj.layout = message.layout);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseUpdateLayoutRequest();\n        message.egressId = (_a = object.egressId) !== null && _a !== void 0 ? _a : \"\";\n        message.layout = (_b = object.layout) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    },\n};\nfunction createBaseUpdateStreamRequest() {\n    return { egressId: \"\", addOutputUrls: [], removeOutputUrls: [] };\n}\nexports.UpdateStreamRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.egressId !== undefined && message.egressId !== \"\") {\n            writer.uint32(10).string(message.egressId);\n        }\n        if (message.addOutputUrls !== undefined && message.addOutputUrls.length !== 0) {\n            for (const v of message.addOutputUrls) {\n                writer.uint32(18).string(v);\n            }\n        }\n        if (message.removeOutputUrls !== undefined && message.removeOutputUrls.length !== 0) {\n            for (const v of message.removeOutputUrls) {\n                writer.uint32(26).string(v);\n            }\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUpdateStreamRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.egressId = reader.string();\n                    break;\n                case 2:\n                    message.addOutputUrls.push(reader.string());\n                    break;\n                case 3:\n                    message.removeOutputUrls.push(reader.string());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            egressId: isSet(object.egressId) ? String(object.egressId) : \"\",\n            addOutputUrls: Array.isArray(object === null || object === void 0 ? void 0 : object.addOutputUrls) ? object.addOutputUrls.map((e) => String(e)) : [],\n            removeOutputUrls: Array.isArray(object === null || object === void 0 ? void 0 : object.removeOutputUrls)\n                ? object.removeOutputUrls.map((e) => String(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.egressId !== undefined && (obj.egressId = message.egressId);\n        if (message.addOutputUrls) {\n            obj.addOutputUrls = message.addOutputUrls.map((e) => e);\n        }\n        else {\n            obj.addOutputUrls = [];\n        }\n        if (message.removeOutputUrls) {\n            obj.removeOutputUrls = message.removeOutputUrls.map((e) => e);\n        }\n        else {\n            obj.removeOutputUrls = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseUpdateStreamRequest();\n        message.egressId = (_a = object.egressId) !== null && _a !== void 0 ? _a : \"\";\n        message.addOutputUrls = ((_b = object.addOutputUrls) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];\n        message.removeOutputUrls = ((_c = object.removeOutputUrls) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];\n        return message;\n    },\n};\nfunction createBaseUpdateOutputsRequest() {\n    return { egressId: \"\", addImageOutputs: [], removeImageOutputs: [] };\n}\nexports.UpdateOutputsRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.egressId !== undefined && message.egressId !== \"\") {\n            writer.uint32(10).string(message.egressId);\n        }\n        if (message.addImageOutputs !== undefined && message.addImageOutputs.length !== 0) {\n            for (const v of message.addImageOutputs) {\n                exports.ImageOutput.encode(v, writer.uint32(18).fork()).ldelim();\n            }\n        }\n        if (message.removeImageOutputs !== undefined && message.removeImageOutputs.length !== 0) {\n            for (const v of message.removeImageOutputs) {\n                exports.ImageOutput.encode(v, writer.uint32(26).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUpdateOutputsRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.egressId = reader.string();\n                    break;\n                case 2:\n                    message.addImageOutputs.push(exports.ImageOutput.decode(reader, reader.uint32()));\n                    break;\n                case 3:\n                    message.removeImageOutputs.push(exports.ImageOutput.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            egressId: isSet(object.egressId) ? String(object.egressId) : \"\",\n            addImageOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.addImageOutputs)\n                ? object.addImageOutputs.map((e) => exports.ImageOutput.fromJSON(e))\n                : [],\n            removeImageOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.removeImageOutputs)\n                ? object.removeImageOutputs.map((e) => exports.ImageOutput.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.egressId !== undefined && (obj.egressId = message.egressId);\n        if (message.addImageOutputs) {\n            obj.addImageOutputs = message.addImageOutputs.map((e) => e ? exports.ImageOutput.toJSON(e) : undefined);\n        }\n        else {\n            obj.addImageOutputs = [];\n        }\n        if (message.removeImageOutputs) {\n            obj.removeImageOutputs = message.removeImageOutputs.map((e) => e ? exports.ImageOutput.toJSON(e) : undefined);\n        }\n        else {\n            obj.removeImageOutputs = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseUpdateOutputsRequest();\n        message.egressId = (_a = object.egressId) !== null && _a !== void 0 ? _a : \"\";\n        message.addImageOutputs = ((_b = object.addImageOutputs) === null || _b === void 0 ? void 0 : _b.map((e) => exports.ImageOutput.fromPartial(e))) || [];\n        message.removeImageOutputs = ((_c = object.removeImageOutputs) === null || _c === void 0 ? void 0 : _c.map((e) => exports.ImageOutput.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseListEgressRequest() {\n    return { roomName: \"\", egressId: \"\", active: false };\n}\nexports.ListEgressRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.roomName !== undefined && message.roomName !== \"\") {\n            writer.uint32(10).string(message.roomName);\n        }\n        if (message.egressId !== undefined && message.egressId !== \"\") {\n            writer.uint32(18).string(message.egressId);\n        }\n        if (message.active === true) {\n            writer.uint32(24).bool(message.active);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseListEgressRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.roomName = reader.string();\n                    break;\n                case 2:\n                    message.egressId = reader.string();\n                    break;\n                case 3:\n                    message.active = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            roomName: isSet(object.roomName) ? String(object.roomName) : \"\",\n            egressId: isSet(object.egressId) ? String(object.egressId) : \"\",\n            active: isSet(object.active) ? Boolean(object.active) : false,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.roomName !== undefined && (obj.roomName = message.roomName);\n        message.egressId !== undefined && (obj.egressId = message.egressId);\n        message.active !== undefined && (obj.active = message.active);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseListEgressRequest();\n        message.roomName = (_a = object.roomName) !== null && _a !== void 0 ? _a : \"\";\n        message.egressId = (_b = object.egressId) !== null && _b !== void 0 ? _b : \"\";\n        message.active = (_c = object.active) !== null && _c !== void 0 ? _c : false;\n        return message;\n    },\n};\nfunction createBaseListEgressResponse() {\n    return { items: [] };\n}\nexports.ListEgressResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.items !== undefined && message.items.length !== 0) {\n            for (const v of message.items) {\n                exports.EgressInfo.encode(v, writer.uint32(10).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseListEgressResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.items.push(exports.EgressInfo.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return { items: Array.isArray(object === null || object === void 0 ? void 0 : object.items) ? object.items.map((e) => exports.EgressInfo.fromJSON(e)) : [] };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.items) {\n            obj.items = message.items.map((e) => e ? exports.EgressInfo.toJSON(e) : undefined);\n        }\n        else {\n            obj.items = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseListEgressResponse();\n        message.items = ((_a = object.items) === null || _a === void 0 ? void 0 : _a.map((e) => exports.EgressInfo.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseStopEgressRequest() {\n    return { egressId: \"\" };\n}\nexports.StopEgressRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.egressId !== undefined && message.egressId !== \"\") {\n            writer.uint32(10).string(message.egressId);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseStopEgressRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.egressId = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return { egressId: isSet(object.egressId) ? String(object.egressId) : \"\" };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.egressId !== undefined && (obj.egressId = message.egressId);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseStopEgressRequest();\n        message.egressId = (_a = object.egressId) !== null && _a !== void 0 ? _a : \"\";\n        return message;\n    },\n};\nfunction createBaseEgressInfo() {\n    return {\n        egressId: \"\",\n        roomId: \"\",\n        roomName: \"\",\n        status: 0,\n        startedAt: 0,\n        endedAt: 0,\n        updatedAt: 0,\n        error: \"\",\n        roomComposite: undefined,\n        web: undefined,\n        participant: undefined,\n        trackComposite: undefined,\n        track: undefined,\n        stream: undefined,\n        file: undefined,\n        segments: undefined,\n        streamResults: [],\n        fileResults: [],\n        segmentResults: [],\n        imageResults: [],\n    };\n}\nexports.EgressInfo = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.egressId !== undefined && message.egressId !== \"\") {\n            writer.uint32(10).string(message.egressId);\n        }\n        if (message.roomId !== undefined && message.roomId !== \"\") {\n            writer.uint32(18).string(message.roomId);\n        }\n        if (message.roomName !== undefined && message.roomName !== \"\") {\n            writer.uint32(106).string(message.roomName);\n        }\n        if (message.status !== undefined && message.status !== 0) {\n            writer.uint32(24).int32(message.status);\n        }\n        if (message.startedAt !== undefined && message.startedAt !== 0) {\n            writer.uint32(80).int64(message.startedAt);\n        }\n        if (message.endedAt !== undefined && message.endedAt !== 0) {\n            writer.uint32(88).int64(message.endedAt);\n        }\n        if (message.updatedAt !== undefined && message.updatedAt !== 0) {\n            writer.uint32(144).int64(message.updatedAt);\n        }\n        if (message.error !== undefined && message.error !== \"\") {\n            writer.uint32(74).string(message.error);\n        }\n        if (message.roomComposite !== undefined) {\n            exports.RoomCompositeEgressRequest.encode(message.roomComposite, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.web !== undefined) {\n            exports.WebEgressRequest.encode(message.web, writer.uint32(114).fork()).ldelim();\n        }\n        if (message.participant !== undefined) {\n            exports.ParticipantEgressRequest.encode(message.participant, writer.uint32(154).fork()).ldelim();\n        }\n        if (message.trackComposite !== undefined) {\n            exports.TrackCompositeEgressRequest.encode(message.trackComposite, writer.uint32(42).fork()).ldelim();\n        }\n        if (message.track !== undefined) {\n            exports.TrackEgressRequest.encode(message.track, writer.uint32(50).fork()).ldelim();\n        }\n        if (message.stream !== undefined) {\n            exports.StreamInfoList.encode(message.stream, writer.uint32(58).fork()).ldelim();\n        }\n        if (message.file !== undefined) {\n            exports.FileInfo.encode(message.file, writer.uint32(66).fork()).ldelim();\n        }\n        if (message.segments !== undefined) {\n            exports.SegmentsInfo.encode(message.segments, writer.uint32(98).fork()).ldelim();\n        }\n        if (message.streamResults !== undefined && message.streamResults.length !== 0) {\n            for (const v of message.streamResults) {\n                exports.StreamInfo.encode(v, writer.uint32(122).fork()).ldelim();\n            }\n        }\n        if (message.fileResults !== undefined && message.fileResults.length !== 0) {\n            for (const v of message.fileResults) {\n                exports.FileInfo.encode(v, writer.uint32(130).fork()).ldelim();\n            }\n        }\n        if (message.segmentResults !== undefined && message.segmentResults.length !== 0) {\n            for (const v of message.segmentResults) {\n                exports.SegmentsInfo.encode(v, writer.uint32(138).fork()).ldelim();\n            }\n        }\n        if (message.imageResults !== undefined && message.imageResults.length !== 0) {\n            for (const v of message.imageResults) {\n                exports.ImagesInfo.encode(v, writer.uint32(162).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseEgressInfo();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.egressId = reader.string();\n                    break;\n                case 2:\n                    message.roomId = reader.string();\n                    break;\n                case 13:\n                    message.roomName = reader.string();\n                    break;\n                case 3:\n                    message.status = reader.int32();\n                    break;\n                case 10:\n                    message.startedAt = longToNumber(reader.int64());\n                    break;\n                case 11:\n                    message.endedAt = longToNumber(reader.int64());\n                    break;\n                case 18:\n                    message.updatedAt = longToNumber(reader.int64());\n                    break;\n                case 9:\n                    message.error = reader.string();\n                    break;\n                case 4:\n                    message.roomComposite = exports.RoomCompositeEgressRequest.decode(reader, reader.uint32());\n                    break;\n                case 14:\n                    message.web = exports.WebEgressRequest.decode(reader, reader.uint32());\n                    break;\n                case 19:\n                    message.participant = exports.ParticipantEgressRequest.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.trackComposite = exports.TrackCompositeEgressRequest.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.track = exports.TrackEgressRequest.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.stream = exports.StreamInfoList.decode(reader, reader.uint32());\n                    break;\n                case 8:\n                    message.file = exports.FileInfo.decode(reader, reader.uint32());\n                    break;\n                case 12:\n                    message.segments = exports.SegmentsInfo.decode(reader, reader.uint32());\n                    break;\n                case 15:\n                    message.streamResults.push(exports.StreamInfo.decode(reader, reader.uint32()));\n                    break;\n                case 16:\n                    message.fileResults.push(exports.FileInfo.decode(reader, reader.uint32()));\n                    break;\n                case 17:\n                    message.segmentResults.push(exports.SegmentsInfo.decode(reader, reader.uint32()));\n                    break;\n                case 20:\n                    message.imageResults.push(exports.ImagesInfo.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            egressId: isSet(object.egressId) ? String(object.egressId) : \"\",\n            roomId: isSet(object.roomId) ? String(object.roomId) : \"\",\n            roomName: isSet(object.roomName) ? String(object.roomName) : \"\",\n            status: isSet(object.status) ? egressStatusFromJSON(object.status) : 0,\n            startedAt: isSet(object.startedAt) ? Number(object.startedAt) : 0,\n            endedAt: isSet(object.endedAt) ? Number(object.endedAt) : 0,\n            updatedAt: isSet(object.updatedAt) ? Number(object.updatedAt) : 0,\n            error: isSet(object.error) ? String(object.error) : \"\",\n            roomComposite: isSet(object.roomComposite)\n                ? exports.RoomCompositeEgressRequest.fromJSON(object.roomComposite)\n                : undefined,\n            web: isSet(object.web) ? exports.WebEgressRequest.fromJSON(object.web) : undefined,\n            participant: isSet(object.participant) ? exports.ParticipantEgressRequest.fromJSON(object.participant) : undefined,\n            trackComposite: isSet(object.trackComposite)\n                ? exports.TrackCompositeEgressRequest.fromJSON(object.trackComposite)\n                : undefined,\n            track: isSet(object.track) ? exports.TrackEgressRequest.fromJSON(object.track) : undefined,\n            stream: isSet(object.stream) ? exports.StreamInfoList.fromJSON(object.stream) : undefined,\n            file: isSet(object.file) ? exports.FileInfo.fromJSON(object.file) : undefined,\n            segments: isSet(object.segments) ? exports.SegmentsInfo.fromJSON(object.segments) : undefined,\n            streamResults: Array.isArray(object === null || object === void 0 ? void 0 : object.streamResults)\n                ? object.streamResults.map((e) => exports.StreamInfo.fromJSON(e))\n                : [],\n            fileResults: Array.isArray(object === null || object === void 0 ? void 0 : object.fileResults) ? object.fileResults.map((e) => exports.FileInfo.fromJSON(e)) : [],\n            segmentResults: Array.isArray(object === null || object === void 0 ? void 0 : object.segmentResults)\n                ? object.segmentResults.map((e) => exports.SegmentsInfo.fromJSON(e))\n                : [],\n            imageResults: Array.isArray(object === null || object === void 0 ? void 0 : object.imageResults)\n                ? object.imageResults.map((e) => exports.ImagesInfo.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.egressId !== undefined && (obj.egressId = message.egressId);\n        message.roomId !== undefined && (obj.roomId = message.roomId);\n        message.roomName !== undefined && (obj.roomName = message.roomName);\n        message.status !== undefined && (obj.status = egressStatusToJSON(message.status));\n        message.startedAt !== undefined && (obj.startedAt = Math.round(message.startedAt));\n        message.endedAt !== undefined && (obj.endedAt = Math.round(message.endedAt));\n        message.updatedAt !== undefined && (obj.updatedAt = Math.round(message.updatedAt));\n        message.error !== undefined && (obj.error = message.error);\n        message.roomComposite !== undefined &&\n            (obj.roomComposite = message.roomComposite\n                ? exports.RoomCompositeEgressRequest.toJSON(message.roomComposite)\n                : undefined);\n        message.web !== undefined && (obj.web = message.web ? exports.WebEgressRequest.toJSON(message.web) : undefined);\n        message.participant !== undefined &&\n            (obj.participant = message.participant ? exports.ParticipantEgressRequest.toJSON(message.participant) : undefined);\n        message.trackComposite !== undefined && (obj.trackComposite = message.trackComposite\n            ? exports.TrackCompositeEgressRequest.toJSON(message.trackComposite)\n            : undefined);\n        message.track !== undefined && (obj.track = message.track ? exports.TrackEgressRequest.toJSON(message.track) : undefined);\n        message.stream !== undefined && (obj.stream = message.stream ? exports.StreamInfoList.toJSON(message.stream) : undefined);\n        message.file !== undefined && (obj.file = message.file ? exports.FileInfo.toJSON(message.file) : undefined);\n        message.segments !== undefined &&\n            (obj.segments = message.segments ? exports.SegmentsInfo.toJSON(message.segments) : undefined);\n        if (message.streamResults) {\n            obj.streamResults = message.streamResults.map((e) => e ? exports.StreamInfo.toJSON(e) : undefined);\n        }\n        else {\n            obj.streamResults = [];\n        }\n        if (message.fileResults) {\n            obj.fileResults = message.fileResults.map((e) => e ? exports.FileInfo.toJSON(e) : undefined);\n        }\n        else {\n            obj.fileResults = [];\n        }\n        if (message.segmentResults) {\n            obj.segmentResults = message.segmentResults.map((e) => e ? exports.SegmentsInfo.toJSON(e) : undefined);\n        }\n        else {\n            obj.segmentResults = [];\n        }\n        if (message.imageResults) {\n            obj.imageResults = message.imageResults.map((e) => e ? exports.ImagesInfo.toJSON(e) : undefined);\n        }\n        else {\n            obj.imageResults = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n        const message = createBaseEgressInfo();\n        message.egressId = (_a = object.egressId) !== null && _a !== void 0 ? _a : \"\";\n        message.roomId = (_b = object.roomId) !== null && _b !== void 0 ? _b : \"\";\n        message.roomName = (_c = object.roomName) !== null && _c !== void 0 ? _c : \"\";\n        message.status = (_d = object.status) !== null && _d !== void 0 ? _d : 0;\n        message.startedAt = (_e = object.startedAt) !== null && _e !== void 0 ? _e : 0;\n        message.endedAt = (_f = object.endedAt) !== null && _f !== void 0 ? _f : 0;\n        message.updatedAt = (_g = object.updatedAt) !== null && _g !== void 0 ? _g : 0;\n        message.error = (_h = object.error) !== null && _h !== void 0 ? _h : \"\";\n        message.roomComposite = (object.roomComposite !== undefined && object.roomComposite !== null)\n            ? exports.RoomCompositeEgressRequest.fromPartial(object.roomComposite)\n            : undefined;\n        message.web = (object.web !== undefined && object.web !== null)\n            ? exports.WebEgressRequest.fromPartial(object.web)\n            : undefined;\n        message.participant = (object.participant !== undefined && object.participant !== null)\n            ? exports.ParticipantEgressRequest.fromPartial(object.participant)\n            : undefined;\n        message.trackComposite = (object.trackComposite !== undefined && object.trackComposite !== null)\n            ? exports.TrackCompositeEgressRequest.fromPartial(object.trackComposite)\n            : undefined;\n        message.track = (object.track !== undefined && object.track !== null)\n            ? exports.TrackEgressRequest.fromPartial(object.track)\n            : undefined;\n        message.stream = (object.stream !== undefined && object.stream !== null)\n            ? exports.StreamInfoList.fromPartial(object.stream)\n            : undefined;\n        message.file = (object.file !== undefined && object.file !== null) ? exports.FileInfo.fromPartial(object.file) : undefined;\n        message.segments = (object.segments !== undefined && object.segments !== null)\n            ? exports.SegmentsInfo.fromPartial(object.segments)\n            : undefined;\n        message.streamResults = ((_j = object.streamResults) === null || _j === void 0 ? void 0 : _j.map((e) => exports.StreamInfo.fromPartial(e))) || [];\n        message.fileResults = ((_k = object.fileResults) === null || _k === void 0 ? void 0 : _k.map((e) => exports.FileInfo.fromPartial(e))) || [];\n        message.segmentResults = ((_l = object.segmentResults) === null || _l === void 0 ? void 0 : _l.map((e) => exports.SegmentsInfo.fromPartial(e))) || [];\n        message.imageResults = ((_m = object.imageResults) === null || _m === void 0 ? void 0 : _m.map((e) => exports.ImagesInfo.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseStreamInfoList() {\n    return { info: [] };\n}\nexports.StreamInfoList = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.info !== undefined && message.info.length !== 0) {\n            for (const v of message.info) {\n                exports.StreamInfo.encode(v, writer.uint32(10).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseStreamInfoList();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.info.push(exports.StreamInfo.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return { info: Array.isArray(object === null || object === void 0 ? void 0 : object.info) ? object.info.map((e) => exports.StreamInfo.fromJSON(e)) : [] };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.info) {\n            obj.info = message.info.map((e) => e ? exports.StreamInfo.toJSON(e) : undefined);\n        }\n        else {\n            obj.info = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseStreamInfoList();\n        message.info = ((_a = object.info) === null || _a === void 0 ? void 0 : _a.map((e) => exports.StreamInfo.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseStreamInfo() {\n    return { url: \"\", startedAt: 0, endedAt: 0, duration: 0, status: 0, error: \"\" };\n}\nexports.StreamInfo = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.url !== undefined && message.url !== \"\") {\n            writer.uint32(10).string(message.url);\n        }\n        if (message.startedAt !== undefined && message.startedAt !== 0) {\n            writer.uint32(16).int64(message.startedAt);\n        }\n        if (message.endedAt !== undefined && message.endedAt !== 0) {\n            writer.uint32(24).int64(message.endedAt);\n        }\n        if (message.duration !== undefined && message.duration !== 0) {\n            writer.uint32(32).int64(message.duration);\n        }\n        if (message.status !== undefined && message.status !== 0) {\n            writer.uint32(40).int32(message.status);\n        }\n        if (message.error !== undefined && message.error !== \"\") {\n            writer.uint32(50).string(message.error);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseStreamInfo();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.url = reader.string();\n                    break;\n                case 2:\n                    message.startedAt = longToNumber(reader.int64());\n                    break;\n                case 3:\n                    message.endedAt = longToNumber(reader.int64());\n                    break;\n                case 4:\n                    message.duration = longToNumber(reader.int64());\n                    break;\n                case 5:\n                    message.status = reader.int32();\n                    break;\n                case 6:\n                    message.error = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            url: isSet(object.url) ? String(object.url) : \"\",\n            startedAt: isSet(object.startedAt) ? Number(object.startedAt) : 0,\n            endedAt: isSet(object.endedAt) ? Number(object.endedAt) : 0,\n            duration: isSet(object.duration) ? Number(object.duration) : 0,\n            status: isSet(object.status) ? streamInfo_StatusFromJSON(object.status) : 0,\n            error: isSet(object.error) ? String(object.error) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.url !== undefined && (obj.url = message.url);\n        message.startedAt !== undefined && (obj.startedAt = Math.round(message.startedAt));\n        message.endedAt !== undefined && (obj.endedAt = Math.round(message.endedAt));\n        message.duration !== undefined && (obj.duration = Math.round(message.duration));\n        message.status !== undefined && (obj.status = streamInfo_StatusToJSON(message.status));\n        message.error !== undefined && (obj.error = message.error);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f;\n        const message = createBaseStreamInfo();\n        message.url = (_a = object.url) !== null && _a !== void 0 ? _a : \"\";\n        message.startedAt = (_b = object.startedAt) !== null && _b !== void 0 ? _b : 0;\n        message.endedAt = (_c = object.endedAt) !== null && _c !== void 0 ? _c : 0;\n        message.duration = (_d = object.duration) !== null && _d !== void 0 ? _d : 0;\n        message.status = (_e = object.status) !== null && _e !== void 0 ? _e : 0;\n        message.error = (_f = object.error) !== null && _f !== void 0 ? _f : \"\";\n        return message;\n    },\n};\nfunction createBaseFileInfo() {\n    return { filename: \"\", startedAt: 0, endedAt: 0, duration: 0, size: 0, location: \"\" };\n}\nexports.FileInfo = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.filename !== undefined && message.filename !== \"\") {\n            writer.uint32(10).string(message.filename);\n        }\n        if (message.startedAt !== undefined && message.startedAt !== 0) {\n            writer.uint32(16).int64(message.startedAt);\n        }\n        if (message.endedAt !== undefined && message.endedAt !== 0) {\n            writer.uint32(24).int64(message.endedAt);\n        }\n        if (message.duration !== undefined && message.duration !== 0) {\n            writer.uint32(48).int64(message.duration);\n        }\n        if (message.size !== undefined && message.size !== 0) {\n            writer.uint32(32).int64(message.size);\n        }\n        if (message.location !== undefined && message.location !== \"\") {\n            writer.uint32(42).string(message.location);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseFileInfo();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.filename = reader.string();\n                    break;\n                case 2:\n                    message.startedAt = longToNumber(reader.int64());\n                    break;\n                case 3:\n                    message.endedAt = longToNumber(reader.int64());\n                    break;\n                case 6:\n                    message.duration = longToNumber(reader.int64());\n                    break;\n                case 4:\n                    message.size = longToNumber(reader.int64());\n                    break;\n                case 5:\n                    message.location = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            filename: isSet(object.filename) ? String(object.filename) : \"\",\n            startedAt: isSet(object.startedAt) ? Number(object.startedAt) : 0,\n            endedAt: isSet(object.endedAt) ? Number(object.endedAt) : 0,\n            duration: isSet(object.duration) ? Number(object.duration) : 0,\n            size: isSet(object.size) ? Number(object.size) : 0,\n            location: isSet(object.location) ? String(object.location) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.filename !== undefined && (obj.filename = message.filename);\n        message.startedAt !== undefined && (obj.startedAt = Math.round(message.startedAt));\n        message.endedAt !== undefined && (obj.endedAt = Math.round(message.endedAt));\n        message.duration !== undefined && (obj.duration = Math.round(message.duration));\n        message.size !== undefined && (obj.size = Math.round(message.size));\n        message.location !== undefined && (obj.location = message.location);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f;\n        const message = createBaseFileInfo();\n        message.filename = (_a = object.filename) !== null && _a !== void 0 ? _a : \"\";\n        message.startedAt = (_b = object.startedAt) !== null && _b !== void 0 ? _b : 0;\n        message.endedAt = (_c = object.endedAt) !== null && _c !== void 0 ? _c : 0;\n        message.duration = (_d = object.duration) !== null && _d !== void 0 ? _d : 0;\n        message.size = (_e = object.size) !== null && _e !== void 0 ? _e : 0;\n        message.location = (_f = object.location) !== null && _f !== void 0 ? _f : \"\";\n        return message;\n    },\n};\nfunction createBaseSegmentsInfo() {\n    return {\n        playlistName: \"\",\n        livePlaylistName: \"\",\n        duration: 0,\n        size: 0,\n        playlistLocation: \"\",\n        livePlaylistLocation: \"\",\n        segmentCount: 0,\n        startedAt: 0,\n        endedAt: 0,\n    };\n}\nexports.SegmentsInfo = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.playlistName !== undefined && message.playlistName !== \"\") {\n            writer.uint32(10).string(message.playlistName);\n        }\n        if (message.livePlaylistName !== undefined && message.livePlaylistName !== \"\") {\n            writer.uint32(66).string(message.livePlaylistName);\n        }\n        if (message.duration !== undefined && message.duration !== 0) {\n            writer.uint32(16).int64(message.duration);\n        }\n        if (message.size !== undefined && message.size !== 0) {\n            writer.uint32(24).int64(message.size);\n        }\n        if (message.playlistLocation !== undefined && message.playlistLocation !== \"\") {\n            writer.uint32(34).string(message.playlistLocation);\n        }\n        if (message.livePlaylistLocation !== undefined && message.livePlaylistLocation !== \"\") {\n            writer.uint32(74).string(message.livePlaylistLocation);\n        }\n        if (message.segmentCount !== undefined && message.segmentCount !== 0) {\n            writer.uint32(40).int64(message.segmentCount);\n        }\n        if (message.startedAt !== undefined && message.startedAt !== 0) {\n            writer.uint32(48).int64(message.startedAt);\n        }\n        if (message.endedAt !== undefined && message.endedAt !== 0) {\n            writer.uint32(56).int64(message.endedAt);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSegmentsInfo();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.playlistName = reader.string();\n                    break;\n                case 8:\n                    message.livePlaylistName = reader.string();\n                    break;\n                case 2:\n                    message.duration = longToNumber(reader.int64());\n                    break;\n                case 3:\n                    message.size = longToNumber(reader.int64());\n                    break;\n                case 4:\n                    message.playlistLocation = reader.string();\n                    break;\n                case 9:\n                    message.livePlaylistLocation = reader.string();\n                    break;\n                case 5:\n                    message.segmentCount = longToNumber(reader.int64());\n                    break;\n                case 6:\n                    message.startedAt = longToNumber(reader.int64());\n                    break;\n                case 7:\n                    message.endedAt = longToNumber(reader.int64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            playlistName: isSet(object.playlistName) ? String(object.playlistName) : \"\",\n            livePlaylistName: isSet(object.livePlaylistName) ? String(object.livePlaylistName) : \"\",\n            duration: isSet(object.duration) ? Number(object.duration) : 0,\n            size: isSet(object.size) ? Number(object.size) : 0,\n            playlistLocation: isSet(object.playlistLocation) ? String(object.playlistLocation) : \"\",\n            livePlaylistLocation: isSet(object.livePlaylistLocation) ? String(object.livePlaylistLocation) : \"\",\n            segmentCount: isSet(object.segmentCount) ? Number(object.segmentCount) : 0,\n            startedAt: isSet(object.startedAt) ? Number(object.startedAt) : 0,\n            endedAt: isSet(object.endedAt) ? Number(object.endedAt) : 0,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.playlistName !== undefined && (obj.playlistName = message.playlistName);\n        message.livePlaylistName !== undefined && (obj.livePlaylistName = message.livePlaylistName);\n        message.duration !== undefined && (obj.duration = Math.round(message.duration));\n        message.size !== undefined && (obj.size = Math.round(message.size));\n        message.playlistLocation !== undefined && (obj.playlistLocation = message.playlistLocation);\n        message.livePlaylistLocation !== undefined && (obj.livePlaylistLocation = message.livePlaylistLocation);\n        message.segmentCount !== undefined && (obj.segmentCount = Math.round(message.segmentCount));\n        message.startedAt !== undefined && (obj.startedAt = Math.round(message.startedAt));\n        message.endedAt !== undefined && (obj.endedAt = Math.round(message.endedAt));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        const message = createBaseSegmentsInfo();\n        message.playlistName = (_a = object.playlistName) !== null && _a !== void 0 ? _a : \"\";\n        message.livePlaylistName = (_b = object.livePlaylistName) !== null && _b !== void 0 ? _b : \"\";\n        message.duration = (_c = object.duration) !== null && _c !== void 0 ? _c : 0;\n        message.size = (_d = object.size) !== null && _d !== void 0 ? _d : 0;\n        message.playlistLocation = (_e = object.playlistLocation) !== null && _e !== void 0 ? _e : \"\";\n        message.livePlaylistLocation = (_f = object.livePlaylistLocation) !== null && _f !== void 0 ? _f : \"\";\n        message.segmentCount = (_g = object.segmentCount) !== null && _g !== void 0 ? _g : 0;\n        message.startedAt = (_h = object.startedAt) !== null && _h !== void 0 ? _h : 0;\n        message.endedAt = (_j = object.endedAt) !== null && _j !== void 0 ? _j : 0;\n        return message;\n    },\n};\nfunction createBaseImagesInfo() {\n    return { imageCount: 0, startedAt: 0, endedAt: 0 };\n}\nexports.ImagesInfo = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.imageCount !== undefined && message.imageCount !== 0) {\n            writer.uint32(8).int64(message.imageCount);\n        }\n        if (message.startedAt !== undefined && message.startedAt !== 0) {\n            writer.uint32(16).int64(message.startedAt);\n        }\n        if (message.endedAt !== undefined && message.endedAt !== 0) {\n            writer.uint32(24).int64(message.endedAt);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseImagesInfo();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.imageCount = longToNumber(reader.int64());\n                    break;\n                case 2:\n                    message.startedAt = longToNumber(reader.int64());\n                    break;\n                case 3:\n                    message.endedAt = longToNumber(reader.int64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            imageCount: isSet(object.imageCount) ? Number(object.imageCount) : 0,\n            startedAt: isSet(object.startedAt) ? Number(object.startedAt) : 0,\n            endedAt: isSet(object.endedAt) ? Number(object.endedAt) : 0,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.imageCount !== undefined && (obj.imageCount = Math.round(message.imageCount));\n        message.startedAt !== undefined && (obj.startedAt = Math.round(message.startedAt));\n        message.endedAt !== undefined && (obj.endedAt = Math.round(message.endedAt));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseImagesInfo();\n        message.imageCount = (_a = object.imageCount) !== null && _a !== void 0 ? _a : 0;\n        message.startedAt = (_b = object.startedAt) !== null && _b !== void 0 ? _b : 0;\n        message.endedAt = (_c = object.endedAt) !== null && _c !== void 0 ? _c : 0;\n        return message;\n    },\n};\nfunction createBaseAutoParticipantEgress() {\n    return { preset: undefined, advanced: undefined, fileOutputs: [], segmentOutputs: [] };\n}\nexports.AutoParticipantEgress = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.preset !== undefined) {\n            writer.uint32(8).int32(message.preset);\n        }\n        if (message.advanced !== undefined) {\n            exports.EncodingOptions.encode(message.advanced, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.fileOutputs !== undefined && message.fileOutputs.length !== 0) {\n            for (const v of message.fileOutputs) {\n                exports.EncodedFileOutput.encode(v, writer.uint32(26).fork()).ldelim();\n            }\n        }\n        if (message.segmentOutputs !== undefined && message.segmentOutputs.length !== 0) {\n            for (const v of message.segmentOutputs) {\n                exports.SegmentedFileOutput.encode(v, writer.uint32(34).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseAutoParticipantEgress();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.preset = reader.int32();\n                    break;\n                case 2:\n                    message.advanced = exports.EncodingOptions.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.fileOutputs.push(exports.EncodedFileOutput.decode(reader, reader.uint32()));\n                    break;\n                case 4:\n                    message.segmentOutputs.push(exports.SegmentedFileOutput.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            preset: isSet(object.preset) ? encodingOptionsPresetFromJSON(object.preset) : undefined,\n            advanced: isSet(object.advanced) ? exports.EncodingOptions.fromJSON(object.advanced) : undefined,\n            fileOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.fileOutputs)\n                ? object.fileOutputs.map((e) => exports.EncodedFileOutput.fromJSON(e))\n                : [],\n            segmentOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.segmentOutputs)\n                ? object.segmentOutputs.map((e) => exports.SegmentedFileOutput.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.preset !== undefined &&\n            (obj.preset = message.preset !== undefined ? encodingOptionsPresetToJSON(message.preset) : undefined);\n        message.advanced !== undefined &&\n            (obj.advanced = message.advanced ? exports.EncodingOptions.toJSON(message.advanced) : undefined);\n        if (message.fileOutputs) {\n            obj.fileOutputs = message.fileOutputs.map((e) => e ? exports.EncodedFileOutput.toJSON(e) : undefined);\n        }\n        else {\n            obj.fileOutputs = [];\n        }\n        if (message.segmentOutputs) {\n            obj.segmentOutputs = message.segmentOutputs.map((e) => e ? exports.SegmentedFileOutput.toJSON(e) : undefined);\n        }\n        else {\n            obj.segmentOutputs = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseAutoParticipantEgress();\n        message.preset = (_a = object.preset) !== null && _a !== void 0 ? _a : undefined;\n        message.advanced = (object.advanced !== undefined && object.advanced !== null)\n            ? exports.EncodingOptions.fromPartial(object.advanced)\n            : undefined;\n        message.fileOutputs = ((_b = object.fileOutputs) === null || _b === void 0 ? void 0 : _b.map((e) => exports.EncodedFileOutput.fromPartial(e))) || [];\n        message.segmentOutputs = ((_c = object.segmentOutputs) === null || _c === void 0 ? void 0 : _c.map((e) => exports.SegmentedFileOutput.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseAutoTrackEgress() {\n    return { filepath: \"\", disableManifest: false, s3: undefined, gcp: undefined, azure: undefined };\n}\nexports.AutoTrackEgress = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.filepath !== undefined && message.filepath !== \"\") {\n            writer.uint32(10).string(message.filepath);\n        }\n        if (message.disableManifest === true) {\n            writer.uint32(40).bool(message.disableManifest);\n        }\n        if (message.s3 !== undefined) {\n            exports.S3Upload.encode(message.s3, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.gcp !== undefined) {\n            exports.GCPUpload.encode(message.gcp, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.azure !== undefined) {\n            exports.AzureBlobUpload.encode(message.azure, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseAutoTrackEgress();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.filepath = reader.string();\n                    break;\n                case 5:\n                    message.disableManifest = reader.bool();\n                    break;\n                case 2:\n                    message.s3 = exports.S3Upload.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.gcp = exports.GCPUpload.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.azure = exports.AzureBlobUpload.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            filepath: isSet(object.filepath) ? String(object.filepath) : \"\",\n            disableManifest: isSet(object.disableManifest) ? Boolean(object.disableManifest) : false,\n            s3: isSet(object.s3) ? exports.S3Upload.fromJSON(object.s3) : undefined,\n            gcp: isSet(object.gcp) ? exports.GCPUpload.fromJSON(object.gcp) : undefined,\n            azure: isSet(object.azure) ? exports.AzureBlobUpload.fromJSON(object.azure) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.filepath !== undefined && (obj.filepath = message.filepath);\n        message.disableManifest !== undefined && (obj.disableManifest = message.disableManifest);\n        message.s3 !== undefined && (obj.s3 = message.s3 ? exports.S3Upload.toJSON(message.s3) : undefined);\n        message.gcp !== undefined && (obj.gcp = message.gcp ? exports.GCPUpload.toJSON(message.gcp) : undefined);\n        message.azure !== undefined && (obj.azure = message.azure ? exports.AzureBlobUpload.toJSON(message.azure) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseAutoTrackEgress();\n        message.filepath = (_a = object.filepath) !== null && _a !== void 0 ? _a : \"\";\n        message.disableManifest = (_b = object.disableManifest) !== null && _b !== void 0 ? _b : false;\n        message.s3 = (object.s3 !== undefined && object.s3 !== null) ? exports.S3Upload.fromPartial(object.s3) : undefined;\n        message.gcp = (object.gcp !== undefined && object.gcp !== null) ? exports.GCPUpload.fromPartial(object.gcp) : undefined;\n        message.azure = (object.azure !== undefined && object.azure !== null)\n            ? exports.AzureBlobUpload.fromPartial(object.azure)\n            : undefined;\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\") {\n        return globalThis;\n    }\n    if (typeof self !== \"undefined\") {\n        return self;\n    }\n    if (typeof window !== \"undefined\") {\n        return window;\n    }\n    if (typeof global !== \"undefined\") {\n        return global;\n    }\n    throw \"Unable to locate global object\";\n})();\nfunction longToNumber(long) {\n    if (long.gt(Number.MAX_SAFE_INTEGER)) {\n        throw new globalThis.Error(\"Value is larger than Number.MAX_SAFE_INTEGER\");\n    }\n    return long.toNumber();\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\nfunction isObject(value) {\n    return typeof value === \"object\" && value !== null;\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=livekit_egress.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9saXZla2l0LXNlcnZlci1zZGsvZGlzdC9wcm90by9saXZla2l0X2VncmVzcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtCQUFrQixHQUFHLHNCQUFzQixHQUFHLGtCQUFrQixHQUFHLHlCQUF5QixHQUFHLDBCQUEwQixHQUFHLHlCQUF5QixHQUFHLDRCQUE0QixHQUFHLDJCQUEyQixHQUFHLDJCQUEyQixHQUFHLHVCQUF1QixHQUFHLG9CQUFvQixHQUFHLG9CQUFvQixHQUFHLHVCQUF1QixHQUFHLGlCQUFpQixHQUFHLDhCQUE4QixHQUFHLGdCQUFnQixHQUFHLG1CQUFtQixHQUFHLHdCQUF3QixHQUFHLDJCQUEyQixHQUFHLHlCQUF5QixHQUFHLDBCQUEwQixHQUFHLG1DQUFtQyxHQUFHLGdDQUFnQyxHQUFHLHdCQUF3QixHQUFHLGtDQUFrQyxHQUFHLCtCQUErQixHQUFHLGlDQUFpQyxHQUFHLHlCQUF5QixHQUFHLDBCQUEwQixHQUFHLDRCQUE0QixHQUFHLG9CQUFvQixHQUFHLG1DQUFtQyxHQUFHLHFDQUFxQyxHQUFHLDZCQUE2QixHQUFHLDRCQUE0QixHQUFHLDhCQUE4QixHQUFHLHNCQUFzQixHQUFHLDZCQUE2QixHQUFHLCtCQUErQixHQUFHLHVCQUF1QixHQUFHLGlDQUFpQyxHQUFHLG1DQUFtQyxHQUFHLDJCQUEyQixHQUFHLG1DQUFtQyxHQUFHLHFDQUFxQyxHQUFHLDZCQUE2QixHQUFHLDZCQUE2QixHQUFHLCtCQUErQixHQUFHLHVCQUF1QixHQUFHLHVCQUF1QjtBQUMvOEMsdUJBQXVCLEdBQUcsNkJBQTZCLEdBQUcsa0JBQWtCLEdBQUcsb0JBQW9CLEdBQUcsZ0JBQWdCO0FBQ3RIO0FBQ0EsK0JBQStCLG1CQUFPLENBQUMsK0RBQU07QUFDN0Msa0NBQWtDLG1CQUFPLENBQUMsaUZBQW9CO0FBQzlELHlCQUF5QixtQkFBTyxDQUFDLHlHQUFrQjtBQUNuRCx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGdEQUFnRCx1QkFBdUIsS0FBSztBQUM3RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDREQUE0RCw2QkFBNkIsS0FBSztBQUMvRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsd0RBQXdELDJCQUEyQixLQUFLO0FBQ3pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxnREFBZ0QsdUJBQXVCLEtBQUs7QUFDN0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsOENBQThDLHNCQUFzQixLQUFLO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsNERBQTRELDZCQUE2QixLQUFLO0FBQy9GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsMENBQTBDLG9CQUFvQixLQUFLO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsb0RBQW9ELHlCQUF5QixLQUFLO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkM7QUFDN0Msb0RBQW9ELGlCQUFpQjtBQUNyRSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLElBQUk7QUFDckIsb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvR0FBb0c7QUFDcEc7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLElBQUk7QUFDYjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLGlCQUFpQjtBQUNqQixLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLGlCQUFpQjtBQUNqQixLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsaUJBQWlCO0FBQ2pCLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLGlCQUFpQjtBQUNqQixLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saXZlc3RyZWFtLy4vbm9kZV9tb2R1bGVzL2xpdmVraXQtc2VydmVyLXNkay9kaXN0L3Byb3RvL2xpdmVraXRfZWdyZXNzLmpzPzE2NWYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlN0cmVhbUluZm8gPSBleHBvcnRzLlN0cmVhbUluZm9MaXN0ID0gZXhwb3J0cy5FZ3Jlc3NJbmZvID0gZXhwb3J0cy5TdG9wRWdyZXNzUmVxdWVzdCA9IGV4cG9ydHMuTGlzdEVncmVzc1Jlc3BvbnNlID0gZXhwb3J0cy5MaXN0RWdyZXNzUmVxdWVzdCA9IGV4cG9ydHMuVXBkYXRlT3V0cHV0c1JlcXVlc3QgPSBleHBvcnRzLlVwZGF0ZVN0cmVhbVJlcXVlc3QgPSBleHBvcnRzLlVwZGF0ZUxheW91dFJlcXVlc3QgPSBleHBvcnRzLkVuY29kaW5nT3B0aW9ucyA9IGV4cG9ydHMuU3RyZWFtT3V0cHV0ID0gZXhwb3J0cy5BbGlPU1NVcGxvYWQgPSBleHBvcnRzLkF6dXJlQmxvYlVwbG9hZCA9IGV4cG9ydHMuR0NQVXBsb2FkID0gZXhwb3J0cy5TM1VwbG9hZF9NZXRhZGF0YUVudHJ5ID0gZXhwb3J0cy5TM1VwbG9hZCA9IGV4cG9ydHMuSW1hZ2VPdXRwdXQgPSBleHBvcnRzLkRpcmVjdEZpbGVPdXRwdXQgPSBleHBvcnRzLlNlZ21lbnRlZEZpbGVPdXRwdXQgPSBleHBvcnRzLkVuY29kZWRGaWxlT3V0cHV0ID0gZXhwb3J0cy5UcmFja0VncmVzc1JlcXVlc3QgPSBleHBvcnRzLlRyYWNrQ29tcG9zaXRlRWdyZXNzUmVxdWVzdCA9IGV4cG9ydHMuUGFydGljaXBhbnRFZ3Jlc3NSZXF1ZXN0ID0gZXhwb3J0cy5XZWJFZ3Jlc3NSZXF1ZXN0ID0gZXhwb3J0cy5Sb29tQ29tcG9zaXRlRWdyZXNzUmVxdWVzdCA9IGV4cG9ydHMuc3RyZWFtSW5mb19TdGF0dXNUb0pTT04gPSBleHBvcnRzLnN0cmVhbUluZm9fU3RhdHVzRnJvbUpTT04gPSBleHBvcnRzLlN0cmVhbUluZm9fU3RhdHVzID0gZXhwb3J0cy5lZ3Jlc3NTdGF0dXNUb0pTT04gPSBleHBvcnRzLmVncmVzc1N0YXR1c0Zyb21KU09OID0gZXhwb3J0cy5FZ3Jlc3NTdGF0dXMgPSBleHBvcnRzLmVuY29kaW5nT3B0aW9uc1ByZXNldFRvSlNPTiA9IGV4cG9ydHMuZW5jb2RpbmdPcHRpb25zUHJlc2V0RnJvbUpTT04gPSBleHBvcnRzLkVuY29kaW5nT3B0aW9uc1ByZXNldCA9IGV4cG9ydHMuc3RyZWFtUHJvdG9jb2xUb0pTT04gPSBleHBvcnRzLnN0cmVhbVByb3RvY29sRnJvbUpTT04gPSBleHBvcnRzLlN0cmVhbVByb3RvY29sID0gZXhwb3J0cy5pbWFnZUZpbGVTdWZmaXhUb0pTT04gPSBleHBvcnRzLmltYWdlRmlsZVN1ZmZpeEZyb21KU09OID0gZXhwb3J0cy5JbWFnZUZpbGVTdWZmaXggPSBleHBvcnRzLnNlZ21lbnRlZEZpbGVTdWZmaXhUb0pTT04gPSBleHBvcnRzLnNlZ21lbnRlZEZpbGVTdWZmaXhGcm9tSlNPTiA9IGV4cG9ydHMuU2VnbWVudGVkRmlsZVN1ZmZpeCA9IGV4cG9ydHMuc2VnbWVudGVkRmlsZVByb3RvY29sVG9KU09OID0gZXhwb3J0cy5zZWdtZW50ZWRGaWxlUHJvdG9jb2xGcm9tSlNPTiA9IGV4cG9ydHMuU2VnbWVudGVkRmlsZVByb3RvY29sID0gZXhwb3J0cy5lbmNvZGVkRmlsZVR5cGVUb0pTT04gPSBleHBvcnRzLmVuY29kZWRGaWxlVHlwZUZyb21KU09OID0gZXhwb3J0cy5FbmNvZGVkRmlsZVR5cGUgPSBleHBvcnRzLnByb3RvYnVmUGFja2FnZSA9IHZvaWQgMDtcbmV4cG9ydHMuQXV0b1RyYWNrRWdyZXNzID0gZXhwb3J0cy5BdXRvUGFydGljaXBhbnRFZ3Jlc3MgPSBleHBvcnRzLkltYWdlc0luZm8gPSBleHBvcnRzLlNlZ21lbnRzSW5mbyA9IGV4cG9ydHMuRmlsZUluZm8gPSB2b2lkIDA7XG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuY29uc3QgbG9uZ18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJsb25nXCIpKTtcbmNvbnN0IG1pbmltYWxfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwicHJvdG9idWZqcy9taW5pbWFsXCIpKTtcbmNvbnN0IGxpdmVraXRfbW9kZWxzXzEgPSByZXF1aXJlKFwiLi9saXZla2l0X21vZGVsc1wiKTtcbmV4cG9ydHMucHJvdG9idWZQYWNrYWdlID0gXCJsaXZla2l0XCI7XG52YXIgRW5jb2RlZEZpbGVUeXBlO1xuKGZ1bmN0aW9uIChFbmNvZGVkRmlsZVR5cGUpIHtcbiAgICAvKiogREVGQVVMVF9GSUxFVFlQRSAtIGZpbGUgdHlwZSBjaG9zZW4gYmFzZWQgb24gY29kZWNzICovXG4gICAgRW5jb2RlZEZpbGVUeXBlW0VuY29kZWRGaWxlVHlwZVtcIkRFRkFVTFRfRklMRVRZUEVcIl0gPSAwXSA9IFwiREVGQVVMVF9GSUxFVFlQRVwiO1xuICAgIEVuY29kZWRGaWxlVHlwZVtFbmNvZGVkRmlsZVR5cGVbXCJNUDRcIl0gPSAxXSA9IFwiTVA0XCI7XG4gICAgRW5jb2RlZEZpbGVUeXBlW0VuY29kZWRGaWxlVHlwZVtcIk9HR1wiXSA9IDJdID0gXCJPR0dcIjtcbiAgICBFbmNvZGVkRmlsZVR5cGVbRW5jb2RlZEZpbGVUeXBlW1wiVU5SRUNPR05JWkVEXCJdID0gLTFdID0gXCJVTlJFQ09HTklaRURcIjtcbn0pKEVuY29kZWRGaWxlVHlwZSA9IGV4cG9ydHMuRW5jb2RlZEZpbGVUeXBlIHx8IChleHBvcnRzLkVuY29kZWRGaWxlVHlwZSA9IHt9KSk7XG5mdW5jdGlvbiBlbmNvZGVkRmlsZVR5cGVGcm9tSlNPTihvYmplY3QpIHtcbiAgICBzd2l0Y2ggKG9iamVjdCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgIGNhc2UgXCJERUZBVUxUX0ZJTEVUWVBFXCI6XG4gICAgICAgICAgICByZXR1cm4gRW5jb2RlZEZpbGVUeXBlLkRFRkFVTFRfRklMRVRZUEU7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgY2FzZSBcIk1QNFwiOlxuICAgICAgICAgICAgcmV0dXJuIEVuY29kZWRGaWxlVHlwZS5NUDQ7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgY2FzZSBcIk9HR1wiOlxuICAgICAgICAgICAgcmV0dXJuIEVuY29kZWRGaWxlVHlwZS5PR0c7XG4gICAgICAgIGNhc2UgLTE6XG4gICAgICAgIGNhc2UgXCJVTlJFQ09HTklaRURcIjpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBFbmNvZGVkRmlsZVR5cGUuVU5SRUNPR05JWkVEO1xuICAgIH1cbn1cbmV4cG9ydHMuZW5jb2RlZEZpbGVUeXBlRnJvbUpTT04gPSBlbmNvZGVkRmlsZVR5cGVGcm9tSlNPTjtcbmZ1bmN0aW9uIGVuY29kZWRGaWxlVHlwZVRvSlNPTihvYmplY3QpIHtcbiAgICBzd2l0Y2ggKG9iamVjdCkge1xuICAgICAgICBjYXNlIEVuY29kZWRGaWxlVHlwZS5ERUZBVUxUX0ZJTEVUWVBFOlxuICAgICAgICAgICAgcmV0dXJuIFwiREVGQVVMVF9GSUxFVFlQRVwiO1xuICAgICAgICBjYXNlIEVuY29kZWRGaWxlVHlwZS5NUDQ6XG4gICAgICAgICAgICByZXR1cm4gXCJNUDRcIjtcbiAgICAgICAgY2FzZSBFbmNvZGVkRmlsZVR5cGUuT0dHOlxuICAgICAgICAgICAgcmV0dXJuIFwiT0dHXCI7XG4gICAgICAgIGNhc2UgRW5jb2RlZEZpbGVUeXBlLlVOUkVDT0dOSVpFRDpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBcIlVOUkVDT0dOSVpFRFwiO1xuICAgIH1cbn1cbmV4cG9ydHMuZW5jb2RlZEZpbGVUeXBlVG9KU09OID0gZW5jb2RlZEZpbGVUeXBlVG9KU09OO1xudmFyIFNlZ21lbnRlZEZpbGVQcm90b2NvbDtcbihmdW5jdGlvbiAoU2VnbWVudGVkRmlsZVByb3RvY29sKSB7XG4gICAgU2VnbWVudGVkRmlsZVByb3RvY29sW1NlZ21lbnRlZEZpbGVQcm90b2NvbFtcIkRFRkFVTFRfU0VHTUVOVEVEX0ZJTEVfUFJPVE9DT0xcIl0gPSAwXSA9IFwiREVGQVVMVF9TRUdNRU5URURfRklMRV9QUk9UT0NPTFwiO1xuICAgIFNlZ21lbnRlZEZpbGVQcm90b2NvbFtTZWdtZW50ZWRGaWxlUHJvdG9jb2xbXCJITFNfUFJPVE9DT0xcIl0gPSAxXSA9IFwiSExTX1BST1RPQ09MXCI7XG4gICAgU2VnbWVudGVkRmlsZVByb3RvY29sW1NlZ21lbnRlZEZpbGVQcm90b2NvbFtcIlVOUkVDT0dOSVpFRFwiXSA9IC0xXSA9IFwiVU5SRUNPR05JWkVEXCI7XG59KShTZWdtZW50ZWRGaWxlUHJvdG9jb2wgPSBleHBvcnRzLlNlZ21lbnRlZEZpbGVQcm90b2NvbCB8fCAoZXhwb3J0cy5TZWdtZW50ZWRGaWxlUHJvdG9jb2wgPSB7fSkpO1xuZnVuY3Rpb24gc2VnbWVudGVkRmlsZVByb3RvY29sRnJvbUpTT04ob2JqZWN0KSB7XG4gICAgc3dpdGNoIChvYmplY3QpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICBjYXNlIFwiREVGQVVMVF9TRUdNRU5URURfRklMRV9QUk9UT0NPTFwiOlxuICAgICAgICAgICAgcmV0dXJuIFNlZ21lbnRlZEZpbGVQcm90b2NvbC5ERUZBVUxUX1NFR01FTlRFRF9GSUxFX1BST1RPQ09MO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgIGNhc2UgXCJITFNfUFJPVE9DT0xcIjpcbiAgICAgICAgICAgIHJldHVybiBTZWdtZW50ZWRGaWxlUHJvdG9jb2wuSExTX1BST1RPQ09MO1xuICAgICAgICBjYXNlIC0xOlxuICAgICAgICBjYXNlIFwiVU5SRUNPR05JWkVEXCI6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gU2VnbWVudGVkRmlsZVByb3RvY29sLlVOUkVDT0dOSVpFRDtcbiAgICB9XG59XG5leHBvcnRzLnNlZ21lbnRlZEZpbGVQcm90b2NvbEZyb21KU09OID0gc2VnbWVudGVkRmlsZVByb3RvY29sRnJvbUpTT047XG5mdW5jdGlvbiBzZWdtZW50ZWRGaWxlUHJvdG9jb2xUb0pTT04ob2JqZWN0KSB7XG4gICAgc3dpdGNoIChvYmplY3QpIHtcbiAgICAgICAgY2FzZSBTZWdtZW50ZWRGaWxlUHJvdG9jb2wuREVGQVVMVF9TRUdNRU5URURfRklMRV9QUk9UT0NPTDpcbiAgICAgICAgICAgIHJldHVybiBcIkRFRkFVTFRfU0VHTUVOVEVEX0ZJTEVfUFJPVE9DT0xcIjtcbiAgICAgICAgY2FzZSBTZWdtZW50ZWRGaWxlUHJvdG9jb2wuSExTX1BST1RPQ09MOlxuICAgICAgICAgICAgcmV0dXJuIFwiSExTX1BST1RPQ09MXCI7XG4gICAgICAgIGNhc2UgU2VnbWVudGVkRmlsZVByb3RvY29sLlVOUkVDT0dOSVpFRDpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBcIlVOUkVDT0dOSVpFRFwiO1xuICAgIH1cbn1cbmV4cG9ydHMuc2VnbWVudGVkRmlsZVByb3RvY29sVG9KU09OID0gc2VnbWVudGVkRmlsZVByb3RvY29sVG9KU09OO1xudmFyIFNlZ21lbnRlZEZpbGVTdWZmaXg7XG4oZnVuY3Rpb24gKFNlZ21lbnRlZEZpbGVTdWZmaXgpIHtcbiAgICBTZWdtZW50ZWRGaWxlU3VmZml4W1NlZ21lbnRlZEZpbGVTdWZmaXhbXCJJTkRFWFwiXSA9IDBdID0gXCJJTkRFWFwiO1xuICAgIFNlZ21lbnRlZEZpbGVTdWZmaXhbU2VnbWVudGVkRmlsZVN1ZmZpeFtcIlRJTUVTVEFNUFwiXSA9IDFdID0gXCJUSU1FU1RBTVBcIjtcbiAgICBTZWdtZW50ZWRGaWxlU3VmZml4W1NlZ21lbnRlZEZpbGVTdWZmaXhbXCJVTlJFQ09HTklaRURcIl0gPSAtMV0gPSBcIlVOUkVDT0dOSVpFRFwiO1xufSkoU2VnbWVudGVkRmlsZVN1ZmZpeCA9IGV4cG9ydHMuU2VnbWVudGVkRmlsZVN1ZmZpeCB8fCAoZXhwb3J0cy5TZWdtZW50ZWRGaWxlU3VmZml4ID0ge30pKTtcbmZ1bmN0aW9uIHNlZ21lbnRlZEZpbGVTdWZmaXhGcm9tSlNPTihvYmplY3QpIHtcbiAgICBzd2l0Y2ggKG9iamVjdCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgIGNhc2UgXCJJTkRFWFwiOlxuICAgICAgICAgICAgcmV0dXJuIFNlZ21lbnRlZEZpbGVTdWZmaXguSU5ERVg7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgY2FzZSBcIlRJTUVTVEFNUFwiOlxuICAgICAgICAgICAgcmV0dXJuIFNlZ21lbnRlZEZpbGVTdWZmaXguVElNRVNUQU1QO1xuICAgICAgICBjYXNlIC0xOlxuICAgICAgICBjYXNlIFwiVU5SRUNPR05JWkVEXCI6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gU2VnbWVudGVkRmlsZVN1ZmZpeC5VTlJFQ09HTklaRUQ7XG4gICAgfVxufVxuZXhwb3J0cy5zZWdtZW50ZWRGaWxlU3VmZml4RnJvbUpTT04gPSBzZWdtZW50ZWRGaWxlU3VmZml4RnJvbUpTT047XG5mdW5jdGlvbiBzZWdtZW50ZWRGaWxlU3VmZml4VG9KU09OKG9iamVjdCkge1xuICAgIHN3aXRjaCAob2JqZWN0KSB7XG4gICAgICAgIGNhc2UgU2VnbWVudGVkRmlsZVN1ZmZpeC5JTkRFWDpcbiAgICAgICAgICAgIHJldHVybiBcIklOREVYXCI7XG4gICAgICAgIGNhc2UgU2VnbWVudGVkRmlsZVN1ZmZpeC5USU1FU1RBTVA6XG4gICAgICAgICAgICByZXR1cm4gXCJUSU1FU1RBTVBcIjtcbiAgICAgICAgY2FzZSBTZWdtZW50ZWRGaWxlU3VmZml4LlVOUkVDT0dOSVpFRDpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBcIlVOUkVDT0dOSVpFRFwiO1xuICAgIH1cbn1cbmV4cG9ydHMuc2VnbWVudGVkRmlsZVN1ZmZpeFRvSlNPTiA9IHNlZ21lbnRlZEZpbGVTdWZmaXhUb0pTT047XG52YXIgSW1hZ2VGaWxlU3VmZml4O1xuKGZ1bmN0aW9uIChJbWFnZUZpbGVTdWZmaXgpIHtcbiAgICBJbWFnZUZpbGVTdWZmaXhbSW1hZ2VGaWxlU3VmZml4W1wiSU1BR0VfU1VGRklYX0lOREVYXCJdID0gMF0gPSBcIklNQUdFX1NVRkZJWF9JTkRFWFwiO1xuICAgIEltYWdlRmlsZVN1ZmZpeFtJbWFnZUZpbGVTdWZmaXhbXCJJTUFHRV9TVUZGSVhfVElNRVNUQU1QXCJdID0gMV0gPSBcIklNQUdFX1NVRkZJWF9USU1FU1RBTVBcIjtcbiAgICBJbWFnZUZpbGVTdWZmaXhbSW1hZ2VGaWxlU3VmZml4W1wiVU5SRUNPR05JWkVEXCJdID0gLTFdID0gXCJVTlJFQ09HTklaRURcIjtcbn0pKEltYWdlRmlsZVN1ZmZpeCA9IGV4cG9ydHMuSW1hZ2VGaWxlU3VmZml4IHx8IChleHBvcnRzLkltYWdlRmlsZVN1ZmZpeCA9IHt9KSk7XG5mdW5jdGlvbiBpbWFnZUZpbGVTdWZmaXhGcm9tSlNPTihvYmplY3QpIHtcbiAgICBzd2l0Y2ggKG9iamVjdCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgIGNhc2UgXCJJTUFHRV9TVUZGSVhfSU5ERVhcIjpcbiAgICAgICAgICAgIHJldHVybiBJbWFnZUZpbGVTdWZmaXguSU1BR0VfU1VGRklYX0lOREVYO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgIGNhc2UgXCJJTUFHRV9TVUZGSVhfVElNRVNUQU1QXCI6XG4gICAgICAgICAgICByZXR1cm4gSW1hZ2VGaWxlU3VmZml4LklNQUdFX1NVRkZJWF9USU1FU1RBTVA7XG4gICAgICAgIGNhc2UgLTE6XG4gICAgICAgIGNhc2UgXCJVTlJFQ09HTklaRURcIjpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBJbWFnZUZpbGVTdWZmaXguVU5SRUNPR05JWkVEO1xuICAgIH1cbn1cbmV4cG9ydHMuaW1hZ2VGaWxlU3VmZml4RnJvbUpTT04gPSBpbWFnZUZpbGVTdWZmaXhGcm9tSlNPTjtcbmZ1bmN0aW9uIGltYWdlRmlsZVN1ZmZpeFRvSlNPTihvYmplY3QpIHtcbiAgICBzd2l0Y2ggKG9iamVjdCkge1xuICAgICAgICBjYXNlIEltYWdlRmlsZVN1ZmZpeC5JTUFHRV9TVUZGSVhfSU5ERVg6XG4gICAgICAgICAgICByZXR1cm4gXCJJTUFHRV9TVUZGSVhfSU5ERVhcIjtcbiAgICAgICAgY2FzZSBJbWFnZUZpbGVTdWZmaXguSU1BR0VfU1VGRklYX1RJTUVTVEFNUDpcbiAgICAgICAgICAgIHJldHVybiBcIklNQUdFX1NVRkZJWF9USU1FU1RBTVBcIjtcbiAgICAgICAgY2FzZSBJbWFnZUZpbGVTdWZmaXguVU5SRUNPR05JWkVEOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIFwiVU5SRUNPR05JWkVEXCI7XG4gICAgfVxufVxuZXhwb3J0cy5pbWFnZUZpbGVTdWZmaXhUb0pTT04gPSBpbWFnZUZpbGVTdWZmaXhUb0pTT047XG52YXIgU3RyZWFtUHJvdG9jb2w7XG4oZnVuY3Rpb24gKFN0cmVhbVByb3RvY29sKSB7XG4gICAgLyoqIERFRkFVTFRfUFJPVE9DT0wgLSBwcm90b2NvbCBjaG9zZW4gYmFzZWQgb24gdXJscyAqL1xuICAgIFN0cmVhbVByb3RvY29sW1N0cmVhbVByb3RvY29sW1wiREVGQVVMVF9QUk9UT0NPTFwiXSA9IDBdID0gXCJERUZBVUxUX1BST1RPQ09MXCI7XG4gICAgU3RyZWFtUHJvdG9jb2xbU3RyZWFtUHJvdG9jb2xbXCJSVE1QXCJdID0gMV0gPSBcIlJUTVBcIjtcbiAgICBTdHJlYW1Qcm90b2NvbFtTdHJlYW1Qcm90b2NvbFtcIlVOUkVDT0dOSVpFRFwiXSA9IC0xXSA9IFwiVU5SRUNPR05JWkVEXCI7XG59KShTdHJlYW1Qcm90b2NvbCA9IGV4cG9ydHMuU3RyZWFtUHJvdG9jb2wgfHwgKGV4cG9ydHMuU3RyZWFtUHJvdG9jb2wgPSB7fSkpO1xuZnVuY3Rpb24gc3RyZWFtUHJvdG9jb2xGcm9tSlNPTihvYmplY3QpIHtcbiAgICBzd2l0Y2ggKG9iamVjdCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgIGNhc2UgXCJERUZBVUxUX1BST1RPQ09MXCI6XG4gICAgICAgICAgICByZXR1cm4gU3RyZWFtUHJvdG9jb2wuREVGQVVMVF9QUk9UT0NPTDtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICBjYXNlIFwiUlRNUFwiOlxuICAgICAgICAgICAgcmV0dXJuIFN0cmVhbVByb3RvY29sLlJUTVA7XG4gICAgICAgIGNhc2UgLTE6XG4gICAgICAgIGNhc2UgXCJVTlJFQ09HTklaRURcIjpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBTdHJlYW1Qcm90b2NvbC5VTlJFQ09HTklaRUQ7XG4gICAgfVxufVxuZXhwb3J0cy5zdHJlYW1Qcm90b2NvbEZyb21KU09OID0gc3RyZWFtUHJvdG9jb2xGcm9tSlNPTjtcbmZ1bmN0aW9uIHN0cmVhbVByb3RvY29sVG9KU09OKG9iamVjdCkge1xuICAgIHN3aXRjaCAob2JqZWN0KSB7XG4gICAgICAgIGNhc2UgU3RyZWFtUHJvdG9jb2wuREVGQVVMVF9QUk9UT0NPTDpcbiAgICAgICAgICAgIHJldHVybiBcIkRFRkFVTFRfUFJPVE9DT0xcIjtcbiAgICAgICAgY2FzZSBTdHJlYW1Qcm90b2NvbC5SVE1QOlxuICAgICAgICAgICAgcmV0dXJuIFwiUlRNUFwiO1xuICAgICAgICBjYXNlIFN0cmVhbVByb3RvY29sLlVOUkVDT0dOSVpFRDpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBcIlVOUkVDT0dOSVpFRFwiO1xuICAgIH1cbn1cbmV4cG9ydHMuc3RyZWFtUHJvdG9jb2xUb0pTT04gPSBzdHJlYW1Qcm90b2NvbFRvSlNPTjtcbnZhciBFbmNvZGluZ09wdGlvbnNQcmVzZXQ7XG4oZnVuY3Rpb24gKEVuY29kaW5nT3B0aW9uc1ByZXNldCkge1xuICAgIC8qKiBIMjY0XzcyMFBfMzAgLSAxMjgweDcyMCwgMzBmcHMsIDMwMDBrcGJzLCBILjI2NF9NQUlOIC8gT1BVUyAqL1xuICAgIEVuY29kaW5nT3B0aW9uc1ByZXNldFtFbmNvZGluZ09wdGlvbnNQcmVzZXRbXCJIMjY0XzcyMFBfMzBcIl0gPSAwXSA9IFwiSDI2NF83MjBQXzMwXCI7XG4gICAgLyoqIEgyNjRfNzIwUF82MCAtIDEyODB4NzIwLCA2MGZwcywgNDUwMGticHMsIEguMjY0X01BSU4gLyBPUFVTICovXG4gICAgRW5jb2RpbmdPcHRpb25zUHJlc2V0W0VuY29kaW5nT3B0aW9uc1ByZXNldFtcIkgyNjRfNzIwUF82MFwiXSA9IDFdID0gXCJIMjY0XzcyMFBfNjBcIjtcbiAgICAvKiogSDI2NF8xMDgwUF8zMCAtIDE5MjB4MTA4MCwgMzBmcHMsIDQ1MDBrYnBzLCBILjI2NF9NQUlOIC8gT1BVUyAqL1xuICAgIEVuY29kaW5nT3B0aW9uc1ByZXNldFtFbmNvZGluZ09wdGlvbnNQcmVzZXRbXCJIMjY0XzEwODBQXzMwXCJdID0gMl0gPSBcIkgyNjRfMTA4MFBfMzBcIjtcbiAgICAvKiogSDI2NF8xMDgwUF82MCAtIDE5MjB4MTA4MCwgNjBmcHMsIDYwMDBrYnBzLCBILjI2NF9NQUlOIC8gT1BVUyAqL1xuICAgIEVuY29kaW5nT3B0aW9uc1ByZXNldFtFbmNvZGluZ09wdGlvbnNQcmVzZXRbXCJIMjY0XzEwODBQXzYwXCJdID0gM10gPSBcIkgyNjRfMTA4MFBfNjBcIjtcbiAgICAvKiogUE9SVFJBSVRfSDI2NF83MjBQXzMwIC0gNzIweDEyODAsIDMwZnBzLCAzMDAwa3BicywgSC4yNjRfTUFJTiAvIE9QVVMgKi9cbiAgICBFbmNvZGluZ09wdGlvbnNQcmVzZXRbRW5jb2RpbmdPcHRpb25zUHJlc2V0W1wiUE9SVFJBSVRfSDI2NF83MjBQXzMwXCJdID0gNF0gPSBcIlBPUlRSQUlUX0gyNjRfNzIwUF8zMFwiO1xuICAgIC8qKiBQT1JUUkFJVF9IMjY0XzcyMFBfNjAgLSA3MjB4MTI4MCwgNjBmcHMsIDQ1MDBrYnBzLCBILjI2NF9NQUlOIC8gT1BVUyAqL1xuICAgIEVuY29kaW5nT3B0aW9uc1ByZXNldFtFbmNvZGluZ09wdGlvbnNQcmVzZXRbXCJQT1JUUkFJVF9IMjY0XzcyMFBfNjBcIl0gPSA1XSA9IFwiUE9SVFJBSVRfSDI2NF83MjBQXzYwXCI7XG4gICAgLyoqIFBPUlRSQUlUX0gyNjRfMTA4MFBfMzAgLSAxMDgweDE5MjAsIDMwZnBzLCA0NTAwa2JwcywgSC4yNjRfTUFJTiAvIE9QVVMgKi9cbiAgICBFbmNvZGluZ09wdGlvbnNQcmVzZXRbRW5jb2RpbmdPcHRpb25zUHJlc2V0W1wiUE9SVFJBSVRfSDI2NF8xMDgwUF8zMFwiXSA9IDZdID0gXCJQT1JUUkFJVF9IMjY0XzEwODBQXzMwXCI7XG4gICAgLyoqIFBPUlRSQUlUX0gyNjRfMTA4MFBfNjAgLSAxMDgweDE5MjAsIDYwZnBzLCA2MDAwa2JwcywgSC4yNjRfTUFJTiAvIE9QVVMgKi9cbiAgICBFbmNvZGluZ09wdGlvbnNQcmVzZXRbRW5jb2RpbmdPcHRpb25zUHJlc2V0W1wiUE9SVFJBSVRfSDI2NF8xMDgwUF82MFwiXSA9IDddID0gXCJQT1JUUkFJVF9IMjY0XzEwODBQXzYwXCI7XG4gICAgRW5jb2RpbmdPcHRpb25zUHJlc2V0W0VuY29kaW5nT3B0aW9uc1ByZXNldFtcIlVOUkVDT0dOSVpFRFwiXSA9IC0xXSA9IFwiVU5SRUNPR05JWkVEXCI7XG59KShFbmNvZGluZ09wdGlvbnNQcmVzZXQgPSBleHBvcnRzLkVuY29kaW5nT3B0aW9uc1ByZXNldCB8fCAoZXhwb3J0cy5FbmNvZGluZ09wdGlvbnNQcmVzZXQgPSB7fSkpO1xuZnVuY3Rpb24gZW5jb2RpbmdPcHRpb25zUHJlc2V0RnJvbUpTT04ob2JqZWN0KSB7XG4gICAgc3dpdGNoIChvYmplY3QpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICBjYXNlIFwiSDI2NF83MjBQXzMwXCI6XG4gICAgICAgICAgICByZXR1cm4gRW5jb2RpbmdPcHRpb25zUHJlc2V0LkgyNjRfNzIwUF8zMDtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICBjYXNlIFwiSDI2NF83MjBQXzYwXCI6XG4gICAgICAgICAgICByZXR1cm4gRW5jb2RpbmdPcHRpb25zUHJlc2V0LkgyNjRfNzIwUF82MDtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICBjYXNlIFwiSDI2NF8xMDgwUF8zMFwiOlxuICAgICAgICAgICAgcmV0dXJuIEVuY29kaW5nT3B0aW9uc1ByZXNldC5IMjY0XzEwODBQXzMwO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgIGNhc2UgXCJIMjY0XzEwODBQXzYwXCI6XG4gICAgICAgICAgICByZXR1cm4gRW5jb2RpbmdPcHRpb25zUHJlc2V0LkgyNjRfMTA4MFBfNjA7XG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgY2FzZSBcIlBPUlRSQUlUX0gyNjRfNzIwUF8zMFwiOlxuICAgICAgICAgICAgcmV0dXJuIEVuY29kaW5nT3B0aW9uc1ByZXNldC5QT1JUUkFJVF9IMjY0XzcyMFBfMzA7XG4gICAgICAgIGNhc2UgNTpcbiAgICAgICAgY2FzZSBcIlBPUlRSQUlUX0gyNjRfNzIwUF82MFwiOlxuICAgICAgICAgICAgcmV0dXJuIEVuY29kaW5nT3B0aW9uc1ByZXNldC5QT1JUUkFJVF9IMjY0XzcyMFBfNjA7XG4gICAgICAgIGNhc2UgNjpcbiAgICAgICAgY2FzZSBcIlBPUlRSQUlUX0gyNjRfMTA4MFBfMzBcIjpcbiAgICAgICAgICAgIHJldHVybiBFbmNvZGluZ09wdGlvbnNQcmVzZXQuUE9SVFJBSVRfSDI2NF8xMDgwUF8zMDtcbiAgICAgICAgY2FzZSA3OlxuICAgICAgICBjYXNlIFwiUE9SVFJBSVRfSDI2NF8xMDgwUF82MFwiOlxuICAgICAgICAgICAgcmV0dXJuIEVuY29kaW5nT3B0aW9uc1ByZXNldC5QT1JUUkFJVF9IMjY0XzEwODBQXzYwO1xuICAgICAgICBjYXNlIC0xOlxuICAgICAgICBjYXNlIFwiVU5SRUNPR05JWkVEXCI6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gRW5jb2RpbmdPcHRpb25zUHJlc2V0LlVOUkVDT0dOSVpFRDtcbiAgICB9XG59XG5leHBvcnRzLmVuY29kaW5nT3B0aW9uc1ByZXNldEZyb21KU09OID0gZW5jb2RpbmdPcHRpb25zUHJlc2V0RnJvbUpTT047XG5mdW5jdGlvbiBlbmNvZGluZ09wdGlvbnNQcmVzZXRUb0pTT04ob2JqZWN0KSB7XG4gICAgc3dpdGNoIChvYmplY3QpIHtcbiAgICAgICAgY2FzZSBFbmNvZGluZ09wdGlvbnNQcmVzZXQuSDI2NF83MjBQXzMwOlxuICAgICAgICAgICAgcmV0dXJuIFwiSDI2NF83MjBQXzMwXCI7XG4gICAgICAgIGNhc2UgRW5jb2RpbmdPcHRpb25zUHJlc2V0LkgyNjRfNzIwUF82MDpcbiAgICAgICAgICAgIHJldHVybiBcIkgyNjRfNzIwUF82MFwiO1xuICAgICAgICBjYXNlIEVuY29kaW5nT3B0aW9uc1ByZXNldC5IMjY0XzEwODBQXzMwOlxuICAgICAgICAgICAgcmV0dXJuIFwiSDI2NF8xMDgwUF8zMFwiO1xuICAgICAgICBjYXNlIEVuY29kaW5nT3B0aW9uc1ByZXNldC5IMjY0XzEwODBQXzYwOlxuICAgICAgICAgICAgcmV0dXJuIFwiSDI2NF8xMDgwUF82MFwiO1xuICAgICAgICBjYXNlIEVuY29kaW5nT3B0aW9uc1ByZXNldC5QT1JUUkFJVF9IMjY0XzcyMFBfMzA6XG4gICAgICAgICAgICByZXR1cm4gXCJQT1JUUkFJVF9IMjY0XzcyMFBfMzBcIjtcbiAgICAgICAgY2FzZSBFbmNvZGluZ09wdGlvbnNQcmVzZXQuUE9SVFJBSVRfSDI2NF83MjBQXzYwOlxuICAgICAgICAgICAgcmV0dXJuIFwiUE9SVFJBSVRfSDI2NF83MjBQXzYwXCI7XG4gICAgICAgIGNhc2UgRW5jb2RpbmdPcHRpb25zUHJlc2V0LlBPUlRSQUlUX0gyNjRfMTA4MFBfMzA6XG4gICAgICAgICAgICByZXR1cm4gXCJQT1JUUkFJVF9IMjY0XzEwODBQXzMwXCI7XG4gICAgICAgIGNhc2UgRW5jb2RpbmdPcHRpb25zUHJlc2V0LlBPUlRSQUlUX0gyNjRfMTA4MFBfNjA6XG4gICAgICAgICAgICByZXR1cm4gXCJQT1JUUkFJVF9IMjY0XzEwODBQXzYwXCI7XG4gICAgICAgIGNhc2UgRW5jb2RpbmdPcHRpb25zUHJlc2V0LlVOUkVDT0dOSVpFRDpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBcIlVOUkVDT0dOSVpFRFwiO1xuICAgIH1cbn1cbmV4cG9ydHMuZW5jb2RpbmdPcHRpb25zUHJlc2V0VG9KU09OID0gZW5jb2RpbmdPcHRpb25zUHJlc2V0VG9KU09OO1xudmFyIEVncmVzc1N0YXR1cztcbihmdW5jdGlvbiAoRWdyZXNzU3RhdHVzKSB7XG4gICAgRWdyZXNzU3RhdHVzW0VncmVzc1N0YXR1c1tcIkVHUkVTU19TVEFSVElOR1wiXSA9IDBdID0gXCJFR1JFU1NfU1RBUlRJTkdcIjtcbiAgICBFZ3Jlc3NTdGF0dXNbRWdyZXNzU3RhdHVzW1wiRUdSRVNTX0FDVElWRVwiXSA9IDFdID0gXCJFR1JFU1NfQUNUSVZFXCI7XG4gICAgRWdyZXNzU3RhdHVzW0VncmVzc1N0YXR1c1tcIkVHUkVTU19FTkRJTkdcIl0gPSAyXSA9IFwiRUdSRVNTX0VORElOR1wiO1xuICAgIEVncmVzc1N0YXR1c1tFZ3Jlc3NTdGF0dXNbXCJFR1JFU1NfQ09NUExFVEVcIl0gPSAzXSA9IFwiRUdSRVNTX0NPTVBMRVRFXCI7XG4gICAgRWdyZXNzU3RhdHVzW0VncmVzc1N0YXR1c1tcIkVHUkVTU19GQUlMRURcIl0gPSA0XSA9IFwiRUdSRVNTX0ZBSUxFRFwiO1xuICAgIEVncmVzc1N0YXR1c1tFZ3Jlc3NTdGF0dXNbXCJFR1JFU1NfQUJPUlRFRFwiXSA9IDVdID0gXCJFR1JFU1NfQUJPUlRFRFwiO1xuICAgIEVncmVzc1N0YXR1c1tFZ3Jlc3NTdGF0dXNbXCJFR1JFU1NfTElNSVRfUkVBQ0hFRFwiXSA9IDZdID0gXCJFR1JFU1NfTElNSVRfUkVBQ0hFRFwiO1xuICAgIEVncmVzc1N0YXR1c1tFZ3Jlc3NTdGF0dXNbXCJVTlJFQ09HTklaRURcIl0gPSAtMV0gPSBcIlVOUkVDT0dOSVpFRFwiO1xufSkoRWdyZXNzU3RhdHVzID0gZXhwb3J0cy5FZ3Jlc3NTdGF0dXMgfHwgKGV4cG9ydHMuRWdyZXNzU3RhdHVzID0ge30pKTtcbmZ1bmN0aW9uIGVncmVzc1N0YXR1c0Zyb21KU09OKG9iamVjdCkge1xuICAgIHN3aXRjaCAob2JqZWN0KSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgY2FzZSBcIkVHUkVTU19TVEFSVElOR1wiOlxuICAgICAgICAgICAgcmV0dXJuIEVncmVzc1N0YXR1cy5FR1JFU1NfU1RBUlRJTkc7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgY2FzZSBcIkVHUkVTU19BQ1RJVkVcIjpcbiAgICAgICAgICAgIHJldHVybiBFZ3Jlc3NTdGF0dXMuRUdSRVNTX0FDVElWRTtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICBjYXNlIFwiRUdSRVNTX0VORElOR1wiOlxuICAgICAgICAgICAgcmV0dXJuIEVncmVzc1N0YXR1cy5FR1JFU1NfRU5ESU5HO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgIGNhc2UgXCJFR1JFU1NfQ09NUExFVEVcIjpcbiAgICAgICAgICAgIHJldHVybiBFZ3Jlc3NTdGF0dXMuRUdSRVNTX0NPTVBMRVRFO1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgIGNhc2UgXCJFR1JFU1NfRkFJTEVEXCI6XG4gICAgICAgICAgICByZXR1cm4gRWdyZXNzU3RhdHVzLkVHUkVTU19GQUlMRUQ7XG4gICAgICAgIGNhc2UgNTpcbiAgICAgICAgY2FzZSBcIkVHUkVTU19BQk9SVEVEXCI6XG4gICAgICAgICAgICByZXR1cm4gRWdyZXNzU3RhdHVzLkVHUkVTU19BQk9SVEVEO1xuICAgICAgICBjYXNlIDY6XG4gICAgICAgIGNhc2UgXCJFR1JFU1NfTElNSVRfUkVBQ0hFRFwiOlxuICAgICAgICAgICAgcmV0dXJuIEVncmVzc1N0YXR1cy5FR1JFU1NfTElNSVRfUkVBQ0hFRDtcbiAgICAgICAgY2FzZSAtMTpcbiAgICAgICAgY2FzZSBcIlVOUkVDT0dOSVpFRFwiOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIEVncmVzc1N0YXR1cy5VTlJFQ09HTklaRUQ7XG4gICAgfVxufVxuZXhwb3J0cy5lZ3Jlc3NTdGF0dXNGcm9tSlNPTiA9IGVncmVzc1N0YXR1c0Zyb21KU09OO1xuZnVuY3Rpb24gZWdyZXNzU3RhdHVzVG9KU09OKG9iamVjdCkge1xuICAgIHN3aXRjaCAob2JqZWN0KSB7XG4gICAgICAgIGNhc2UgRWdyZXNzU3RhdHVzLkVHUkVTU19TVEFSVElORzpcbiAgICAgICAgICAgIHJldHVybiBcIkVHUkVTU19TVEFSVElOR1wiO1xuICAgICAgICBjYXNlIEVncmVzc1N0YXR1cy5FR1JFU1NfQUNUSVZFOlxuICAgICAgICAgICAgcmV0dXJuIFwiRUdSRVNTX0FDVElWRVwiO1xuICAgICAgICBjYXNlIEVncmVzc1N0YXR1cy5FR1JFU1NfRU5ESU5HOlxuICAgICAgICAgICAgcmV0dXJuIFwiRUdSRVNTX0VORElOR1wiO1xuICAgICAgICBjYXNlIEVncmVzc1N0YXR1cy5FR1JFU1NfQ09NUExFVEU6XG4gICAgICAgICAgICByZXR1cm4gXCJFR1JFU1NfQ09NUExFVEVcIjtcbiAgICAgICAgY2FzZSBFZ3Jlc3NTdGF0dXMuRUdSRVNTX0ZBSUxFRDpcbiAgICAgICAgICAgIHJldHVybiBcIkVHUkVTU19GQUlMRURcIjtcbiAgICAgICAgY2FzZSBFZ3Jlc3NTdGF0dXMuRUdSRVNTX0FCT1JURUQ6XG4gICAgICAgICAgICByZXR1cm4gXCJFR1JFU1NfQUJPUlRFRFwiO1xuICAgICAgICBjYXNlIEVncmVzc1N0YXR1cy5FR1JFU1NfTElNSVRfUkVBQ0hFRDpcbiAgICAgICAgICAgIHJldHVybiBcIkVHUkVTU19MSU1JVF9SRUFDSEVEXCI7XG4gICAgICAgIGNhc2UgRWdyZXNzU3RhdHVzLlVOUkVDT0dOSVpFRDpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBcIlVOUkVDT0dOSVpFRFwiO1xuICAgIH1cbn1cbmV4cG9ydHMuZWdyZXNzU3RhdHVzVG9KU09OID0gZWdyZXNzU3RhdHVzVG9KU09OO1xudmFyIFN0cmVhbUluZm9fU3RhdHVzO1xuKGZ1bmN0aW9uIChTdHJlYW1JbmZvX1N0YXR1cykge1xuICAgIFN0cmVhbUluZm9fU3RhdHVzW1N0cmVhbUluZm9fU3RhdHVzW1wiQUNUSVZFXCJdID0gMF0gPSBcIkFDVElWRVwiO1xuICAgIFN0cmVhbUluZm9fU3RhdHVzW1N0cmVhbUluZm9fU3RhdHVzW1wiRklOSVNIRURcIl0gPSAxXSA9IFwiRklOSVNIRURcIjtcbiAgICBTdHJlYW1JbmZvX1N0YXR1c1tTdHJlYW1JbmZvX1N0YXR1c1tcIkZBSUxFRFwiXSA9IDJdID0gXCJGQUlMRURcIjtcbiAgICBTdHJlYW1JbmZvX1N0YXR1c1tTdHJlYW1JbmZvX1N0YXR1c1tcIlVOUkVDT0dOSVpFRFwiXSA9IC0xXSA9IFwiVU5SRUNPR05JWkVEXCI7XG59KShTdHJlYW1JbmZvX1N0YXR1cyA9IGV4cG9ydHMuU3RyZWFtSW5mb19TdGF0dXMgfHwgKGV4cG9ydHMuU3RyZWFtSW5mb19TdGF0dXMgPSB7fSkpO1xuZnVuY3Rpb24gc3RyZWFtSW5mb19TdGF0dXNGcm9tSlNPTihvYmplY3QpIHtcbiAgICBzd2l0Y2ggKG9iamVjdCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgIGNhc2UgXCJBQ1RJVkVcIjpcbiAgICAgICAgICAgIHJldHVybiBTdHJlYW1JbmZvX1N0YXR1cy5BQ1RJVkU7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgY2FzZSBcIkZJTklTSEVEXCI6XG4gICAgICAgICAgICByZXR1cm4gU3RyZWFtSW5mb19TdGF0dXMuRklOSVNIRUQ7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgY2FzZSBcIkZBSUxFRFwiOlxuICAgICAgICAgICAgcmV0dXJuIFN0cmVhbUluZm9fU3RhdHVzLkZBSUxFRDtcbiAgICAgICAgY2FzZSAtMTpcbiAgICAgICAgY2FzZSBcIlVOUkVDT0dOSVpFRFwiOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIFN0cmVhbUluZm9fU3RhdHVzLlVOUkVDT0dOSVpFRDtcbiAgICB9XG59XG5leHBvcnRzLnN0cmVhbUluZm9fU3RhdHVzRnJvbUpTT04gPSBzdHJlYW1JbmZvX1N0YXR1c0Zyb21KU09OO1xuZnVuY3Rpb24gc3RyZWFtSW5mb19TdGF0dXNUb0pTT04ob2JqZWN0KSB7XG4gICAgc3dpdGNoIChvYmplY3QpIHtcbiAgICAgICAgY2FzZSBTdHJlYW1JbmZvX1N0YXR1cy5BQ1RJVkU6XG4gICAgICAgICAgICByZXR1cm4gXCJBQ1RJVkVcIjtcbiAgICAgICAgY2FzZSBTdHJlYW1JbmZvX1N0YXR1cy5GSU5JU0hFRDpcbiAgICAgICAgICAgIHJldHVybiBcIkZJTklTSEVEXCI7XG4gICAgICAgIGNhc2UgU3RyZWFtSW5mb19TdGF0dXMuRkFJTEVEOlxuICAgICAgICAgICAgcmV0dXJuIFwiRkFJTEVEXCI7XG4gICAgICAgIGNhc2UgU3RyZWFtSW5mb19TdGF0dXMuVU5SRUNPR05JWkVEOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIFwiVU5SRUNPR05JWkVEXCI7XG4gICAgfVxufVxuZXhwb3J0cy5zdHJlYW1JbmZvX1N0YXR1c1RvSlNPTiA9IHN0cmVhbUluZm9fU3RhdHVzVG9KU09OO1xuZnVuY3Rpb24gY3JlYXRlQmFzZVJvb21Db21wb3NpdGVFZ3Jlc3NSZXF1ZXN0KCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHJvb21OYW1lOiBcIlwiLFxuICAgICAgICBsYXlvdXQ6IFwiXCIsXG4gICAgICAgIGF1ZGlvT25seTogZmFsc2UsXG4gICAgICAgIHZpZGVvT25seTogZmFsc2UsXG4gICAgICAgIGN1c3RvbUJhc2VVcmw6IFwiXCIsXG4gICAgICAgIGZpbGU6IHVuZGVmaW5lZCxcbiAgICAgICAgc3RyZWFtOiB1bmRlZmluZWQsXG4gICAgICAgIHNlZ21lbnRzOiB1bmRlZmluZWQsXG4gICAgICAgIHByZXNldDogdW5kZWZpbmVkLFxuICAgICAgICBhZHZhbmNlZDogdW5kZWZpbmVkLFxuICAgICAgICBmaWxlT3V0cHV0czogW10sXG4gICAgICAgIHN0cmVhbU91dHB1dHM6IFtdLFxuICAgICAgICBzZWdtZW50T3V0cHV0czogW10sXG4gICAgICAgIGltYWdlT3V0cHV0czogW10sXG4gICAgfTtcbn1cbmV4cG9ydHMuUm9vbUNvbXBvc2l0ZUVncmVzc1JlcXVlc3QgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IG1pbmltYWxfMS5kZWZhdWx0LldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5yb29tTmFtZSAhPT0gdW5kZWZpbmVkICYmIG1lc3NhZ2Uucm9vbU5hbWUgIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTApLnN0cmluZyhtZXNzYWdlLnJvb21OYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5sYXlvdXQgIT09IHVuZGVmaW5lZCAmJiBtZXNzYWdlLmxheW91dCAhPT0gXCJcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxOCkuc3RyaW5nKG1lc3NhZ2UubGF5b3V0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5hdWRpb09ubHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMjQpLmJvb2wobWVzc2FnZS5hdWRpb09ubHkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnZpZGVvT25seSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigzMikuYm9vbChtZXNzYWdlLnZpZGVvT25seSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuY3VzdG9tQmFzZVVybCAhPT0gdW5kZWZpbmVkICYmIG1lc3NhZ2UuY3VzdG9tQmFzZVVybCAhPT0gXCJcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig0Mikuc3RyaW5nKG1lc3NhZ2UuY3VzdG9tQmFzZVVybCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuZmlsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBleHBvcnRzLkVuY29kZWRGaWxlT3V0cHV0LmVuY29kZShtZXNzYWdlLmZpbGUsIHdyaXRlci51aW50MzIoNTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2Uuc3RyZWFtICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGV4cG9ydHMuU3RyZWFtT3V0cHV0LmVuY29kZShtZXNzYWdlLnN0cmVhbSwgd3JpdGVyLnVpbnQzMig1OCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5zZWdtZW50cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBleHBvcnRzLlNlZ21lbnRlZEZpbGVPdXRwdXQuZW5jb2RlKG1lc3NhZ2Uuc2VnbWVudHMsIHdyaXRlci51aW50MzIoODIpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UucHJlc2V0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoNjQpLmludDMyKG1lc3NhZ2UucHJlc2V0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5hZHZhbmNlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBleHBvcnRzLkVuY29kaW5nT3B0aW9ucy5lbmNvZGUobWVzc2FnZS5hZHZhbmNlZCwgd3JpdGVyLnVpbnQzMig3NCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5maWxlT3V0cHV0cyAhPT0gdW5kZWZpbmVkICYmIG1lc3NhZ2UuZmlsZU91dHB1dHMubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHYgb2YgbWVzc2FnZS5maWxlT3V0cHV0cykge1xuICAgICAgICAgICAgICAgIGV4cG9ydHMuRW5jb2RlZEZpbGVPdXRwdXQuZW5jb2RlKHYsIHdyaXRlci51aW50MzIoOTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2Uuc3RyZWFtT3V0cHV0cyAhPT0gdW5kZWZpbmVkICYmIG1lc3NhZ2Uuc3RyZWFtT3V0cHV0cy5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgdiBvZiBtZXNzYWdlLnN0cmVhbU91dHB1dHMpIHtcbiAgICAgICAgICAgICAgICBleHBvcnRzLlN0cmVhbU91dHB1dC5lbmNvZGUodiwgd3JpdGVyLnVpbnQzMig5OCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5zZWdtZW50T3V0cHV0cyAhPT0gdW5kZWZpbmVkICYmIG1lc3NhZ2Uuc2VnbWVudE91dHB1dHMubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHYgb2YgbWVzc2FnZS5zZWdtZW50T3V0cHV0cykge1xuICAgICAgICAgICAgICAgIGV4cG9ydHMuU2VnbWVudGVkRmlsZU91dHB1dC5lbmNvZGUodiwgd3JpdGVyLnVpbnQzMigxMDYpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuaW1hZ2VPdXRwdXRzICE9PSB1bmRlZmluZWQgJiYgbWVzc2FnZS5pbWFnZU91dHB1dHMubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHYgb2YgbWVzc2FnZS5pbWFnZU91dHB1dHMpIHtcbiAgICAgICAgICAgICAgICBleHBvcnRzLkltYWdlT3V0cHV0LmVuY29kZSh2LCB3cml0ZXIudWludDMyKDExNCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBtaW5pbWFsXzEuZGVmYXVsdC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBtaW5pbWFsXzEuZGVmYXVsdC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VSb29tQ29tcG9zaXRlRWdyZXNzUmVxdWVzdCgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uucm9vbU5hbWUgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5sYXlvdXQgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5hdWRpb09ubHkgPSByZWFkZXIuYm9vbCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudmlkZW9Pbmx5ID0gcmVhZGVyLmJvb2woKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmN1c3RvbUJhc2VVcmwgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5maWxlID0gZXhwb3J0cy5FbmNvZGVkRmlsZU91dHB1dC5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc3RyZWFtID0gZXhwb3J0cy5TdHJlYW1PdXRwdXQuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5zZWdtZW50cyA9IGV4cG9ydHMuU2VnbWVudGVkRmlsZU91dHB1dC5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucHJlc2V0ID0gcmVhZGVyLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5hZHZhbmNlZCA9IGV4cG9ydHMuRW5jb2RpbmdPcHRpb25zLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZmlsZU91dHB1dHMucHVzaChleHBvcnRzLkVuY29kZWRGaWxlT3V0cHV0LmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDEyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnN0cmVhbU91dHB1dHMucHVzaChleHBvcnRzLlN0cmVhbU91dHB1dC5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5zZWdtZW50T3V0cHV0cy5wdXNoKGV4cG9ydHMuU2VnbWVudGVkRmlsZU91dHB1dC5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxNDpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5pbWFnZU91dHB1dHMucHVzaChleHBvcnRzLkltYWdlT3V0cHV0LmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByb29tTmFtZTogaXNTZXQob2JqZWN0LnJvb21OYW1lKSA/IFN0cmluZyhvYmplY3Qucm9vbU5hbWUpIDogXCJcIixcbiAgICAgICAgICAgIGxheW91dDogaXNTZXQob2JqZWN0LmxheW91dCkgPyBTdHJpbmcob2JqZWN0LmxheW91dCkgOiBcIlwiLFxuICAgICAgICAgICAgYXVkaW9Pbmx5OiBpc1NldChvYmplY3QuYXVkaW9Pbmx5KSA/IEJvb2xlYW4ob2JqZWN0LmF1ZGlvT25seSkgOiBmYWxzZSxcbiAgICAgICAgICAgIHZpZGVvT25seTogaXNTZXQob2JqZWN0LnZpZGVvT25seSkgPyBCb29sZWFuKG9iamVjdC52aWRlb09ubHkpIDogZmFsc2UsXG4gICAgICAgICAgICBjdXN0b21CYXNlVXJsOiBpc1NldChvYmplY3QuY3VzdG9tQmFzZVVybCkgPyBTdHJpbmcob2JqZWN0LmN1c3RvbUJhc2VVcmwpIDogXCJcIixcbiAgICAgICAgICAgIGZpbGU6IGlzU2V0KG9iamVjdC5maWxlKSA/IGV4cG9ydHMuRW5jb2RlZEZpbGVPdXRwdXQuZnJvbUpTT04ob2JqZWN0LmZpbGUpIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgc3RyZWFtOiBpc1NldChvYmplY3Quc3RyZWFtKSA/IGV4cG9ydHMuU3RyZWFtT3V0cHV0LmZyb21KU09OKG9iamVjdC5zdHJlYW0pIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgc2VnbWVudHM6IGlzU2V0KG9iamVjdC5zZWdtZW50cykgPyBleHBvcnRzLlNlZ21lbnRlZEZpbGVPdXRwdXQuZnJvbUpTT04ob2JqZWN0LnNlZ21lbnRzKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHByZXNldDogaXNTZXQob2JqZWN0LnByZXNldCkgPyBlbmNvZGluZ09wdGlvbnNQcmVzZXRGcm9tSlNPTihvYmplY3QucHJlc2V0KSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGFkdmFuY2VkOiBpc1NldChvYmplY3QuYWR2YW5jZWQpID8gZXhwb3J0cy5FbmNvZGluZ09wdGlvbnMuZnJvbUpTT04ob2JqZWN0LmFkdmFuY2VkKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGZpbGVPdXRwdXRzOiBBcnJheS5pc0FycmF5KG9iamVjdCA9PT0gbnVsbCB8fCBvYmplY3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9iamVjdC5maWxlT3V0cHV0cylcbiAgICAgICAgICAgICAgICA/IG9iamVjdC5maWxlT3V0cHV0cy5tYXAoKGUpID0+IGV4cG9ydHMuRW5jb2RlZEZpbGVPdXRwdXQuZnJvbUpTT04oZSkpXG4gICAgICAgICAgICAgICAgOiBbXSxcbiAgICAgICAgICAgIHN0cmVhbU91dHB1dHM6IEFycmF5LmlzQXJyYXkob2JqZWN0ID09PSBudWxsIHx8IG9iamVjdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb2JqZWN0LnN0cmVhbU91dHB1dHMpXG4gICAgICAgICAgICAgICAgPyBvYmplY3Quc3RyZWFtT3V0cHV0cy5tYXAoKGUpID0+IGV4cG9ydHMuU3RyZWFtT3V0cHV0LmZyb21KU09OKGUpKVxuICAgICAgICAgICAgICAgIDogW10sXG4gICAgICAgICAgICBzZWdtZW50T3V0cHV0czogQXJyYXkuaXNBcnJheShvYmplY3QgPT09IG51bGwgfHwgb2JqZWN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvYmplY3Quc2VnbWVudE91dHB1dHMpXG4gICAgICAgICAgICAgICAgPyBvYmplY3Quc2VnbWVudE91dHB1dHMubWFwKChlKSA9PiBleHBvcnRzLlNlZ21lbnRlZEZpbGVPdXRwdXQuZnJvbUpTT04oZSkpXG4gICAgICAgICAgICAgICAgOiBbXSxcbiAgICAgICAgICAgIGltYWdlT3V0cHV0czogQXJyYXkuaXNBcnJheShvYmplY3QgPT09IG51bGwgfHwgb2JqZWN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvYmplY3QuaW1hZ2VPdXRwdXRzKVxuICAgICAgICAgICAgICAgID8gb2JqZWN0LmltYWdlT3V0cHV0cy5tYXAoKGUpID0+IGV4cG9ydHMuSW1hZ2VPdXRwdXQuZnJvbUpTT04oZSkpXG4gICAgICAgICAgICAgICAgOiBbXSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLnJvb21OYW1lICE9PSB1bmRlZmluZWQgJiYgKG9iai5yb29tTmFtZSA9IG1lc3NhZ2Uucm9vbU5hbWUpO1xuICAgICAgICBtZXNzYWdlLmxheW91dCAhPT0gdW5kZWZpbmVkICYmIChvYmoubGF5b3V0ID0gbWVzc2FnZS5sYXlvdXQpO1xuICAgICAgICBtZXNzYWdlLmF1ZGlvT25seSAhPT0gdW5kZWZpbmVkICYmIChvYmouYXVkaW9Pbmx5ID0gbWVzc2FnZS5hdWRpb09ubHkpO1xuICAgICAgICBtZXNzYWdlLnZpZGVvT25seSAhPT0gdW5kZWZpbmVkICYmIChvYmoudmlkZW9Pbmx5ID0gbWVzc2FnZS52aWRlb09ubHkpO1xuICAgICAgICBtZXNzYWdlLmN1c3RvbUJhc2VVcmwgIT09IHVuZGVmaW5lZCAmJiAob2JqLmN1c3RvbUJhc2VVcmwgPSBtZXNzYWdlLmN1c3RvbUJhc2VVcmwpO1xuICAgICAgICBtZXNzYWdlLmZpbGUgIT09IHVuZGVmaW5lZCAmJiAob2JqLmZpbGUgPSBtZXNzYWdlLmZpbGUgPyBleHBvcnRzLkVuY29kZWRGaWxlT3V0cHV0LnRvSlNPTihtZXNzYWdlLmZpbGUpIDogdW5kZWZpbmVkKTtcbiAgICAgICAgbWVzc2FnZS5zdHJlYW0gIT09IHVuZGVmaW5lZCAmJiAob2JqLnN0cmVhbSA9IG1lc3NhZ2Uuc3RyZWFtID8gZXhwb3J0cy5TdHJlYW1PdXRwdXQudG9KU09OKG1lc3NhZ2Uuc3RyZWFtKSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIG1lc3NhZ2Uuc2VnbWVudHMgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5zZWdtZW50cyA9IG1lc3NhZ2Uuc2VnbWVudHMgPyBleHBvcnRzLlNlZ21lbnRlZEZpbGVPdXRwdXQudG9KU09OKG1lc3NhZ2Uuc2VnbWVudHMpIDogdW5kZWZpbmVkKTtcbiAgICAgICAgbWVzc2FnZS5wcmVzZXQgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5wcmVzZXQgPSBtZXNzYWdlLnByZXNldCAhPT0gdW5kZWZpbmVkID8gZW5jb2RpbmdPcHRpb25zUHJlc2V0VG9KU09OKG1lc3NhZ2UucHJlc2V0KSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIG1lc3NhZ2UuYWR2YW5jZWQgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5hZHZhbmNlZCA9IG1lc3NhZ2UuYWR2YW5jZWQgPyBleHBvcnRzLkVuY29kaW5nT3B0aW9ucy50b0pTT04obWVzc2FnZS5hZHZhbmNlZCkgOiB1bmRlZmluZWQpO1xuICAgICAgICBpZiAobWVzc2FnZS5maWxlT3V0cHV0cykge1xuICAgICAgICAgICAgb2JqLmZpbGVPdXRwdXRzID0gbWVzc2FnZS5maWxlT3V0cHV0cy5tYXAoKGUpID0+IGUgPyBleHBvcnRzLkVuY29kZWRGaWxlT3V0cHV0LnRvSlNPTihlKSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvYmouZmlsZU91dHB1dHMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5zdHJlYW1PdXRwdXRzKSB7XG4gICAgICAgICAgICBvYmouc3RyZWFtT3V0cHV0cyA9IG1lc3NhZ2Uuc3RyZWFtT3V0cHV0cy5tYXAoKGUpID0+IGUgPyBleHBvcnRzLlN0cmVhbU91dHB1dC50b0pTT04oZSkgOiB1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb2JqLnN0cmVhbU91dHB1dHMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5zZWdtZW50T3V0cHV0cykge1xuICAgICAgICAgICAgb2JqLnNlZ21lbnRPdXRwdXRzID0gbWVzc2FnZS5zZWdtZW50T3V0cHV0cy5tYXAoKGUpID0+IGUgPyBleHBvcnRzLlNlZ21lbnRlZEZpbGVPdXRwdXQudG9KU09OKGUpIDogdW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9iai5zZWdtZW50T3V0cHV0cyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmltYWdlT3V0cHV0cykge1xuICAgICAgICAgICAgb2JqLmltYWdlT3V0cHV0cyA9IG1lc3NhZ2UuaW1hZ2VPdXRwdXRzLm1hcCgoZSkgPT4gZSA/IGV4cG9ydHMuSW1hZ2VPdXRwdXQudG9KU09OKGUpIDogdW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9iai5pbWFnZU91dHB1dHMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mLCBfZywgX2gsIF9qLCBfaztcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VSb29tQ29tcG9zaXRlRWdyZXNzUmVxdWVzdCgpO1xuICAgICAgICBtZXNzYWdlLnJvb21OYW1lID0gKF9hID0gb2JqZWN0LnJvb21OYW1lKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBcIlwiO1xuICAgICAgICBtZXNzYWdlLmxheW91dCA9IChfYiA9IG9iamVjdC5sYXlvdXQpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IFwiXCI7XG4gICAgICAgIG1lc3NhZ2UuYXVkaW9Pbmx5ID0gKF9jID0gb2JqZWN0LmF1ZGlvT25seSkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogZmFsc2U7XG4gICAgICAgIG1lc3NhZ2UudmlkZW9Pbmx5ID0gKF9kID0gb2JqZWN0LnZpZGVvT25seSkgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogZmFsc2U7XG4gICAgICAgIG1lc3NhZ2UuY3VzdG9tQmFzZVVybCA9IChfZSA9IG9iamVjdC5jdXN0b21CYXNlVXJsKSAhPT0gbnVsbCAmJiBfZSAhPT0gdm9pZCAwID8gX2UgOiBcIlwiO1xuICAgICAgICBtZXNzYWdlLmZpbGUgPSAob2JqZWN0LmZpbGUgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QuZmlsZSAhPT0gbnVsbClcbiAgICAgICAgICAgID8gZXhwb3J0cy5FbmNvZGVkRmlsZU91dHB1dC5mcm9tUGFydGlhbChvYmplY3QuZmlsZSlcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICBtZXNzYWdlLnN0cmVhbSA9IChvYmplY3Quc3RyZWFtICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0LnN0cmVhbSAhPT0gbnVsbClcbiAgICAgICAgICAgID8gZXhwb3J0cy5TdHJlYW1PdXRwdXQuZnJvbVBhcnRpYWwob2JqZWN0LnN0cmVhbSlcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICBtZXNzYWdlLnNlZ21lbnRzID0gKG9iamVjdC5zZWdtZW50cyAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5zZWdtZW50cyAhPT0gbnVsbClcbiAgICAgICAgICAgID8gZXhwb3J0cy5TZWdtZW50ZWRGaWxlT3V0cHV0LmZyb21QYXJ0aWFsKG9iamVjdC5zZWdtZW50cylcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICBtZXNzYWdlLnByZXNldCA9IChfZiA9IG9iamVjdC5wcmVzZXQpICE9PSBudWxsICYmIF9mICE9PSB2b2lkIDAgPyBfZiA6IHVuZGVmaW5lZDtcbiAgICAgICAgbWVzc2FnZS5hZHZhbmNlZCA9IChvYmplY3QuYWR2YW5jZWQgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QuYWR2YW5jZWQgIT09IG51bGwpXG4gICAgICAgICAgICA/IGV4cG9ydHMuRW5jb2RpbmdPcHRpb25zLmZyb21QYXJ0aWFsKG9iamVjdC5hZHZhbmNlZClcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICBtZXNzYWdlLmZpbGVPdXRwdXRzID0gKChfZyA9IG9iamVjdC5maWxlT3V0cHV0cykgPT09IG51bGwgfHwgX2cgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9nLm1hcCgoZSkgPT4gZXhwb3J0cy5FbmNvZGVkRmlsZU91dHB1dC5mcm9tUGFydGlhbChlKSkpIHx8IFtdO1xuICAgICAgICBtZXNzYWdlLnN0cmVhbU91dHB1dHMgPSAoKF9oID0gb2JqZWN0LnN0cmVhbU91dHB1dHMpID09PSBudWxsIHx8IF9oID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfaC5tYXAoKGUpID0+IGV4cG9ydHMuU3RyZWFtT3V0cHV0LmZyb21QYXJ0aWFsKGUpKSkgfHwgW107XG4gICAgICAgIG1lc3NhZ2Uuc2VnbWVudE91dHB1dHMgPSAoKF9qID0gb2JqZWN0LnNlZ21lbnRPdXRwdXRzKSA9PT0gbnVsbCB8fCBfaiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2oubWFwKChlKSA9PiBleHBvcnRzLlNlZ21lbnRlZEZpbGVPdXRwdXQuZnJvbVBhcnRpYWwoZSkpKSB8fCBbXTtcbiAgICAgICAgbWVzc2FnZS5pbWFnZU91dHB1dHMgPSAoKF9rID0gb2JqZWN0LmltYWdlT3V0cHV0cykgPT09IG51bGwgfHwgX2sgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9rLm1hcCgoZSkgPT4gZXhwb3J0cy5JbWFnZU91dHB1dC5mcm9tUGFydGlhbChlKSkpIHx8IFtdO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VXZWJFZ3Jlc3NSZXF1ZXN0KCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHVybDogXCJcIixcbiAgICAgICAgYXVkaW9Pbmx5OiBmYWxzZSxcbiAgICAgICAgdmlkZW9Pbmx5OiBmYWxzZSxcbiAgICAgICAgYXdhaXRTdGFydFNpZ25hbDogZmFsc2UsXG4gICAgICAgIGZpbGU6IHVuZGVmaW5lZCxcbiAgICAgICAgc3RyZWFtOiB1bmRlZmluZWQsXG4gICAgICAgIHNlZ21lbnRzOiB1bmRlZmluZWQsXG4gICAgICAgIHByZXNldDogdW5kZWZpbmVkLFxuICAgICAgICBhZHZhbmNlZDogdW5kZWZpbmVkLFxuICAgICAgICBmaWxlT3V0cHV0czogW10sXG4gICAgICAgIHN0cmVhbU91dHB1dHM6IFtdLFxuICAgICAgICBzZWdtZW50T3V0cHV0czogW10sXG4gICAgICAgIGltYWdlT3V0cHV0czogW10sXG4gICAgfTtcbn1cbmV4cG9ydHMuV2ViRWdyZXNzUmVxdWVzdCA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gbWluaW1hbF8xLmRlZmF1bHQuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLnVybCAhPT0gdW5kZWZpbmVkICYmIG1lc3NhZ2UudXJsICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEwKS5zdHJpbmcobWVzc2FnZS51cmwpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmF1ZGlvT25seSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxNikuYm9vbChtZXNzYWdlLmF1ZGlvT25seSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UudmlkZW9Pbmx5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDI0KS5ib29sKG1lc3NhZ2UudmlkZW9Pbmx5KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5hd2FpdFN0YXJ0U2lnbmFsID09PSB0cnVlKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDk2KS5ib29sKG1lc3NhZ2UuYXdhaXRTdGFydFNpZ25hbCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuZmlsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBleHBvcnRzLkVuY29kZWRGaWxlT3V0cHV0LmVuY29kZShtZXNzYWdlLmZpbGUsIHdyaXRlci51aW50MzIoMzQpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2Uuc3RyZWFtICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGV4cG9ydHMuU3RyZWFtT3V0cHV0LmVuY29kZShtZXNzYWdlLnN0cmVhbSwgd3JpdGVyLnVpbnQzMig0MikuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5zZWdtZW50cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBleHBvcnRzLlNlZ21lbnRlZEZpbGVPdXRwdXQuZW5jb2RlKG1lc3NhZ2Uuc2VnbWVudHMsIHdyaXRlci51aW50MzIoNTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UucHJlc2V0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoNTYpLmludDMyKG1lc3NhZ2UucHJlc2V0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5hZHZhbmNlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBleHBvcnRzLkVuY29kaW5nT3B0aW9ucy5lbmNvZGUobWVzc2FnZS5hZHZhbmNlZCwgd3JpdGVyLnVpbnQzMig2NikuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5maWxlT3V0cHV0cyAhPT0gdW5kZWZpbmVkICYmIG1lc3NhZ2UuZmlsZU91dHB1dHMubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHYgb2YgbWVzc2FnZS5maWxlT3V0cHV0cykge1xuICAgICAgICAgICAgICAgIGV4cG9ydHMuRW5jb2RlZEZpbGVPdXRwdXQuZW5jb2RlKHYsIHdyaXRlci51aW50MzIoNzQpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2Uuc3RyZWFtT3V0cHV0cyAhPT0gdW5kZWZpbmVkICYmIG1lc3NhZ2Uuc3RyZWFtT3V0cHV0cy5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgdiBvZiBtZXNzYWdlLnN0cmVhbU91dHB1dHMpIHtcbiAgICAgICAgICAgICAgICBleHBvcnRzLlN0cmVhbU91dHB1dC5lbmNvZGUodiwgd3JpdGVyLnVpbnQzMig4MikuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5zZWdtZW50T3V0cHV0cyAhPT0gdW5kZWZpbmVkICYmIG1lc3NhZ2Uuc2VnbWVudE91dHB1dHMubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHYgb2YgbWVzc2FnZS5zZWdtZW50T3V0cHV0cykge1xuICAgICAgICAgICAgICAgIGV4cG9ydHMuU2VnbWVudGVkRmlsZU91dHB1dC5lbmNvZGUodiwgd3JpdGVyLnVpbnQzMig5MCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5pbWFnZU91dHB1dHMgIT09IHVuZGVmaW5lZCAmJiBtZXNzYWdlLmltYWdlT3V0cHV0cy5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgdiBvZiBtZXNzYWdlLmltYWdlT3V0cHV0cykge1xuICAgICAgICAgICAgICAgIGV4cG9ydHMuSW1hZ2VPdXRwdXQuZW5jb2RlKHYsIHdyaXRlci51aW50MzIoMTA2KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIG1pbmltYWxfMS5kZWZhdWx0LlJlYWRlciA/IGlucHV0IDogbmV3IG1pbmltYWxfMS5kZWZhdWx0LlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVdlYkVncmVzc1JlcXVlc3QoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnVybCA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmF1ZGlvT25seSA9IHJlYWRlci5ib29sKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS52aWRlb09ubHkgPSByZWFkZXIuYm9vbCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDEyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmF3YWl0U3RhcnRTaWduYWwgPSByZWFkZXIuYm9vbCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZmlsZSA9IGV4cG9ydHMuRW5jb2RlZEZpbGVPdXRwdXQuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnN0cmVhbSA9IGV4cG9ydHMuU3RyZWFtT3V0cHV0LmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5zZWdtZW50cyA9IGV4cG9ydHMuU2VnbWVudGVkRmlsZU91dHB1dC5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucHJlc2V0ID0gcmVhZGVyLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5hZHZhbmNlZCA9IGV4cG9ydHMuRW5jb2RpbmdPcHRpb25zLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5maWxlT3V0cHV0cy5wdXNoKGV4cG9ydHMuRW5jb2RlZEZpbGVPdXRwdXQuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc3RyZWFtT3V0cHV0cy5wdXNoKGV4cG9ydHMuU3RyZWFtT3V0cHV0LmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDExOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnNlZ21lbnRPdXRwdXRzLnB1c2goZXhwb3J0cy5TZWdtZW50ZWRGaWxlT3V0cHV0LmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDEzOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmltYWdlT3V0cHV0cy5wdXNoKGV4cG9ydHMuSW1hZ2VPdXRwdXQuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHVybDogaXNTZXQob2JqZWN0LnVybCkgPyBTdHJpbmcob2JqZWN0LnVybCkgOiBcIlwiLFxuICAgICAgICAgICAgYXVkaW9Pbmx5OiBpc1NldChvYmplY3QuYXVkaW9Pbmx5KSA/IEJvb2xlYW4ob2JqZWN0LmF1ZGlvT25seSkgOiBmYWxzZSxcbiAgICAgICAgICAgIHZpZGVvT25seTogaXNTZXQob2JqZWN0LnZpZGVvT25seSkgPyBCb29sZWFuKG9iamVjdC52aWRlb09ubHkpIDogZmFsc2UsXG4gICAgICAgICAgICBhd2FpdFN0YXJ0U2lnbmFsOiBpc1NldChvYmplY3QuYXdhaXRTdGFydFNpZ25hbCkgPyBCb29sZWFuKG9iamVjdC5hd2FpdFN0YXJ0U2lnbmFsKSA6IGZhbHNlLFxuICAgICAgICAgICAgZmlsZTogaXNTZXQob2JqZWN0LmZpbGUpID8gZXhwb3J0cy5FbmNvZGVkRmlsZU91dHB1dC5mcm9tSlNPTihvYmplY3QuZmlsZSkgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBzdHJlYW06IGlzU2V0KG9iamVjdC5zdHJlYW0pID8gZXhwb3J0cy5TdHJlYW1PdXRwdXQuZnJvbUpTT04ob2JqZWN0LnN0cmVhbSkgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBzZWdtZW50czogaXNTZXQob2JqZWN0LnNlZ21lbnRzKSA/IGV4cG9ydHMuU2VnbWVudGVkRmlsZU91dHB1dC5mcm9tSlNPTihvYmplY3Quc2VnbWVudHMpIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgcHJlc2V0OiBpc1NldChvYmplY3QucHJlc2V0KSA/IGVuY29kaW5nT3B0aW9uc1ByZXNldEZyb21KU09OKG9iamVjdC5wcmVzZXQpIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgYWR2YW5jZWQ6IGlzU2V0KG9iamVjdC5hZHZhbmNlZCkgPyBleHBvcnRzLkVuY29kaW5nT3B0aW9ucy5mcm9tSlNPTihvYmplY3QuYWR2YW5jZWQpIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZmlsZU91dHB1dHM6IEFycmF5LmlzQXJyYXkob2JqZWN0ID09PSBudWxsIHx8IG9iamVjdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb2JqZWN0LmZpbGVPdXRwdXRzKVxuICAgICAgICAgICAgICAgID8gb2JqZWN0LmZpbGVPdXRwdXRzLm1hcCgoZSkgPT4gZXhwb3J0cy5FbmNvZGVkRmlsZU91dHB1dC5mcm9tSlNPTihlKSlcbiAgICAgICAgICAgICAgICA6IFtdLFxuICAgICAgICAgICAgc3RyZWFtT3V0cHV0czogQXJyYXkuaXNBcnJheShvYmplY3QgPT09IG51bGwgfHwgb2JqZWN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvYmplY3Quc3RyZWFtT3V0cHV0cylcbiAgICAgICAgICAgICAgICA/IG9iamVjdC5zdHJlYW1PdXRwdXRzLm1hcCgoZSkgPT4gZXhwb3J0cy5TdHJlYW1PdXRwdXQuZnJvbUpTT04oZSkpXG4gICAgICAgICAgICAgICAgOiBbXSxcbiAgICAgICAgICAgIHNlZ21lbnRPdXRwdXRzOiBBcnJheS5pc0FycmF5KG9iamVjdCA9PT0gbnVsbCB8fCBvYmplY3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9iamVjdC5zZWdtZW50T3V0cHV0cylcbiAgICAgICAgICAgICAgICA/IG9iamVjdC5zZWdtZW50T3V0cHV0cy5tYXAoKGUpID0+IGV4cG9ydHMuU2VnbWVudGVkRmlsZU91dHB1dC5mcm9tSlNPTihlKSlcbiAgICAgICAgICAgICAgICA6IFtdLFxuICAgICAgICAgICAgaW1hZ2VPdXRwdXRzOiBBcnJheS5pc0FycmF5KG9iamVjdCA9PT0gbnVsbCB8fCBvYmplY3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9iamVjdC5pbWFnZU91dHB1dHMpXG4gICAgICAgICAgICAgICAgPyBvYmplY3QuaW1hZ2VPdXRwdXRzLm1hcCgoZSkgPT4gZXhwb3J0cy5JbWFnZU91dHB1dC5mcm9tSlNPTihlKSlcbiAgICAgICAgICAgICAgICA6IFtdLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2UudXJsICE9PSB1bmRlZmluZWQgJiYgKG9iai51cmwgPSBtZXNzYWdlLnVybCk7XG4gICAgICAgIG1lc3NhZ2UuYXVkaW9Pbmx5ICE9PSB1bmRlZmluZWQgJiYgKG9iai5hdWRpb09ubHkgPSBtZXNzYWdlLmF1ZGlvT25seSk7XG4gICAgICAgIG1lc3NhZ2UudmlkZW9Pbmx5ICE9PSB1bmRlZmluZWQgJiYgKG9iai52aWRlb09ubHkgPSBtZXNzYWdlLnZpZGVvT25seSk7XG4gICAgICAgIG1lc3NhZ2UuYXdhaXRTdGFydFNpZ25hbCAhPT0gdW5kZWZpbmVkICYmIChvYmouYXdhaXRTdGFydFNpZ25hbCA9IG1lc3NhZ2UuYXdhaXRTdGFydFNpZ25hbCk7XG4gICAgICAgIG1lc3NhZ2UuZmlsZSAhPT0gdW5kZWZpbmVkICYmIChvYmouZmlsZSA9IG1lc3NhZ2UuZmlsZSA/IGV4cG9ydHMuRW5jb2RlZEZpbGVPdXRwdXQudG9KU09OKG1lc3NhZ2UuZmlsZSkgOiB1bmRlZmluZWQpO1xuICAgICAgICBtZXNzYWdlLnN0cmVhbSAhPT0gdW5kZWZpbmVkICYmIChvYmouc3RyZWFtID0gbWVzc2FnZS5zdHJlYW0gPyBleHBvcnRzLlN0cmVhbU91dHB1dC50b0pTT04obWVzc2FnZS5zdHJlYW0pIDogdW5kZWZpbmVkKTtcbiAgICAgICAgbWVzc2FnZS5zZWdtZW50cyAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLnNlZ21lbnRzID0gbWVzc2FnZS5zZWdtZW50cyA/IGV4cG9ydHMuU2VnbWVudGVkRmlsZU91dHB1dC50b0pTT04obWVzc2FnZS5zZWdtZW50cykgOiB1bmRlZmluZWQpO1xuICAgICAgICBtZXNzYWdlLnByZXNldCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLnByZXNldCA9IG1lc3NhZ2UucHJlc2V0ICE9PSB1bmRlZmluZWQgPyBlbmNvZGluZ09wdGlvbnNQcmVzZXRUb0pTT04obWVzc2FnZS5wcmVzZXQpIDogdW5kZWZpbmVkKTtcbiAgICAgICAgbWVzc2FnZS5hZHZhbmNlZCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLmFkdmFuY2VkID0gbWVzc2FnZS5hZHZhbmNlZCA/IGV4cG9ydHMuRW5jb2RpbmdPcHRpb25zLnRvSlNPTihtZXNzYWdlLmFkdmFuY2VkKSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIGlmIChtZXNzYWdlLmZpbGVPdXRwdXRzKSB7XG4gICAgICAgICAgICBvYmouZmlsZU91dHB1dHMgPSBtZXNzYWdlLmZpbGVPdXRwdXRzLm1hcCgoZSkgPT4gZSA/IGV4cG9ydHMuRW5jb2RlZEZpbGVPdXRwdXQudG9KU09OKGUpIDogdW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9iai5maWxlT3V0cHV0cyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnN0cmVhbU91dHB1dHMpIHtcbiAgICAgICAgICAgIG9iai5zdHJlYW1PdXRwdXRzID0gbWVzc2FnZS5zdHJlYW1PdXRwdXRzLm1hcCgoZSkgPT4gZSA/IGV4cG9ydHMuU3RyZWFtT3V0cHV0LnRvSlNPTihlKSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvYmouc3RyZWFtT3V0cHV0cyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnNlZ21lbnRPdXRwdXRzKSB7XG4gICAgICAgICAgICBvYmouc2VnbWVudE91dHB1dHMgPSBtZXNzYWdlLnNlZ21lbnRPdXRwdXRzLm1hcCgoZSkgPT4gZSA/IGV4cG9ydHMuU2VnbWVudGVkRmlsZU91dHB1dC50b0pTT04oZSkgOiB1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb2JqLnNlZ21lbnRPdXRwdXRzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuaW1hZ2VPdXRwdXRzKSB7XG4gICAgICAgICAgICBvYmouaW1hZ2VPdXRwdXRzID0gbWVzc2FnZS5pbWFnZU91dHB1dHMubWFwKChlKSA9PiBlID8gZXhwb3J0cy5JbWFnZU91dHB1dC50b0pTT04oZSkgOiB1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb2JqLmltYWdlT3V0cHV0cyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2YsIF9nLCBfaCwgX2o7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlV2ViRWdyZXNzUmVxdWVzdCgpO1xuICAgICAgICBtZXNzYWdlLnVybCA9IChfYSA9IG9iamVjdC51cmwpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFwiXCI7XG4gICAgICAgIG1lc3NhZ2UuYXVkaW9Pbmx5ID0gKF9iID0gb2JqZWN0LmF1ZGlvT25seSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogZmFsc2U7XG4gICAgICAgIG1lc3NhZ2UudmlkZW9Pbmx5ID0gKF9jID0gb2JqZWN0LnZpZGVvT25seSkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogZmFsc2U7XG4gICAgICAgIG1lc3NhZ2UuYXdhaXRTdGFydFNpZ25hbCA9IChfZCA9IG9iamVjdC5hd2FpdFN0YXJ0U2lnbmFsKSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiBmYWxzZTtcbiAgICAgICAgbWVzc2FnZS5maWxlID0gKG9iamVjdC5maWxlICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0LmZpbGUgIT09IG51bGwpXG4gICAgICAgICAgICA/IGV4cG9ydHMuRW5jb2RlZEZpbGVPdXRwdXQuZnJvbVBhcnRpYWwob2JqZWN0LmZpbGUpXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgbWVzc2FnZS5zdHJlYW0gPSAob2JqZWN0LnN0cmVhbSAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5zdHJlYW0gIT09IG51bGwpXG4gICAgICAgICAgICA/IGV4cG9ydHMuU3RyZWFtT3V0cHV0LmZyb21QYXJ0aWFsKG9iamVjdC5zdHJlYW0pXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgbWVzc2FnZS5zZWdtZW50cyA9IChvYmplY3Quc2VnbWVudHMgIT09IHVuZGVmaW5lZCAmJiBvYmplY3Quc2VnbWVudHMgIT09IG51bGwpXG4gICAgICAgICAgICA/IGV4cG9ydHMuU2VnbWVudGVkRmlsZU91dHB1dC5mcm9tUGFydGlhbChvYmplY3Quc2VnbWVudHMpXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgbWVzc2FnZS5wcmVzZXQgPSAoX2UgPSBvYmplY3QucHJlc2V0KSAhPT0gbnVsbCAmJiBfZSAhPT0gdm9pZCAwID8gX2UgOiB1bmRlZmluZWQ7XG4gICAgICAgIG1lc3NhZ2UuYWR2YW5jZWQgPSAob2JqZWN0LmFkdmFuY2VkICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0LmFkdmFuY2VkICE9PSBudWxsKVxuICAgICAgICAgICAgPyBleHBvcnRzLkVuY29kaW5nT3B0aW9ucy5mcm9tUGFydGlhbChvYmplY3QuYWR2YW5jZWQpXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgbWVzc2FnZS5maWxlT3V0cHV0cyA9ICgoX2YgPSBvYmplY3QuZmlsZU91dHB1dHMpID09PSBudWxsIHx8IF9mID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZi5tYXAoKGUpID0+IGV4cG9ydHMuRW5jb2RlZEZpbGVPdXRwdXQuZnJvbVBhcnRpYWwoZSkpKSB8fCBbXTtcbiAgICAgICAgbWVzc2FnZS5zdHJlYW1PdXRwdXRzID0gKChfZyA9IG9iamVjdC5zdHJlYW1PdXRwdXRzKSA9PT0gbnVsbCB8fCBfZyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2cubWFwKChlKSA9PiBleHBvcnRzLlN0cmVhbU91dHB1dC5mcm9tUGFydGlhbChlKSkpIHx8IFtdO1xuICAgICAgICBtZXNzYWdlLnNlZ21lbnRPdXRwdXRzID0gKChfaCA9IG9iamVjdC5zZWdtZW50T3V0cHV0cykgPT09IG51bGwgfHwgX2ggPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9oLm1hcCgoZSkgPT4gZXhwb3J0cy5TZWdtZW50ZWRGaWxlT3V0cHV0LmZyb21QYXJ0aWFsKGUpKSkgfHwgW107XG4gICAgICAgIG1lc3NhZ2UuaW1hZ2VPdXRwdXRzID0gKChfaiA9IG9iamVjdC5pbWFnZU91dHB1dHMpID09PSBudWxsIHx8IF9qID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfai5tYXAoKGUpID0+IGV4cG9ydHMuSW1hZ2VPdXRwdXQuZnJvbVBhcnRpYWwoZSkpKSB8fCBbXTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlUGFydGljaXBhbnRFZ3Jlc3NSZXF1ZXN0KCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHJvb21OYW1lOiBcIlwiLFxuICAgICAgICBpZGVudGl0eTogXCJcIixcbiAgICAgICAgc2NyZWVuU2hhcmU6IGZhbHNlLFxuICAgICAgICBwcmVzZXQ6IHVuZGVmaW5lZCxcbiAgICAgICAgYWR2YW5jZWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgZmlsZU91dHB1dHM6IFtdLFxuICAgICAgICBzdHJlYW1PdXRwdXRzOiBbXSxcbiAgICAgICAgc2VnbWVudE91dHB1dHM6IFtdLFxuICAgICAgICBpbWFnZU91dHB1dHM6IFtdLFxuICAgIH07XG59XG5leHBvcnRzLlBhcnRpY2lwYW50RWdyZXNzUmVxdWVzdCA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gbWluaW1hbF8xLmRlZmF1bHQuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLnJvb21OYW1lICE9PSB1bmRlZmluZWQgJiYgbWVzc2FnZS5yb29tTmFtZSAhPT0gXCJcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxMCkuc3RyaW5nKG1lc3NhZ2Uucm9vbU5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmlkZW50aXR5ICE9PSB1bmRlZmluZWQgJiYgbWVzc2FnZS5pZGVudGl0eSAhPT0gXCJcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxOCkuc3RyaW5nKG1lc3NhZ2UuaWRlbnRpdHkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnNjcmVlblNoYXJlID09PSB0cnVlKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDI0KS5ib29sKG1lc3NhZ2Uuc2NyZWVuU2hhcmUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnByZXNldCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDMyKS5pbnQzMihtZXNzYWdlLnByZXNldCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuYWR2YW5jZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZXhwb3J0cy5FbmNvZGluZ09wdGlvbnMuZW5jb2RlKG1lc3NhZ2UuYWR2YW5jZWQsIHdyaXRlci51aW50MzIoNDIpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuZmlsZU91dHB1dHMgIT09IHVuZGVmaW5lZCAmJiBtZXNzYWdlLmZpbGVPdXRwdXRzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCB2IG9mIG1lc3NhZ2UuZmlsZU91dHB1dHMpIHtcbiAgICAgICAgICAgICAgICBleHBvcnRzLkVuY29kZWRGaWxlT3V0cHV0LmVuY29kZSh2LCB3cml0ZXIudWludDMyKDUwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnN0cmVhbU91dHB1dHMgIT09IHVuZGVmaW5lZCAmJiBtZXNzYWdlLnN0cmVhbU91dHB1dHMubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHYgb2YgbWVzc2FnZS5zdHJlYW1PdXRwdXRzKSB7XG4gICAgICAgICAgICAgICAgZXhwb3J0cy5TdHJlYW1PdXRwdXQuZW5jb2RlKHYsIHdyaXRlci51aW50MzIoNTgpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2Uuc2VnbWVudE91dHB1dHMgIT09IHVuZGVmaW5lZCAmJiBtZXNzYWdlLnNlZ21lbnRPdXRwdXRzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCB2IG9mIG1lc3NhZ2Uuc2VnbWVudE91dHB1dHMpIHtcbiAgICAgICAgICAgICAgICBleHBvcnRzLlNlZ21lbnRlZEZpbGVPdXRwdXQuZW5jb2RlKHYsIHdyaXRlci51aW50MzIoNjYpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuaW1hZ2VPdXRwdXRzICE9PSB1bmRlZmluZWQgJiYgbWVzc2FnZS5pbWFnZU91dHB1dHMubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHYgb2YgbWVzc2FnZS5pbWFnZU91dHB1dHMpIHtcbiAgICAgICAgICAgICAgICBleHBvcnRzLkltYWdlT3V0cHV0LmVuY29kZSh2LCB3cml0ZXIudWludDMyKDc0KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIG1pbmltYWxfMS5kZWZhdWx0LlJlYWRlciA/IGlucHV0IDogbmV3IG1pbmltYWxfMS5kZWZhdWx0LlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVBhcnRpY2lwYW50RWdyZXNzUmVxdWVzdCgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uucm9vbU5hbWUgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5pZGVudGl0eSA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnNjcmVlblNoYXJlID0gcmVhZGVyLmJvb2woKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnByZXNldCA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYWR2YW5jZWQgPSBleHBvcnRzLkVuY29kaW5nT3B0aW9ucy5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZmlsZU91dHB1dHMucHVzaChleHBvcnRzLkVuY29kZWRGaWxlT3V0cHV0LmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc3RyZWFtT3V0cHV0cy5wdXNoKGV4cG9ydHMuU3RyZWFtT3V0cHV0LmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc2VnbWVudE91dHB1dHMucHVzaChleHBvcnRzLlNlZ21lbnRlZEZpbGVPdXRwdXQuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5pbWFnZU91dHB1dHMucHVzaChleHBvcnRzLkltYWdlT3V0cHV0LmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByb29tTmFtZTogaXNTZXQob2JqZWN0LnJvb21OYW1lKSA/IFN0cmluZyhvYmplY3Qucm9vbU5hbWUpIDogXCJcIixcbiAgICAgICAgICAgIGlkZW50aXR5OiBpc1NldChvYmplY3QuaWRlbnRpdHkpID8gU3RyaW5nKG9iamVjdC5pZGVudGl0eSkgOiBcIlwiLFxuICAgICAgICAgICAgc2NyZWVuU2hhcmU6IGlzU2V0KG9iamVjdC5zY3JlZW5TaGFyZSkgPyBCb29sZWFuKG9iamVjdC5zY3JlZW5TaGFyZSkgOiBmYWxzZSxcbiAgICAgICAgICAgIHByZXNldDogaXNTZXQob2JqZWN0LnByZXNldCkgPyBlbmNvZGluZ09wdGlvbnNQcmVzZXRGcm9tSlNPTihvYmplY3QucHJlc2V0KSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGFkdmFuY2VkOiBpc1NldChvYmplY3QuYWR2YW5jZWQpID8gZXhwb3J0cy5FbmNvZGluZ09wdGlvbnMuZnJvbUpTT04ob2JqZWN0LmFkdmFuY2VkKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGZpbGVPdXRwdXRzOiBBcnJheS5pc0FycmF5KG9iamVjdCA9PT0gbnVsbCB8fCBvYmplY3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9iamVjdC5maWxlT3V0cHV0cylcbiAgICAgICAgICAgICAgICA/IG9iamVjdC5maWxlT3V0cHV0cy5tYXAoKGUpID0+IGV4cG9ydHMuRW5jb2RlZEZpbGVPdXRwdXQuZnJvbUpTT04oZSkpXG4gICAgICAgICAgICAgICAgOiBbXSxcbiAgICAgICAgICAgIHN0cmVhbU91dHB1dHM6IEFycmF5LmlzQXJyYXkob2JqZWN0ID09PSBudWxsIHx8IG9iamVjdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb2JqZWN0LnN0cmVhbU91dHB1dHMpXG4gICAgICAgICAgICAgICAgPyBvYmplY3Quc3RyZWFtT3V0cHV0cy5tYXAoKGUpID0+IGV4cG9ydHMuU3RyZWFtT3V0cHV0LmZyb21KU09OKGUpKVxuICAgICAgICAgICAgICAgIDogW10sXG4gICAgICAgICAgICBzZWdtZW50T3V0cHV0czogQXJyYXkuaXNBcnJheShvYmplY3QgPT09IG51bGwgfHwgb2JqZWN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvYmplY3Quc2VnbWVudE91dHB1dHMpXG4gICAgICAgICAgICAgICAgPyBvYmplY3Quc2VnbWVudE91dHB1dHMubWFwKChlKSA9PiBleHBvcnRzLlNlZ21lbnRlZEZpbGVPdXRwdXQuZnJvbUpTT04oZSkpXG4gICAgICAgICAgICAgICAgOiBbXSxcbiAgICAgICAgICAgIGltYWdlT3V0cHV0czogQXJyYXkuaXNBcnJheShvYmplY3QgPT09IG51bGwgfHwgb2JqZWN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvYmplY3QuaW1hZ2VPdXRwdXRzKVxuICAgICAgICAgICAgICAgID8gb2JqZWN0LmltYWdlT3V0cHV0cy5tYXAoKGUpID0+IGV4cG9ydHMuSW1hZ2VPdXRwdXQuZnJvbUpTT04oZSkpXG4gICAgICAgICAgICAgICAgOiBbXSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLnJvb21OYW1lICE9PSB1bmRlZmluZWQgJiYgKG9iai5yb29tTmFtZSA9IG1lc3NhZ2Uucm9vbU5hbWUpO1xuICAgICAgICBtZXNzYWdlLmlkZW50aXR5ICE9PSB1bmRlZmluZWQgJiYgKG9iai5pZGVudGl0eSA9IG1lc3NhZ2UuaWRlbnRpdHkpO1xuICAgICAgICBtZXNzYWdlLnNjcmVlblNoYXJlICE9PSB1bmRlZmluZWQgJiYgKG9iai5zY3JlZW5TaGFyZSA9IG1lc3NhZ2Uuc2NyZWVuU2hhcmUpO1xuICAgICAgICBtZXNzYWdlLnByZXNldCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLnByZXNldCA9IG1lc3NhZ2UucHJlc2V0ICE9PSB1bmRlZmluZWQgPyBlbmNvZGluZ09wdGlvbnNQcmVzZXRUb0pTT04obWVzc2FnZS5wcmVzZXQpIDogdW5kZWZpbmVkKTtcbiAgICAgICAgbWVzc2FnZS5hZHZhbmNlZCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLmFkdmFuY2VkID0gbWVzc2FnZS5hZHZhbmNlZCA/IGV4cG9ydHMuRW5jb2RpbmdPcHRpb25zLnRvSlNPTihtZXNzYWdlLmFkdmFuY2VkKSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIGlmIChtZXNzYWdlLmZpbGVPdXRwdXRzKSB7XG4gICAgICAgICAgICBvYmouZmlsZU91dHB1dHMgPSBtZXNzYWdlLmZpbGVPdXRwdXRzLm1hcCgoZSkgPT4gZSA/IGV4cG9ydHMuRW5jb2RlZEZpbGVPdXRwdXQudG9KU09OKGUpIDogdW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9iai5maWxlT3V0cHV0cyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnN0cmVhbU91dHB1dHMpIHtcbiAgICAgICAgICAgIG9iai5zdHJlYW1PdXRwdXRzID0gbWVzc2FnZS5zdHJlYW1PdXRwdXRzLm1hcCgoZSkgPT4gZSA/IGV4cG9ydHMuU3RyZWFtT3V0cHV0LnRvSlNPTihlKSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvYmouc3RyZWFtT3V0cHV0cyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnNlZ21lbnRPdXRwdXRzKSB7XG4gICAgICAgICAgICBvYmouc2VnbWVudE91dHB1dHMgPSBtZXNzYWdlLnNlZ21lbnRPdXRwdXRzLm1hcCgoZSkgPT4gZSA/IGV4cG9ydHMuU2VnbWVudGVkRmlsZU91dHB1dC50b0pTT04oZSkgOiB1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb2JqLnNlZ21lbnRPdXRwdXRzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuaW1hZ2VPdXRwdXRzKSB7XG4gICAgICAgICAgICBvYmouaW1hZ2VPdXRwdXRzID0gbWVzc2FnZS5pbWFnZU91dHB1dHMubWFwKChlKSA9PiBlID8gZXhwb3J0cy5JbWFnZU91dHB1dC50b0pTT04oZSkgOiB1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb2JqLmltYWdlT3V0cHV0cyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2YsIF9nLCBfaDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VQYXJ0aWNpcGFudEVncmVzc1JlcXVlc3QoKTtcbiAgICAgICAgbWVzc2FnZS5yb29tTmFtZSA9IChfYSA9IG9iamVjdC5yb29tTmFtZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogXCJcIjtcbiAgICAgICAgbWVzc2FnZS5pZGVudGl0eSA9IChfYiA9IG9iamVjdC5pZGVudGl0eSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogXCJcIjtcbiAgICAgICAgbWVzc2FnZS5zY3JlZW5TaGFyZSA9IChfYyA9IG9iamVjdC5zY3JlZW5TaGFyZSkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogZmFsc2U7XG4gICAgICAgIG1lc3NhZ2UucHJlc2V0ID0gKF9kID0gb2JqZWN0LnByZXNldCkgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogdW5kZWZpbmVkO1xuICAgICAgICBtZXNzYWdlLmFkdmFuY2VkID0gKG9iamVjdC5hZHZhbmNlZCAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5hZHZhbmNlZCAhPT0gbnVsbClcbiAgICAgICAgICAgID8gZXhwb3J0cy5FbmNvZGluZ09wdGlvbnMuZnJvbVBhcnRpYWwob2JqZWN0LmFkdmFuY2VkKVxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIG1lc3NhZ2UuZmlsZU91dHB1dHMgPSAoKF9lID0gb2JqZWN0LmZpbGVPdXRwdXRzKSA9PT0gbnVsbCB8fCBfZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2UubWFwKChlKSA9PiBleHBvcnRzLkVuY29kZWRGaWxlT3V0cHV0LmZyb21QYXJ0aWFsKGUpKSkgfHwgW107XG4gICAgICAgIG1lc3NhZ2Uuc3RyZWFtT3V0cHV0cyA9ICgoX2YgPSBvYmplY3Quc3RyZWFtT3V0cHV0cykgPT09IG51bGwgfHwgX2YgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9mLm1hcCgoZSkgPT4gZXhwb3J0cy5TdHJlYW1PdXRwdXQuZnJvbVBhcnRpYWwoZSkpKSB8fCBbXTtcbiAgICAgICAgbWVzc2FnZS5zZWdtZW50T3V0cHV0cyA9ICgoX2cgPSBvYmplY3Quc2VnbWVudE91dHB1dHMpID09PSBudWxsIHx8IF9nID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZy5tYXAoKGUpID0+IGV4cG9ydHMuU2VnbWVudGVkRmlsZU91dHB1dC5mcm9tUGFydGlhbChlKSkpIHx8IFtdO1xuICAgICAgICBtZXNzYWdlLmltYWdlT3V0cHV0cyA9ICgoX2ggPSBvYmplY3QuaW1hZ2VPdXRwdXRzKSA9PT0gbnVsbCB8fCBfaCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2gubWFwKChlKSA9PiBleHBvcnRzLkltYWdlT3V0cHV0LmZyb21QYXJ0aWFsKGUpKSkgfHwgW107XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZVRyYWNrQ29tcG9zaXRlRWdyZXNzUmVxdWVzdCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICByb29tTmFtZTogXCJcIixcbiAgICAgICAgYXVkaW9UcmFja0lkOiBcIlwiLFxuICAgICAgICB2aWRlb1RyYWNrSWQ6IFwiXCIsXG4gICAgICAgIGZpbGU6IHVuZGVmaW5lZCxcbiAgICAgICAgc3RyZWFtOiB1bmRlZmluZWQsXG4gICAgICAgIHNlZ21lbnRzOiB1bmRlZmluZWQsXG4gICAgICAgIHByZXNldDogdW5kZWZpbmVkLFxuICAgICAgICBhZHZhbmNlZDogdW5kZWZpbmVkLFxuICAgICAgICBmaWxlT3V0cHV0czogW10sXG4gICAgICAgIHN0cmVhbU91dHB1dHM6IFtdLFxuICAgICAgICBzZWdtZW50T3V0cHV0czogW10sXG4gICAgICAgIGltYWdlT3V0cHV0czogW10sXG4gICAgfTtcbn1cbmV4cG9ydHMuVHJhY2tDb21wb3NpdGVFZ3Jlc3NSZXF1ZXN0ID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBtaW5pbWFsXzEuZGVmYXVsdC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2Uucm9vbU5hbWUgIT09IHVuZGVmaW5lZCAmJiBtZXNzYWdlLnJvb21OYW1lICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEwKS5zdHJpbmcobWVzc2FnZS5yb29tTmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuYXVkaW9UcmFja0lkICE9PSB1bmRlZmluZWQgJiYgbWVzc2FnZS5hdWRpb1RyYWNrSWQgIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTgpLnN0cmluZyhtZXNzYWdlLmF1ZGlvVHJhY2tJZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UudmlkZW9UcmFja0lkICE9PSB1bmRlZmluZWQgJiYgbWVzc2FnZS52aWRlb1RyYWNrSWQgIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMjYpLnN0cmluZyhtZXNzYWdlLnZpZGVvVHJhY2tJZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuZmlsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBleHBvcnRzLkVuY29kZWRGaWxlT3V0cHV0LmVuY29kZShtZXNzYWdlLmZpbGUsIHdyaXRlci51aW50MzIoMzQpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2Uuc3RyZWFtICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGV4cG9ydHMuU3RyZWFtT3V0cHV0LmVuY29kZShtZXNzYWdlLnN0cmVhbSwgd3JpdGVyLnVpbnQzMig0MikuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5zZWdtZW50cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBleHBvcnRzLlNlZ21lbnRlZEZpbGVPdXRwdXQuZW5jb2RlKG1lc3NhZ2Uuc2VnbWVudHMsIHdyaXRlci51aW50MzIoNjYpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UucHJlc2V0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoNDgpLmludDMyKG1lc3NhZ2UucHJlc2V0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5hZHZhbmNlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBleHBvcnRzLkVuY29kaW5nT3B0aW9ucy5lbmNvZGUobWVzc2FnZS5hZHZhbmNlZCwgd3JpdGVyLnVpbnQzMig1OCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5maWxlT3V0cHV0cyAhPT0gdW5kZWZpbmVkICYmIG1lc3NhZ2UuZmlsZU91dHB1dHMubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHYgb2YgbWVzc2FnZS5maWxlT3V0cHV0cykge1xuICAgICAgICAgICAgICAgIGV4cG9ydHMuRW5jb2RlZEZpbGVPdXRwdXQuZW5jb2RlKHYsIHdyaXRlci51aW50MzIoOTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2Uuc3RyZWFtT3V0cHV0cyAhPT0gdW5kZWZpbmVkICYmIG1lc3NhZ2Uuc3RyZWFtT3V0cHV0cy5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgdiBvZiBtZXNzYWdlLnN0cmVhbU91dHB1dHMpIHtcbiAgICAgICAgICAgICAgICBleHBvcnRzLlN0cmVhbU91dHB1dC5lbmNvZGUodiwgd3JpdGVyLnVpbnQzMig5OCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5zZWdtZW50T3V0cHV0cyAhPT0gdW5kZWZpbmVkICYmIG1lc3NhZ2Uuc2VnbWVudE91dHB1dHMubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHYgb2YgbWVzc2FnZS5zZWdtZW50T3V0cHV0cykge1xuICAgICAgICAgICAgICAgIGV4cG9ydHMuU2VnbWVudGVkRmlsZU91dHB1dC5lbmNvZGUodiwgd3JpdGVyLnVpbnQzMigxMDYpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuaW1hZ2VPdXRwdXRzICE9PSB1bmRlZmluZWQgJiYgbWVzc2FnZS5pbWFnZU91dHB1dHMubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHYgb2YgbWVzc2FnZS5pbWFnZU91dHB1dHMpIHtcbiAgICAgICAgICAgICAgICBleHBvcnRzLkltYWdlT3V0cHV0LmVuY29kZSh2LCB3cml0ZXIudWludDMyKDExNCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBtaW5pbWFsXzEuZGVmYXVsdC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBtaW5pbWFsXzEuZGVmYXVsdC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VUcmFja0NvbXBvc2l0ZUVncmVzc1JlcXVlc3QoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnJvb21OYW1lID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYXVkaW9UcmFja0lkID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudmlkZW9UcmFja0lkID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZmlsZSA9IGV4cG9ydHMuRW5jb2RlZEZpbGVPdXRwdXQuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnN0cmVhbSA9IGV4cG9ydHMuU3RyZWFtT3V0cHV0LmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5zZWdtZW50cyA9IGV4cG9ydHMuU2VnbWVudGVkRmlsZU91dHB1dC5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucHJlc2V0ID0gcmVhZGVyLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5hZHZhbmNlZCA9IGV4cG9ydHMuRW5jb2RpbmdPcHRpb25zLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZmlsZU91dHB1dHMucHVzaChleHBvcnRzLkVuY29kZWRGaWxlT3V0cHV0LmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDEyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnN0cmVhbU91dHB1dHMucHVzaChleHBvcnRzLlN0cmVhbU91dHB1dC5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5zZWdtZW50T3V0cHV0cy5wdXNoKGV4cG9ydHMuU2VnbWVudGVkRmlsZU91dHB1dC5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxNDpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5pbWFnZU91dHB1dHMucHVzaChleHBvcnRzLkltYWdlT3V0cHV0LmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByb29tTmFtZTogaXNTZXQob2JqZWN0LnJvb21OYW1lKSA/IFN0cmluZyhvYmplY3Qucm9vbU5hbWUpIDogXCJcIixcbiAgICAgICAgICAgIGF1ZGlvVHJhY2tJZDogaXNTZXQob2JqZWN0LmF1ZGlvVHJhY2tJZCkgPyBTdHJpbmcob2JqZWN0LmF1ZGlvVHJhY2tJZCkgOiBcIlwiLFxuICAgICAgICAgICAgdmlkZW9UcmFja0lkOiBpc1NldChvYmplY3QudmlkZW9UcmFja0lkKSA/IFN0cmluZyhvYmplY3QudmlkZW9UcmFja0lkKSA6IFwiXCIsXG4gICAgICAgICAgICBmaWxlOiBpc1NldChvYmplY3QuZmlsZSkgPyBleHBvcnRzLkVuY29kZWRGaWxlT3V0cHV0LmZyb21KU09OKG9iamVjdC5maWxlKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHN0cmVhbTogaXNTZXQob2JqZWN0LnN0cmVhbSkgPyBleHBvcnRzLlN0cmVhbU91dHB1dC5mcm9tSlNPTihvYmplY3Quc3RyZWFtKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHNlZ21lbnRzOiBpc1NldChvYmplY3Quc2VnbWVudHMpID8gZXhwb3J0cy5TZWdtZW50ZWRGaWxlT3V0cHV0LmZyb21KU09OKG9iamVjdC5zZWdtZW50cykgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBwcmVzZXQ6IGlzU2V0KG9iamVjdC5wcmVzZXQpID8gZW5jb2RpbmdPcHRpb25zUHJlc2V0RnJvbUpTT04ob2JqZWN0LnByZXNldCkgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBhZHZhbmNlZDogaXNTZXQob2JqZWN0LmFkdmFuY2VkKSA/IGV4cG9ydHMuRW5jb2RpbmdPcHRpb25zLmZyb21KU09OKG9iamVjdC5hZHZhbmNlZCkgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBmaWxlT3V0cHV0czogQXJyYXkuaXNBcnJheShvYmplY3QgPT09IG51bGwgfHwgb2JqZWN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvYmplY3QuZmlsZU91dHB1dHMpXG4gICAgICAgICAgICAgICAgPyBvYmplY3QuZmlsZU91dHB1dHMubWFwKChlKSA9PiBleHBvcnRzLkVuY29kZWRGaWxlT3V0cHV0LmZyb21KU09OKGUpKVxuICAgICAgICAgICAgICAgIDogW10sXG4gICAgICAgICAgICBzdHJlYW1PdXRwdXRzOiBBcnJheS5pc0FycmF5KG9iamVjdCA9PT0gbnVsbCB8fCBvYmplY3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9iamVjdC5zdHJlYW1PdXRwdXRzKVxuICAgICAgICAgICAgICAgID8gb2JqZWN0LnN0cmVhbU91dHB1dHMubWFwKChlKSA9PiBleHBvcnRzLlN0cmVhbU91dHB1dC5mcm9tSlNPTihlKSlcbiAgICAgICAgICAgICAgICA6IFtdLFxuICAgICAgICAgICAgc2VnbWVudE91dHB1dHM6IEFycmF5LmlzQXJyYXkob2JqZWN0ID09PSBudWxsIHx8IG9iamVjdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb2JqZWN0LnNlZ21lbnRPdXRwdXRzKVxuICAgICAgICAgICAgICAgID8gb2JqZWN0LnNlZ21lbnRPdXRwdXRzLm1hcCgoZSkgPT4gZXhwb3J0cy5TZWdtZW50ZWRGaWxlT3V0cHV0LmZyb21KU09OKGUpKVxuICAgICAgICAgICAgICAgIDogW10sXG4gICAgICAgICAgICBpbWFnZU91dHB1dHM6IEFycmF5LmlzQXJyYXkob2JqZWN0ID09PSBudWxsIHx8IG9iamVjdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb2JqZWN0LmltYWdlT3V0cHV0cylcbiAgICAgICAgICAgICAgICA/IG9iamVjdC5pbWFnZU91dHB1dHMubWFwKChlKSA9PiBleHBvcnRzLkltYWdlT3V0cHV0LmZyb21KU09OKGUpKVxuICAgICAgICAgICAgICAgIDogW10sXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS5yb29tTmFtZSAhPT0gdW5kZWZpbmVkICYmIChvYmoucm9vbU5hbWUgPSBtZXNzYWdlLnJvb21OYW1lKTtcbiAgICAgICAgbWVzc2FnZS5hdWRpb1RyYWNrSWQgIT09IHVuZGVmaW5lZCAmJiAob2JqLmF1ZGlvVHJhY2tJZCA9IG1lc3NhZ2UuYXVkaW9UcmFja0lkKTtcbiAgICAgICAgbWVzc2FnZS52aWRlb1RyYWNrSWQgIT09IHVuZGVmaW5lZCAmJiAob2JqLnZpZGVvVHJhY2tJZCA9IG1lc3NhZ2UudmlkZW9UcmFja0lkKTtcbiAgICAgICAgbWVzc2FnZS5maWxlICE9PSB1bmRlZmluZWQgJiYgKG9iai5maWxlID0gbWVzc2FnZS5maWxlID8gZXhwb3J0cy5FbmNvZGVkRmlsZU91dHB1dC50b0pTT04obWVzc2FnZS5maWxlKSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIG1lc3NhZ2Uuc3RyZWFtICE9PSB1bmRlZmluZWQgJiYgKG9iai5zdHJlYW0gPSBtZXNzYWdlLnN0cmVhbSA/IGV4cG9ydHMuU3RyZWFtT3V0cHV0LnRvSlNPTihtZXNzYWdlLnN0cmVhbSkgOiB1bmRlZmluZWQpO1xuICAgICAgICBtZXNzYWdlLnNlZ21lbnRzICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmouc2VnbWVudHMgPSBtZXNzYWdlLnNlZ21lbnRzID8gZXhwb3J0cy5TZWdtZW50ZWRGaWxlT3V0cHV0LnRvSlNPTihtZXNzYWdlLnNlZ21lbnRzKSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIG1lc3NhZ2UucHJlc2V0ICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmoucHJlc2V0ID0gbWVzc2FnZS5wcmVzZXQgIT09IHVuZGVmaW5lZCA/IGVuY29kaW5nT3B0aW9uc1ByZXNldFRvSlNPTihtZXNzYWdlLnByZXNldCkgOiB1bmRlZmluZWQpO1xuICAgICAgICBtZXNzYWdlLmFkdmFuY2VkICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmouYWR2YW5jZWQgPSBtZXNzYWdlLmFkdmFuY2VkID8gZXhwb3J0cy5FbmNvZGluZ09wdGlvbnMudG9KU09OKG1lc3NhZ2UuYWR2YW5jZWQpIDogdW5kZWZpbmVkKTtcbiAgICAgICAgaWYgKG1lc3NhZ2UuZmlsZU91dHB1dHMpIHtcbiAgICAgICAgICAgIG9iai5maWxlT3V0cHV0cyA9IG1lc3NhZ2UuZmlsZU91dHB1dHMubWFwKChlKSA9PiBlID8gZXhwb3J0cy5FbmNvZGVkRmlsZU91dHB1dC50b0pTT04oZSkgOiB1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb2JqLmZpbGVPdXRwdXRzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2Uuc3RyZWFtT3V0cHV0cykge1xuICAgICAgICAgICAgb2JqLnN0cmVhbU91dHB1dHMgPSBtZXNzYWdlLnN0cmVhbU91dHB1dHMubWFwKChlKSA9PiBlID8gZXhwb3J0cy5TdHJlYW1PdXRwdXQudG9KU09OKGUpIDogdW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9iai5zdHJlYW1PdXRwdXRzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2Uuc2VnbWVudE91dHB1dHMpIHtcbiAgICAgICAgICAgIG9iai5zZWdtZW50T3V0cHV0cyA9IG1lc3NhZ2Uuc2VnbWVudE91dHB1dHMubWFwKChlKSA9PiBlID8gZXhwb3J0cy5TZWdtZW50ZWRGaWxlT3V0cHV0LnRvSlNPTihlKSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvYmouc2VnbWVudE91dHB1dHMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5pbWFnZU91dHB1dHMpIHtcbiAgICAgICAgICAgIG9iai5pbWFnZU91dHB1dHMgPSBtZXNzYWdlLmltYWdlT3V0cHV0cy5tYXAoKGUpID0+IGUgPyBleHBvcnRzLkltYWdlT3V0cHV0LnRvSlNPTihlKSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvYmouaW1hZ2VPdXRwdXRzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZiwgX2csIF9oO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVRyYWNrQ29tcG9zaXRlRWdyZXNzUmVxdWVzdCgpO1xuICAgICAgICBtZXNzYWdlLnJvb21OYW1lID0gKF9hID0gb2JqZWN0LnJvb21OYW1lKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBcIlwiO1xuICAgICAgICBtZXNzYWdlLmF1ZGlvVHJhY2tJZCA9IChfYiA9IG9iamVjdC5hdWRpb1RyYWNrSWQpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IFwiXCI7XG4gICAgICAgIG1lc3NhZ2UudmlkZW9UcmFja0lkID0gKF9jID0gb2JqZWN0LnZpZGVvVHJhY2tJZCkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogXCJcIjtcbiAgICAgICAgbWVzc2FnZS5maWxlID0gKG9iamVjdC5maWxlICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0LmZpbGUgIT09IG51bGwpXG4gICAgICAgICAgICA/IGV4cG9ydHMuRW5jb2RlZEZpbGVPdXRwdXQuZnJvbVBhcnRpYWwob2JqZWN0LmZpbGUpXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgbWVzc2FnZS5zdHJlYW0gPSAob2JqZWN0LnN0cmVhbSAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5zdHJlYW0gIT09IG51bGwpXG4gICAgICAgICAgICA/IGV4cG9ydHMuU3RyZWFtT3V0cHV0LmZyb21QYXJ0aWFsKG9iamVjdC5zdHJlYW0pXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgbWVzc2FnZS5zZWdtZW50cyA9IChvYmplY3Quc2VnbWVudHMgIT09IHVuZGVmaW5lZCAmJiBvYmplY3Quc2VnbWVudHMgIT09IG51bGwpXG4gICAgICAgICAgICA/IGV4cG9ydHMuU2VnbWVudGVkRmlsZU91dHB1dC5mcm9tUGFydGlhbChvYmplY3Quc2VnbWVudHMpXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgbWVzc2FnZS5wcmVzZXQgPSAoX2QgPSBvYmplY3QucHJlc2V0KSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiB1bmRlZmluZWQ7XG4gICAgICAgIG1lc3NhZ2UuYWR2YW5jZWQgPSAob2JqZWN0LmFkdmFuY2VkICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0LmFkdmFuY2VkICE9PSBudWxsKVxuICAgICAgICAgICAgPyBleHBvcnRzLkVuY29kaW5nT3B0aW9ucy5mcm9tUGFydGlhbChvYmplY3QuYWR2YW5jZWQpXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgbWVzc2FnZS5maWxlT3V0cHV0cyA9ICgoX2UgPSBvYmplY3QuZmlsZU91dHB1dHMpID09PSBudWxsIHx8IF9lID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZS5tYXAoKGUpID0+IGV4cG9ydHMuRW5jb2RlZEZpbGVPdXRwdXQuZnJvbVBhcnRpYWwoZSkpKSB8fCBbXTtcbiAgICAgICAgbWVzc2FnZS5zdHJlYW1PdXRwdXRzID0gKChfZiA9IG9iamVjdC5zdHJlYW1PdXRwdXRzKSA9PT0gbnVsbCB8fCBfZiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2YubWFwKChlKSA9PiBleHBvcnRzLlN0cmVhbU91dHB1dC5mcm9tUGFydGlhbChlKSkpIHx8IFtdO1xuICAgICAgICBtZXNzYWdlLnNlZ21lbnRPdXRwdXRzID0gKChfZyA9IG9iamVjdC5zZWdtZW50T3V0cHV0cykgPT09IG51bGwgfHwgX2cgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9nLm1hcCgoZSkgPT4gZXhwb3J0cy5TZWdtZW50ZWRGaWxlT3V0cHV0LmZyb21QYXJ0aWFsKGUpKSkgfHwgW107XG4gICAgICAgIG1lc3NhZ2UuaW1hZ2VPdXRwdXRzID0gKChfaCA9IG9iamVjdC5pbWFnZU91dHB1dHMpID09PSBudWxsIHx8IF9oID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfaC5tYXAoKGUpID0+IGV4cG9ydHMuSW1hZ2VPdXRwdXQuZnJvbVBhcnRpYWwoZSkpKSB8fCBbXTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlVHJhY2tFZ3Jlc3NSZXF1ZXN0KCkge1xuICAgIHJldHVybiB7IHJvb21OYW1lOiBcIlwiLCB0cmFja0lkOiBcIlwiLCBmaWxlOiB1bmRlZmluZWQsIHdlYnNvY2tldFVybDogdW5kZWZpbmVkIH07XG59XG5leHBvcnRzLlRyYWNrRWdyZXNzUmVxdWVzdCA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gbWluaW1hbF8xLmRlZmF1bHQuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLnJvb21OYW1lICE9PSB1bmRlZmluZWQgJiYgbWVzc2FnZS5yb29tTmFtZSAhPT0gXCJcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxMCkuc3RyaW5nKG1lc3NhZ2Uucm9vbU5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnRyYWNrSWQgIT09IHVuZGVmaW5lZCAmJiBtZXNzYWdlLnRyYWNrSWQgIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTgpLnN0cmluZyhtZXNzYWdlLnRyYWNrSWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmZpbGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZXhwb3J0cy5EaXJlY3RGaWxlT3V0cHV0LmVuY29kZShtZXNzYWdlLmZpbGUsIHdyaXRlci51aW50MzIoMjYpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2Uud2Vic29ja2V0VXJsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMzQpLnN0cmluZyhtZXNzYWdlLndlYnNvY2tldFVybCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgbWluaW1hbF8xLmRlZmF1bHQuUmVhZGVyID8gaW5wdXQgOiBuZXcgbWluaW1hbF8xLmRlZmF1bHQuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlVHJhY2tFZ3Jlc3NSZXF1ZXN0KCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5yb29tTmFtZSA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnRyYWNrSWQgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5maWxlID0gZXhwb3J0cy5EaXJlY3RGaWxlT3V0cHV0LmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS53ZWJzb2NrZXRVcmwgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJvb21OYW1lOiBpc1NldChvYmplY3Qucm9vbU5hbWUpID8gU3RyaW5nKG9iamVjdC5yb29tTmFtZSkgOiBcIlwiLFxuICAgICAgICAgICAgdHJhY2tJZDogaXNTZXQob2JqZWN0LnRyYWNrSWQpID8gU3RyaW5nKG9iamVjdC50cmFja0lkKSA6IFwiXCIsXG4gICAgICAgICAgICBmaWxlOiBpc1NldChvYmplY3QuZmlsZSkgPyBleHBvcnRzLkRpcmVjdEZpbGVPdXRwdXQuZnJvbUpTT04ob2JqZWN0LmZpbGUpIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgd2Vic29ja2V0VXJsOiBpc1NldChvYmplY3Qud2Vic29ja2V0VXJsKSA/IFN0cmluZyhvYmplY3Qud2Vic29ja2V0VXJsKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLnJvb21OYW1lICE9PSB1bmRlZmluZWQgJiYgKG9iai5yb29tTmFtZSA9IG1lc3NhZ2Uucm9vbU5hbWUpO1xuICAgICAgICBtZXNzYWdlLnRyYWNrSWQgIT09IHVuZGVmaW5lZCAmJiAob2JqLnRyYWNrSWQgPSBtZXNzYWdlLnRyYWNrSWQpO1xuICAgICAgICBtZXNzYWdlLmZpbGUgIT09IHVuZGVmaW5lZCAmJiAob2JqLmZpbGUgPSBtZXNzYWdlLmZpbGUgPyBleHBvcnRzLkRpcmVjdEZpbGVPdXRwdXQudG9KU09OKG1lc3NhZ2UuZmlsZSkgOiB1bmRlZmluZWQpO1xuICAgICAgICBtZXNzYWdlLndlYnNvY2tldFVybCAhPT0gdW5kZWZpbmVkICYmIChvYmoud2Vic29ja2V0VXJsID0gbWVzc2FnZS53ZWJzb2NrZXRVcmwpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVRyYWNrRWdyZXNzUmVxdWVzdCgpO1xuICAgICAgICBtZXNzYWdlLnJvb21OYW1lID0gKF9hID0gb2JqZWN0LnJvb21OYW1lKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBcIlwiO1xuICAgICAgICBtZXNzYWdlLnRyYWNrSWQgPSAoX2IgPSBvYmplY3QudHJhY2tJZCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogXCJcIjtcbiAgICAgICAgbWVzc2FnZS5maWxlID0gKG9iamVjdC5maWxlICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0LmZpbGUgIT09IG51bGwpXG4gICAgICAgICAgICA/IGV4cG9ydHMuRGlyZWN0RmlsZU91dHB1dC5mcm9tUGFydGlhbChvYmplY3QuZmlsZSlcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICBtZXNzYWdlLndlYnNvY2tldFVybCA9IChfYyA9IG9iamVjdC53ZWJzb2NrZXRVcmwpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlRW5jb2RlZEZpbGVPdXRwdXQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZmlsZVR5cGU6IDAsXG4gICAgICAgIGZpbGVwYXRoOiBcIlwiLFxuICAgICAgICBkaXNhYmxlTWFuaWZlc3Q6IGZhbHNlLFxuICAgICAgICBzMzogdW5kZWZpbmVkLFxuICAgICAgICBnY3A6IHVuZGVmaW5lZCxcbiAgICAgICAgYXp1cmU6IHVuZGVmaW5lZCxcbiAgICAgICAgYWxpT1NTOiB1bmRlZmluZWQsXG4gICAgfTtcbn1cbmV4cG9ydHMuRW5jb2RlZEZpbGVPdXRwdXQgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IG1pbmltYWxfMS5kZWZhdWx0LldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5maWxlVHlwZSAhPT0gdW5kZWZpbmVkICYmIG1lc3NhZ2UuZmlsZVR5cGUgIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoOCkuaW50MzIobWVzc2FnZS5maWxlVHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuZmlsZXBhdGggIT09IHVuZGVmaW5lZCAmJiBtZXNzYWdlLmZpbGVwYXRoICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDE4KS5zdHJpbmcobWVzc2FnZS5maWxlcGF0aCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuZGlzYWJsZU1hbmlmZXN0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDQ4KS5ib29sKG1lc3NhZ2UuZGlzYWJsZU1hbmlmZXN0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5zMyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBleHBvcnRzLlMzVXBsb2FkLmVuY29kZShtZXNzYWdlLnMzLCB3cml0ZXIudWludDMyKDI2KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmdjcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBleHBvcnRzLkdDUFVwbG9hZC5lbmNvZGUobWVzc2FnZS5nY3AsIHdyaXRlci51aW50MzIoMzQpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuYXp1cmUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZXhwb3J0cy5BenVyZUJsb2JVcGxvYWQuZW5jb2RlKG1lc3NhZ2UuYXp1cmUsIHdyaXRlci51aW50MzIoNDIpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuYWxpT1NTICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGV4cG9ydHMuQWxpT1NTVXBsb2FkLmVuY29kZShtZXNzYWdlLmFsaU9TUywgd3JpdGVyLnVpbnQzMig1OCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBtaW5pbWFsXzEuZGVmYXVsdC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBtaW5pbWFsXzEuZGVmYXVsdC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VFbmNvZGVkRmlsZU91dHB1dCgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZmlsZVR5cGUgPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmZpbGVwYXRoID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZGlzYWJsZU1hbmlmZXN0ID0gcmVhZGVyLmJvb2woKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnMzID0gZXhwb3J0cy5TM1VwbG9hZC5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZ2NwID0gZXhwb3J0cy5HQ1BVcGxvYWQuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmF6dXJlID0gZXhwb3J0cy5BenVyZUJsb2JVcGxvYWQuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmFsaU9TUyA9IGV4cG9ydHMuQWxpT1NTVXBsb2FkLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZpbGVUeXBlOiBpc1NldChvYmplY3QuZmlsZVR5cGUpID8gZW5jb2RlZEZpbGVUeXBlRnJvbUpTT04ob2JqZWN0LmZpbGVUeXBlKSA6IDAsXG4gICAgICAgICAgICBmaWxlcGF0aDogaXNTZXQob2JqZWN0LmZpbGVwYXRoKSA/IFN0cmluZyhvYmplY3QuZmlsZXBhdGgpIDogXCJcIixcbiAgICAgICAgICAgIGRpc2FibGVNYW5pZmVzdDogaXNTZXQob2JqZWN0LmRpc2FibGVNYW5pZmVzdCkgPyBCb29sZWFuKG9iamVjdC5kaXNhYmxlTWFuaWZlc3QpIDogZmFsc2UsXG4gICAgICAgICAgICBzMzogaXNTZXQob2JqZWN0LnMzKSA/IGV4cG9ydHMuUzNVcGxvYWQuZnJvbUpTT04ob2JqZWN0LnMzKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGdjcDogaXNTZXQob2JqZWN0LmdjcCkgPyBleHBvcnRzLkdDUFVwbG9hZC5mcm9tSlNPTihvYmplY3QuZ2NwKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGF6dXJlOiBpc1NldChvYmplY3QuYXp1cmUpID8gZXhwb3J0cy5BenVyZUJsb2JVcGxvYWQuZnJvbUpTT04ob2JqZWN0LmF6dXJlKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGFsaU9TUzogaXNTZXQob2JqZWN0LmFsaU9TUykgPyBleHBvcnRzLkFsaU9TU1VwbG9hZC5mcm9tSlNPTihvYmplY3QuYWxpT1NTKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLmZpbGVUeXBlICE9PSB1bmRlZmluZWQgJiYgKG9iai5maWxlVHlwZSA9IGVuY29kZWRGaWxlVHlwZVRvSlNPTihtZXNzYWdlLmZpbGVUeXBlKSk7XG4gICAgICAgIG1lc3NhZ2UuZmlsZXBhdGggIT09IHVuZGVmaW5lZCAmJiAob2JqLmZpbGVwYXRoID0gbWVzc2FnZS5maWxlcGF0aCk7XG4gICAgICAgIG1lc3NhZ2UuZGlzYWJsZU1hbmlmZXN0ICE9PSB1bmRlZmluZWQgJiYgKG9iai5kaXNhYmxlTWFuaWZlc3QgPSBtZXNzYWdlLmRpc2FibGVNYW5pZmVzdCk7XG4gICAgICAgIG1lc3NhZ2UuczMgIT09IHVuZGVmaW5lZCAmJiAob2JqLnMzID0gbWVzc2FnZS5zMyA/IGV4cG9ydHMuUzNVcGxvYWQudG9KU09OKG1lc3NhZ2UuczMpIDogdW5kZWZpbmVkKTtcbiAgICAgICAgbWVzc2FnZS5nY3AgIT09IHVuZGVmaW5lZCAmJiAob2JqLmdjcCA9IG1lc3NhZ2UuZ2NwID8gZXhwb3J0cy5HQ1BVcGxvYWQudG9KU09OKG1lc3NhZ2UuZ2NwKSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIG1lc3NhZ2UuYXp1cmUgIT09IHVuZGVmaW5lZCAmJiAob2JqLmF6dXJlID0gbWVzc2FnZS5henVyZSA/IGV4cG9ydHMuQXp1cmVCbG9iVXBsb2FkLnRvSlNPTihtZXNzYWdlLmF6dXJlKSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIG1lc3NhZ2UuYWxpT1NTICE9PSB1bmRlZmluZWQgJiYgKG9iai5hbGlPU1MgPSBtZXNzYWdlLmFsaU9TUyA/IGV4cG9ydHMuQWxpT1NTVXBsb2FkLnRvSlNPTihtZXNzYWdlLmFsaU9TUykgOiB1bmRlZmluZWQpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZUVuY29kZWRGaWxlT3V0cHV0KCk7XG4gICAgICAgIG1lc3NhZ2UuZmlsZVR5cGUgPSAoX2EgPSBvYmplY3QuZmlsZVR5cGUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IDA7XG4gICAgICAgIG1lc3NhZ2UuZmlsZXBhdGggPSAoX2IgPSBvYmplY3QuZmlsZXBhdGgpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IFwiXCI7XG4gICAgICAgIG1lc3NhZ2UuZGlzYWJsZU1hbmlmZXN0ID0gKF9jID0gb2JqZWN0LmRpc2FibGVNYW5pZmVzdCkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogZmFsc2U7XG4gICAgICAgIG1lc3NhZ2UuczMgPSAob2JqZWN0LnMzICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0LnMzICE9PSBudWxsKSA/IGV4cG9ydHMuUzNVcGxvYWQuZnJvbVBhcnRpYWwob2JqZWN0LnMzKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgbWVzc2FnZS5nY3AgPSAob2JqZWN0LmdjcCAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5nY3AgIT09IG51bGwpID8gZXhwb3J0cy5HQ1BVcGxvYWQuZnJvbVBhcnRpYWwob2JqZWN0LmdjcCkgOiB1bmRlZmluZWQ7XG4gICAgICAgIG1lc3NhZ2UuYXp1cmUgPSAob2JqZWN0LmF6dXJlICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0LmF6dXJlICE9PSBudWxsKVxuICAgICAgICAgICAgPyBleHBvcnRzLkF6dXJlQmxvYlVwbG9hZC5mcm9tUGFydGlhbChvYmplY3QuYXp1cmUpXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgbWVzc2FnZS5hbGlPU1MgPSAob2JqZWN0LmFsaU9TUyAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5hbGlPU1MgIT09IG51bGwpXG4gICAgICAgICAgICA/IGV4cG9ydHMuQWxpT1NTVXBsb2FkLmZyb21QYXJ0aWFsKG9iamVjdC5hbGlPU1MpXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlU2VnbWVudGVkRmlsZU91dHB1dCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBwcm90b2NvbDogMCxcbiAgICAgICAgZmlsZW5hbWVQcmVmaXg6IFwiXCIsXG4gICAgICAgIHBsYXlsaXN0TmFtZTogXCJcIixcbiAgICAgICAgbGl2ZVBsYXlsaXN0TmFtZTogXCJcIixcbiAgICAgICAgc2VnbWVudER1cmF0aW9uOiAwLFxuICAgICAgICBmaWxlbmFtZVN1ZmZpeDogMCxcbiAgICAgICAgZGlzYWJsZU1hbmlmZXN0OiBmYWxzZSxcbiAgICAgICAgczM6IHVuZGVmaW5lZCxcbiAgICAgICAgZ2NwOiB1bmRlZmluZWQsXG4gICAgICAgIGF6dXJlOiB1bmRlZmluZWQsXG4gICAgICAgIGFsaU9TUzogdW5kZWZpbmVkLFxuICAgIH07XG59XG5leHBvcnRzLlNlZ21lbnRlZEZpbGVPdXRwdXQgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IG1pbmltYWxfMS5kZWZhdWx0LldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5wcm90b2NvbCAhPT0gdW5kZWZpbmVkICYmIG1lc3NhZ2UucHJvdG9jb2wgIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoOCkuaW50MzIobWVzc2FnZS5wcm90b2NvbCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuZmlsZW5hbWVQcmVmaXggIT09IHVuZGVmaW5lZCAmJiBtZXNzYWdlLmZpbGVuYW1lUHJlZml4ICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDE4KS5zdHJpbmcobWVzc2FnZS5maWxlbmFtZVByZWZpeCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UucGxheWxpc3ROYW1lICE9PSB1bmRlZmluZWQgJiYgbWVzc2FnZS5wbGF5bGlzdE5hbWUgIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMjYpLnN0cmluZyhtZXNzYWdlLnBsYXlsaXN0TmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UubGl2ZVBsYXlsaXN0TmFtZSAhPT0gdW5kZWZpbmVkICYmIG1lc3NhZ2UubGl2ZVBsYXlsaXN0TmFtZSAhPT0gXCJcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig5MCkuc3RyaW5nKG1lc3NhZ2UubGl2ZVBsYXlsaXN0TmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2Uuc2VnbWVudER1cmF0aW9uICE9PSB1bmRlZmluZWQgJiYgbWVzc2FnZS5zZWdtZW50RHVyYXRpb24gIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMzIpLnVpbnQzMihtZXNzYWdlLnNlZ21lbnREdXJhdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuZmlsZW5hbWVTdWZmaXggIT09IHVuZGVmaW5lZCAmJiBtZXNzYWdlLmZpbGVuYW1lU3VmZml4ICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDgwKS5pbnQzMihtZXNzYWdlLmZpbGVuYW1lU3VmZml4KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5kaXNhYmxlTWFuaWZlc3QgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoNjQpLmJvb2wobWVzc2FnZS5kaXNhYmxlTWFuaWZlc3QpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnMzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGV4cG9ydHMuUzNVcGxvYWQuZW5jb2RlKG1lc3NhZ2UuczMsIHdyaXRlci51aW50MzIoNDIpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuZ2NwICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGV4cG9ydHMuR0NQVXBsb2FkLmVuY29kZShtZXNzYWdlLmdjcCwgd3JpdGVyLnVpbnQzMig1MCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5henVyZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBleHBvcnRzLkF6dXJlQmxvYlVwbG9hZC5lbmNvZGUobWVzc2FnZS5henVyZSwgd3JpdGVyLnVpbnQzMig1OCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5hbGlPU1MgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZXhwb3J0cy5BbGlPU1NVcGxvYWQuZW5jb2RlKG1lc3NhZ2UuYWxpT1NTLCB3cml0ZXIudWludDMyKDc0KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIG1pbmltYWxfMS5kZWZhdWx0LlJlYWRlciA/IGlucHV0IDogbmV3IG1pbmltYWxfMS5kZWZhdWx0LlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVNlZ21lbnRlZEZpbGVPdXRwdXQoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnByb3RvY29sID0gcmVhZGVyLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5maWxlbmFtZVByZWZpeCA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnBsYXlsaXN0TmFtZSA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5saXZlUGxheWxpc3ROYW1lID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc2VnbWVudER1cmF0aW9uID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmZpbGVuYW1lU3VmZml4ID0gcmVhZGVyLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5kaXNhYmxlTWFuaWZlc3QgPSByZWFkZXIuYm9vbCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuczMgPSBleHBvcnRzLlMzVXBsb2FkLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5nY3AgPSBleHBvcnRzLkdDUFVwbG9hZC5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYXp1cmUgPSBleHBvcnRzLkF6dXJlQmxvYlVwbG9hZC5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYWxpT1NTID0gZXhwb3J0cy5BbGlPU1NVcGxvYWQuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcHJvdG9jb2w6IGlzU2V0KG9iamVjdC5wcm90b2NvbCkgPyBzZWdtZW50ZWRGaWxlUHJvdG9jb2xGcm9tSlNPTihvYmplY3QucHJvdG9jb2wpIDogMCxcbiAgICAgICAgICAgIGZpbGVuYW1lUHJlZml4OiBpc1NldChvYmplY3QuZmlsZW5hbWVQcmVmaXgpID8gU3RyaW5nKG9iamVjdC5maWxlbmFtZVByZWZpeCkgOiBcIlwiLFxuICAgICAgICAgICAgcGxheWxpc3ROYW1lOiBpc1NldChvYmplY3QucGxheWxpc3ROYW1lKSA/IFN0cmluZyhvYmplY3QucGxheWxpc3ROYW1lKSA6IFwiXCIsXG4gICAgICAgICAgICBsaXZlUGxheWxpc3ROYW1lOiBpc1NldChvYmplY3QubGl2ZVBsYXlsaXN0TmFtZSkgPyBTdHJpbmcob2JqZWN0LmxpdmVQbGF5bGlzdE5hbWUpIDogXCJcIixcbiAgICAgICAgICAgIHNlZ21lbnREdXJhdGlvbjogaXNTZXQob2JqZWN0LnNlZ21lbnREdXJhdGlvbikgPyBOdW1iZXIob2JqZWN0LnNlZ21lbnREdXJhdGlvbikgOiAwLFxuICAgICAgICAgICAgZmlsZW5hbWVTdWZmaXg6IGlzU2V0KG9iamVjdC5maWxlbmFtZVN1ZmZpeCkgPyBzZWdtZW50ZWRGaWxlU3VmZml4RnJvbUpTT04ob2JqZWN0LmZpbGVuYW1lU3VmZml4KSA6IDAsXG4gICAgICAgICAgICBkaXNhYmxlTWFuaWZlc3Q6IGlzU2V0KG9iamVjdC5kaXNhYmxlTWFuaWZlc3QpID8gQm9vbGVhbihvYmplY3QuZGlzYWJsZU1hbmlmZXN0KSA6IGZhbHNlLFxuICAgICAgICAgICAgczM6IGlzU2V0KG9iamVjdC5zMykgPyBleHBvcnRzLlMzVXBsb2FkLmZyb21KU09OKG9iamVjdC5zMykgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBnY3A6IGlzU2V0KG9iamVjdC5nY3ApID8gZXhwb3J0cy5HQ1BVcGxvYWQuZnJvbUpTT04ob2JqZWN0LmdjcCkgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBhenVyZTogaXNTZXQob2JqZWN0LmF6dXJlKSA/IGV4cG9ydHMuQXp1cmVCbG9iVXBsb2FkLmZyb21KU09OKG9iamVjdC5henVyZSkgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBhbGlPU1M6IGlzU2V0KG9iamVjdC5hbGlPU1MpID8gZXhwb3J0cy5BbGlPU1NVcGxvYWQuZnJvbUpTT04ob2JqZWN0LmFsaU9TUykgOiB1bmRlZmluZWQsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS5wcm90b2NvbCAhPT0gdW5kZWZpbmVkICYmIChvYmoucHJvdG9jb2wgPSBzZWdtZW50ZWRGaWxlUHJvdG9jb2xUb0pTT04obWVzc2FnZS5wcm90b2NvbCkpO1xuICAgICAgICBtZXNzYWdlLmZpbGVuYW1lUHJlZml4ICE9PSB1bmRlZmluZWQgJiYgKG9iai5maWxlbmFtZVByZWZpeCA9IG1lc3NhZ2UuZmlsZW5hbWVQcmVmaXgpO1xuICAgICAgICBtZXNzYWdlLnBsYXlsaXN0TmFtZSAhPT0gdW5kZWZpbmVkICYmIChvYmoucGxheWxpc3ROYW1lID0gbWVzc2FnZS5wbGF5bGlzdE5hbWUpO1xuICAgICAgICBtZXNzYWdlLmxpdmVQbGF5bGlzdE5hbWUgIT09IHVuZGVmaW5lZCAmJiAob2JqLmxpdmVQbGF5bGlzdE5hbWUgPSBtZXNzYWdlLmxpdmVQbGF5bGlzdE5hbWUpO1xuICAgICAgICBtZXNzYWdlLnNlZ21lbnREdXJhdGlvbiAhPT0gdW5kZWZpbmVkICYmIChvYmouc2VnbWVudER1cmF0aW9uID0gTWF0aC5yb3VuZChtZXNzYWdlLnNlZ21lbnREdXJhdGlvbikpO1xuICAgICAgICBtZXNzYWdlLmZpbGVuYW1lU3VmZml4ICE9PSB1bmRlZmluZWQgJiYgKG9iai5maWxlbmFtZVN1ZmZpeCA9IHNlZ21lbnRlZEZpbGVTdWZmaXhUb0pTT04obWVzc2FnZS5maWxlbmFtZVN1ZmZpeCkpO1xuICAgICAgICBtZXNzYWdlLmRpc2FibGVNYW5pZmVzdCAhPT0gdW5kZWZpbmVkICYmIChvYmouZGlzYWJsZU1hbmlmZXN0ID0gbWVzc2FnZS5kaXNhYmxlTWFuaWZlc3QpO1xuICAgICAgICBtZXNzYWdlLnMzICE9PSB1bmRlZmluZWQgJiYgKG9iai5zMyA9IG1lc3NhZ2UuczMgPyBleHBvcnRzLlMzVXBsb2FkLnRvSlNPTihtZXNzYWdlLnMzKSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIG1lc3NhZ2UuZ2NwICE9PSB1bmRlZmluZWQgJiYgKG9iai5nY3AgPSBtZXNzYWdlLmdjcCA/IGV4cG9ydHMuR0NQVXBsb2FkLnRvSlNPTihtZXNzYWdlLmdjcCkgOiB1bmRlZmluZWQpO1xuICAgICAgICBtZXNzYWdlLmF6dXJlICE9PSB1bmRlZmluZWQgJiYgKG9iai5henVyZSA9IG1lc3NhZ2UuYXp1cmUgPyBleHBvcnRzLkF6dXJlQmxvYlVwbG9hZC50b0pTT04obWVzc2FnZS5henVyZSkgOiB1bmRlZmluZWQpO1xuICAgICAgICBtZXNzYWdlLmFsaU9TUyAhPT0gdW5kZWZpbmVkICYmIChvYmouYWxpT1NTID0gbWVzc2FnZS5hbGlPU1MgPyBleHBvcnRzLkFsaU9TU1VwbG9hZC50b0pTT04obWVzc2FnZS5hbGlPU1MpIDogdW5kZWZpbmVkKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZiwgX2c7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlU2VnbWVudGVkRmlsZU91dHB1dCgpO1xuICAgICAgICBtZXNzYWdlLnByb3RvY29sID0gKF9hID0gb2JqZWN0LnByb3RvY29sKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAwO1xuICAgICAgICBtZXNzYWdlLmZpbGVuYW1lUHJlZml4ID0gKF9iID0gb2JqZWN0LmZpbGVuYW1lUHJlZml4KSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBcIlwiO1xuICAgICAgICBtZXNzYWdlLnBsYXlsaXN0TmFtZSA9IChfYyA9IG9iamVjdC5wbGF5bGlzdE5hbWUpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IFwiXCI7XG4gICAgICAgIG1lc3NhZ2UubGl2ZVBsYXlsaXN0TmFtZSA9IChfZCA9IG9iamVjdC5saXZlUGxheWxpc3ROYW1lKSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiBcIlwiO1xuICAgICAgICBtZXNzYWdlLnNlZ21lbnREdXJhdGlvbiA9IChfZSA9IG9iamVjdC5zZWdtZW50RHVyYXRpb24pICE9PSBudWxsICYmIF9lICE9PSB2b2lkIDAgPyBfZSA6IDA7XG4gICAgICAgIG1lc3NhZ2UuZmlsZW5hbWVTdWZmaXggPSAoX2YgPSBvYmplY3QuZmlsZW5hbWVTdWZmaXgpICE9PSBudWxsICYmIF9mICE9PSB2b2lkIDAgPyBfZiA6IDA7XG4gICAgICAgIG1lc3NhZ2UuZGlzYWJsZU1hbmlmZXN0ID0gKF9nID0gb2JqZWN0LmRpc2FibGVNYW5pZmVzdCkgIT09IG51bGwgJiYgX2cgIT09IHZvaWQgMCA/IF9nIDogZmFsc2U7XG4gICAgICAgIG1lc3NhZ2UuczMgPSAob2JqZWN0LnMzICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0LnMzICE9PSBudWxsKSA/IGV4cG9ydHMuUzNVcGxvYWQuZnJvbVBhcnRpYWwob2JqZWN0LnMzKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgbWVzc2FnZS5nY3AgPSAob2JqZWN0LmdjcCAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5nY3AgIT09IG51bGwpID8gZXhwb3J0cy5HQ1BVcGxvYWQuZnJvbVBhcnRpYWwob2JqZWN0LmdjcCkgOiB1bmRlZmluZWQ7XG4gICAgICAgIG1lc3NhZ2UuYXp1cmUgPSAob2JqZWN0LmF6dXJlICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0LmF6dXJlICE9PSBudWxsKVxuICAgICAgICAgICAgPyBleHBvcnRzLkF6dXJlQmxvYlVwbG9hZC5mcm9tUGFydGlhbChvYmplY3QuYXp1cmUpXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgbWVzc2FnZS5hbGlPU1MgPSAob2JqZWN0LmFsaU9TUyAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5hbGlPU1MgIT09IG51bGwpXG4gICAgICAgICAgICA/IGV4cG9ydHMuQWxpT1NTVXBsb2FkLmZyb21QYXJ0aWFsKG9iamVjdC5hbGlPU1MpXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlRGlyZWN0RmlsZU91dHB1dCgpIHtcbiAgICByZXR1cm4geyBmaWxlcGF0aDogXCJcIiwgZGlzYWJsZU1hbmlmZXN0OiBmYWxzZSwgczM6IHVuZGVmaW5lZCwgZ2NwOiB1bmRlZmluZWQsIGF6dXJlOiB1bmRlZmluZWQsIGFsaU9TUzogdW5kZWZpbmVkIH07XG59XG5leHBvcnRzLkRpcmVjdEZpbGVPdXRwdXQgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IG1pbmltYWxfMS5kZWZhdWx0LldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5maWxlcGF0aCAhPT0gdW5kZWZpbmVkICYmIG1lc3NhZ2UuZmlsZXBhdGggIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTApLnN0cmluZyhtZXNzYWdlLmZpbGVwYXRoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5kaXNhYmxlTWFuaWZlc3QgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoNDApLmJvb2wobWVzc2FnZS5kaXNhYmxlTWFuaWZlc3QpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnMzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGV4cG9ydHMuUzNVcGxvYWQuZW5jb2RlKG1lc3NhZ2UuczMsIHdyaXRlci51aW50MzIoMTgpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuZ2NwICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGV4cG9ydHMuR0NQVXBsb2FkLmVuY29kZShtZXNzYWdlLmdjcCwgd3JpdGVyLnVpbnQzMigyNikuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5henVyZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBleHBvcnRzLkF6dXJlQmxvYlVwbG9hZC5lbmNvZGUobWVzc2FnZS5henVyZSwgd3JpdGVyLnVpbnQzMigzNCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5hbGlPU1MgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZXhwb3J0cy5BbGlPU1NVcGxvYWQuZW5jb2RlKG1lc3NhZ2UuYWxpT1NTLCB3cml0ZXIudWludDMyKDUwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIG1pbmltYWxfMS5kZWZhdWx0LlJlYWRlciA/IGlucHV0IDogbmV3IG1pbmltYWxfMS5kZWZhdWx0LlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZURpcmVjdEZpbGVPdXRwdXQoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmZpbGVwYXRoID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZGlzYWJsZU1hbmlmZXN0ID0gcmVhZGVyLmJvb2woKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnMzID0gZXhwb3J0cy5TM1VwbG9hZC5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZ2NwID0gZXhwb3J0cy5HQ1BVcGxvYWQuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmF6dXJlID0gZXhwb3J0cy5BenVyZUJsb2JVcGxvYWQuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmFsaU9TUyA9IGV4cG9ydHMuQWxpT1NTVXBsb2FkLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZpbGVwYXRoOiBpc1NldChvYmplY3QuZmlsZXBhdGgpID8gU3RyaW5nKG9iamVjdC5maWxlcGF0aCkgOiBcIlwiLFxuICAgICAgICAgICAgZGlzYWJsZU1hbmlmZXN0OiBpc1NldChvYmplY3QuZGlzYWJsZU1hbmlmZXN0KSA/IEJvb2xlYW4ob2JqZWN0LmRpc2FibGVNYW5pZmVzdCkgOiBmYWxzZSxcbiAgICAgICAgICAgIHMzOiBpc1NldChvYmplY3QuczMpID8gZXhwb3J0cy5TM1VwbG9hZC5mcm9tSlNPTihvYmplY3QuczMpIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZ2NwOiBpc1NldChvYmplY3QuZ2NwKSA/IGV4cG9ydHMuR0NQVXBsb2FkLmZyb21KU09OKG9iamVjdC5nY3ApIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgYXp1cmU6IGlzU2V0KG9iamVjdC5henVyZSkgPyBleHBvcnRzLkF6dXJlQmxvYlVwbG9hZC5mcm9tSlNPTihvYmplY3QuYXp1cmUpIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgYWxpT1NTOiBpc1NldChvYmplY3QuYWxpT1NTKSA/IGV4cG9ydHMuQWxpT1NTVXBsb2FkLmZyb21KU09OKG9iamVjdC5hbGlPU1MpIDogdW5kZWZpbmVkLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2UuZmlsZXBhdGggIT09IHVuZGVmaW5lZCAmJiAob2JqLmZpbGVwYXRoID0gbWVzc2FnZS5maWxlcGF0aCk7XG4gICAgICAgIG1lc3NhZ2UuZGlzYWJsZU1hbmlmZXN0ICE9PSB1bmRlZmluZWQgJiYgKG9iai5kaXNhYmxlTWFuaWZlc3QgPSBtZXNzYWdlLmRpc2FibGVNYW5pZmVzdCk7XG4gICAgICAgIG1lc3NhZ2UuczMgIT09IHVuZGVmaW5lZCAmJiAob2JqLnMzID0gbWVzc2FnZS5zMyA/IGV4cG9ydHMuUzNVcGxvYWQudG9KU09OKG1lc3NhZ2UuczMpIDogdW5kZWZpbmVkKTtcbiAgICAgICAgbWVzc2FnZS5nY3AgIT09IHVuZGVmaW5lZCAmJiAob2JqLmdjcCA9IG1lc3NhZ2UuZ2NwID8gZXhwb3J0cy5HQ1BVcGxvYWQudG9KU09OKG1lc3NhZ2UuZ2NwKSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIG1lc3NhZ2UuYXp1cmUgIT09IHVuZGVmaW5lZCAmJiAob2JqLmF6dXJlID0gbWVzc2FnZS5henVyZSA/IGV4cG9ydHMuQXp1cmVCbG9iVXBsb2FkLnRvSlNPTihtZXNzYWdlLmF6dXJlKSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIG1lc3NhZ2UuYWxpT1NTICE9PSB1bmRlZmluZWQgJiYgKG9iai5hbGlPU1MgPSBtZXNzYWdlLmFsaU9TUyA/IGV4cG9ydHMuQWxpT1NTVXBsb2FkLnRvSlNPTihtZXNzYWdlLmFsaU9TUykgOiB1bmRlZmluZWQpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlRGlyZWN0RmlsZU91dHB1dCgpO1xuICAgICAgICBtZXNzYWdlLmZpbGVwYXRoID0gKF9hID0gb2JqZWN0LmZpbGVwYXRoKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBcIlwiO1xuICAgICAgICBtZXNzYWdlLmRpc2FibGVNYW5pZmVzdCA9IChfYiA9IG9iamVjdC5kaXNhYmxlTWFuaWZlc3QpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IGZhbHNlO1xuICAgICAgICBtZXNzYWdlLnMzID0gKG9iamVjdC5zMyAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5zMyAhPT0gbnVsbCkgPyBleHBvcnRzLlMzVXBsb2FkLmZyb21QYXJ0aWFsKG9iamVjdC5zMykgOiB1bmRlZmluZWQ7XG4gICAgICAgIG1lc3NhZ2UuZ2NwID0gKG9iamVjdC5nY3AgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QuZ2NwICE9PSBudWxsKSA/IGV4cG9ydHMuR0NQVXBsb2FkLmZyb21QYXJ0aWFsKG9iamVjdC5nY3ApIDogdW5kZWZpbmVkO1xuICAgICAgICBtZXNzYWdlLmF6dXJlID0gKG9iamVjdC5henVyZSAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5henVyZSAhPT0gbnVsbClcbiAgICAgICAgICAgID8gZXhwb3J0cy5BenVyZUJsb2JVcGxvYWQuZnJvbVBhcnRpYWwob2JqZWN0LmF6dXJlKVxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIG1lc3NhZ2UuYWxpT1NTID0gKG9iamVjdC5hbGlPU1MgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QuYWxpT1NTICE9PSBudWxsKVxuICAgICAgICAgICAgPyBleHBvcnRzLkFsaU9TU1VwbG9hZC5mcm9tUGFydGlhbChvYmplY3QuYWxpT1NTKVxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZUltYWdlT3V0cHV0KCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGNhcHR1cmVJbnRlcnZhbDogMCxcbiAgICAgICAgd2lkdGg6IDAsXG4gICAgICAgIGhlaWdodDogMCxcbiAgICAgICAgZmlsZW5hbWVQcmVmaXg6IFwiXCIsXG4gICAgICAgIGZpbGVuYW1lU3VmZml4OiAwLFxuICAgICAgICBpbWFnZUNvZGVjOiAwLFxuICAgICAgICBkaXNhYmxlTWFuaWZlc3Q6IGZhbHNlLFxuICAgICAgICBzMzogdW5kZWZpbmVkLFxuICAgICAgICBnY3A6IHVuZGVmaW5lZCxcbiAgICAgICAgYXp1cmU6IHVuZGVmaW5lZCxcbiAgICAgICAgYWxpT1NTOiB1bmRlZmluZWQsXG4gICAgfTtcbn1cbmV4cG9ydHMuSW1hZ2VPdXRwdXQgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IG1pbmltYWxfMS5kZWZhdWx0LldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5jYXB0dXJlSW50ZXJ2YWwgIT09IHVuZGVmaW5lZCAmJiBtZXNzYWdlLmNhcHR1cmVJbnRlcnZhbCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig4KS51aW50MzIobWVzc2FnZS5jYXB0dXJlSW50ZXJ2YWwpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLndpZHRoICE9PSB1bmRlZmluZWQgJiYgbWVzc2FnZS53aWR0aCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxNikuaW50MzIobWVzc2FnZS53aWR0aCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuaGVpZ2h0ICE9PSB1bmRlZmluZWQgJiYgbWVzc2FnZS5oZWlnaHQgIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMjQpLmludDMyKG1lc3NhZ2UuaGVpZ2h0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5maWxlbmFtZVByZWZpeCAhPT0gdW5kZWZpbmVkICYmIG1lc3NhZ2UuZmlsZW5hbWVQcmVmaXggIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMzQpLnN0cmluZyhtZXNzYWdlLmZpbGVuYW1lUHJlZml4KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5maWxlbmFtZVN1ZmZpeCAhPT0gdW5kZWZpbmVkICYmIG1lc3NhZ2UuZmlsZW5hbWVTdWZmaXggIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoNDApLmludDMyKG1lc3NhZ2UuZmlsZW5hbWVTdWZmaXgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmltYWdlQ29kZWMgIT09IHVuZGVmaW5lZCAmJiBtZXNzYWdlLmltYWdlQ29kZWMgIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoNDgpLmludDMyKG1lc3NhZ2UuaW1hZ2VDb2RlYyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuZGlzYWJsZU1hbmlmZXN0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDU2KS5ib29sKG1lc3NhZ2UuZGlzYWJsZU1hbmlmZXN0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5zMyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBleHBvcnRzLlMzVXBsb2FkLmVuY29kZShtZXNzYWdlLnMzLCB3cml0ZXIudWludDMyKDY2KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmdjcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBleHBvcnRzLkdDUFVwbG9hZC5lbmNvZGUobWVzc2FnZS5nY3AsIHdyaXRlci51aW50MzIoNzQpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuYXp1cmUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZXhwb3J0cy5BenVyZUJsb2JVcGxvYWQuZW5jb2RlKG1lc3NhZ2UuYXp1cmUsIHdyaXRlci51aW50MzIoODIpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuYWxpT1NTICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGV4cG9ydHMuQWxpT1NTVXBsb2FkLmVuY29kZShtZXNzYWdlLmFsaU9TUywgd3JpdGVyLnVpbnQzMig5MCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBtaW5pbWFsXzEuZGVmYXVsdC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBtaW5pbWFsXzEuZGVmYXVsdC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VJbWFnZU91dHB1dCgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuY2FwdHVyZUludGVydmFsID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uud2lkdGggPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmhlaWdodCA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZmlsZW5hbWVQcmVmaXggPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5maWxlbmFtZVN1ZmZpeCA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuaW1hZ2VDb2RlYyA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZGlzYWJsZU1hbmlmZXN0ID0gcmVhZGVyLmJvb2woKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnMzID0gZXhwb3J0cy5TM1VwbG9hZC5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZ2NwID0gZXhwb3J0cy5HQ1BVcGxvYWQuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5henVyZSA9IGV4cG9ydHMuQXp1cmVCbG9iVXBsb2FkLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYWxpT1NTID0gZXhwb3J0cy5BbGlPU1NVcGxvYWQuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY2FwdHVyZUludGVydmFsOiBpc1NldChvYmplY3QuY2FwdHVyZUludGVydmFsKSA/IE51bWJlcihvYmplY3QuY2FwdHVyZUludGVydmFsKSA6IDAsXG4gICAgICAgICAgICB3aWR0aDogaXNTZXQob2JqZWN0LndpZHRoKSA/IE51bWJlcihvYmplY3Qud2lkdGgpIDogMCxcbiAgICAgICAgICAgIGhlaWdodDogaXNTZXQob2JqZWN0LmhlaWdodCkgPyBOdW1iZXIob2JqZWN0LmhlaWdodCkgOiAwLFxuICAgICAgICAgICAgZmlsZW5hbWVQcmVmaXg6IGlzU2V0KG9iamVjdC5maWxlbmFtZVByZWZpeCkgPyBTdHJpbmcob2JqZWN0LmZpbGVuYW1lUHJlZml4KSA6IFwiXCIsXG4gICAgICAgICAgICBmaWxlbmFtZVN1ZmZpeDogaXNTZXQob2JqZWN0LmZpbGVuYW1lU3VmZml4KSA/IGltYWdlRmlsZVN1ZmZpeEZyb21KU09OKG9iamVjdC5maWxlbmFtZVN1ZmZpeCkgOiAwLFxuICAgICAgICAgICAgaW1hZ2VDb2RlYzogaXNTZXQob2JqZWN0LmltYWdlQ29kZWMpID8gbGl2ZWtpdF9tb2RlbHNfMS5pbWFnZUNvZGVjRnJvbUpTT04ob2JqZWN0LmltYWdlQ29kZWMpIDogMCxcbiAgICAgICAgICAgIGRpc2FibGVNYW5pZmVzdDogaXNTZXQob2JqZWN0LmRpc2FibGVNYW5pZmVzdCkgPyBCb29sZWFuKG9iamVjdC5kaXNhYmxlTWFuaWZlc3QpIDogZmFsc2UsXG4gICAgICAgICAgICBzMzogaXNTZXQob2JqZWN0LnMzKSA/IGV4cG9ydHMuUzNVcGxvYWQuZnJvbUpTT04ob2JqZWN0LnMzKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGdjcDogaXNTZXQob2JqZWN0LmdjcCkgPyBleHBvcnRzLkdDUFVwbG9hZC5mcm9tSlNPTihvYmplY3QuZ2NwKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGF6dXJlOiBpc1NldChvYmplY3QuYXp1cmUpID8gZXhwb3J0cy5BenVyZUJsb2JVcGxvYWQuZnJvbUpTT04ob2JqZWN0LmF6dXJlKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGFsaU9TUzogaXNTZXQob2JqZWN0LmFsaU9TUykgPyBleHBvcnRzLkFsaU9TU1VwbG9hZC5mcm9tSlNPTihvYmplY3QuYWxpT1NTKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLmNhcHR1cmVJbnRlcnZhbCAhPT0gdW5kZWZpbmVkICYmIChvYmouY2FwdHVyZUludGVydmFsID0gTWF0aC5yb3VuZChtZXNzYWdlLmNhcHR1cmVJbnRlcnZhbCkpO1xuICAgICAgICBtZXNzYWdlLndpZHRoICE9PSB1bmRlZmluZWQgJiYgKG9iai53aWR0aCA9IE1hdGgucm91bmQobWVzc2FnZS53aWR0aCkpO1xuICAgICAgICBtZXNzYWdlLmhlaWdodCAhPT0gdW5kZWZpbmVkICYmIChvYmouaGVpZ2h0ID0gTWF0aC5yb3VuZChtZXNzYWdlLmhlaWdodCkpO1xuICAgICAgICBtZXNzYWdlLmZpbGVuYW1lUHJlZml4ICE9PSB1bmRlZmluZWQgJiYgKG9iai5maWxlbmFtZVByZWZpeCA9IG1lc3NhZ2UuZmlsZW5hbWVQcmVmaXgpO1xuICAgICAgICBtZXNzYWdlLmZpbGVuYW1lU3VmZml4ICE9PSB1bmRlZmluZWQgJiYgKG9iai5maWxlbmFtZVN1ZmZpeCA9IGltYWdlRmlsZVN1ZmZpeFRvSlNPTihtZXNzYWdlLmZpbGVuYW1lU3VmZml4KSk7XG4gICAgICAgIG1lc3NhZ2UuaW1hZ2VDb2RlYyAhPT0gdW5kZWZpbmVkICYmIChvYmouaW1hZ2VDb2RlYyA9IGxpdmVraXRfbW9kZWxzXzEuaW1hZ2VDb2RlY1RvSlNPTihtZXNzYWdlLmltYWdlQ29kZWMpKTtcbiAgICAgICAgbWVzc2FnZS5kaXNhYmxlTWFuaWZlc3QgIT09IHVuZGVmaW5lZCAmJiAob2JqLmRpc2FibGVNYW5pZmVzdCA9IG1lc3NhZ2UuZGlzYWJsZU1hbmlmZXN0KTtcbiAgICAgICAgbWVzc2FnZS5zMyAhPT0gdW5kZWZpbmVkICYmIChvYmouczMgPSBtZXNzYWdlLnMzID8gZXhwb3J0cy5TM1VwbG9hZC50b0pTT04obWVzc2FnZS5zMykgOiB1bmRlZmluZWQpO1xuICAgICAgICBtZXNzYWdlLmdjcCAhPT0gdW5kZWZpbmVkICYmIChvYmouZ2NwID0gbWVzc2FnZS5nY3AgPyBleHBvcnRzLkdDUFVwbG9hZC50b0pTT04obWVzc2FnZS5nY3ApIDogdW5kZWZpbmVkKTtcbiAgICAgICAgbWVzc2FnZS5henVyZSAhPT0gdW5kZWZpbmVkICYmIChvYmouYXp1cmUgPSBtZXNzYWdlLmF6dXJlID8gZXhwb3J0cy5BenVyZUJsb2JVcGxvYWQudG9KU09OKG1lc3NhZ2UuYXp1cmUpIDogdW5kZWZpbmVkKTtcbiAgICAgICAgbWVzc2FnZS5hbGlPU1MgIT09IHVuZGVmaW5lZCAmJiAob2JqLmFsaU9TUyA9IG1lc3NhZ2UuYWxpT1NTID8gZXhwb3J0cy5BbGlPU1NVcGxvYWQudG9KU09OKG1lc3NhZ2UuYWxpT1NTKSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2YsIF9nO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZUltYWdlT3V0cHV0KCk7XG4gICAgICAgIG1lc3NhZ2UuY2FwdHVyZUludGVydmFsID0gKF9hID0gb2JqZWN0LmNhcHR1cmVJbnRlcnZhbCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMDtcbiAgICAgICAgbWVzc2FnZS53aWR0aCA9IChfYiA9IG9iamVjdC53aWR0aCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogMDtcbiAgICAgICAgbWVzc2FnZS5oZWlnaHQgPSAoX2MgPSBvYmplY3QuaGVpZ2h0KSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiAwO1xuICAgICAgICBtZXNzYWdlLmZpbGVuYW1lUHJlZml4ID0gKF9kID0gb2JqZWN0LmZpbGVuYW1lUHJlZml4KSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiBcIlwiO1xuICAgICAgICBtZXNzYWdlLmZpbGVuYW1lU3VmZml4ID0gKF9lID0gb2JqZWN0LmZpbGVuYW1lU3VmZml4KSAhPT0gbnVsbCAmJiBfZSAhPT0gdm9pZCAwID8gX2UgOiAwO1xuICAgICAgICBtZXNzYWdlLmltYWdlQ29kZWMgPSAoX2YgPSBvYmplY3QuaW1hZ2VDb2RlYykgIT09IG51bGwgJiYgX2YgIT09IHZvaWQgMCA/IF9mIDogMDtcbiAgICAgICAgbWVzc2FnZS5kaXNhYmxlTWFuaWZlc3QgPSAoX2cgPSBvYmplY3QuZGlzYWJsZU1hbmlmZXN0KSAhPT0gbnVsbCAmJiBfZyAhPT0gdm9pZCAwID8gX2cgOiBmYWxzZTtcbiAgICAgICAgbWVzc2FnZS5zMyA9IChvYmplY3QuczMgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QuczMgIT09IG51bGwpID8gZXhwb3J0cy5TM1VwbG9hZC5mcm9tUGFydGlhbChvYmplY3QuczMpIDogdW5kZWZpbmVkO1xuICAgICAgICBtZXNzYWdlLmdjcCA9IChvYmplY3QuZ2NwICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0LmdjcCAhPT0gbnVsbCkgPyBleHBvcnRzLkdDUFVwbG9hZC5mcm9tUGFydGlhbChvYmplY3QuZ2NwKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgbWVzc2FnZS5henVyZSA9IChvYmplY3QuYXp1cmUgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QuYXp1cmUgIT09IG51bGwpXG4gICAgICAgICAgICA/IGV4cG9ydHMuQXp1cmVCbG9iVXBsb2FkLmZyb21QYXJ0aWFsKG9iamVjdC5henVyZSlcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICBtZXNzYWdlLmFsaU9TUyA9IChvYmplY3QuYWxpT1NTICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0LmFsaU9TUyAhPT0gbnVsbClcbiAgICAgICAgICAgID8gZXhwb3J0cy5BbGlPU1NVcGxvYWQuZnJvbVBhcnRpYWwob2JqZWN0LmFsaU9TUylcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VTM1VwbG9hZCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBhY2Nlc3NLZXk6IFwiXCIsXG4gICAgICAgIHNlY3JldDogXCJcIixcbiAgICAgICAgcmVnaW9uOiBcIlwiLFxuICAgICAgICBlbmRwb2ludDogXCJcIixcbiAgICAgICAgYnVja2V0OiBcIlwiLFxuICAgICAgICBmb3JjZVBhdGhTdHlsZTogZmFsc2UsXG4gICAgICAgIG1ldGFkYXRhOiB7fSxcbiAgICAgICAgdGFnZ2luZzogXCJcIixcbiAgICB9O1xufVxuZXhwb3J0cy5TM1VwbG9hZCA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gbWluaW1hbF8xLmRlZmF1bHQuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLmFjY2Vzc0tleSAhPT0gdW5kZWZpbmVkICYmIG1lc3NhZ2UuYWNjZXNzS2V5ICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEwKS5zdHJpbmcobWVzc2FnZS5hY2Nlc3NLZXkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnNlY3JldCAhPT0gdW5kZWZpbmVkICYmIG1lc3NhZ2Uuc2VjcmV0ICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDE4KS5zdHJpbmcobWVzc2FnZS5zZWNyZXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnJlZ2lvbiAhPT0gdW5kZWZpbmVkICYmIG1lc3NhZ2UucmVnaW9uICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDI2KS5zdHJpbmcobWVzc2FnZS5yZWdpb24pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmVuZHBvaW50ICE9PSB1bmRlZmluZWQgJiYgbWVzc2FnZS5lbmRwb2ludCAhPT0gXCJcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigzNCkuc3RyaW5nKG1lc3NhZ2UuZW5kcG9pbnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmJ1Y2tldCAhPT0gdW5kZWZpbmVkICYmIG1lc3NhZ2UuYnVja2V0ICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDQyKS5zdHJpbmcobWVzc2FnZS5idWNrZXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmZvcmNlUGF0aFN0eWxlID09PSB0cnVlKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDQ4KS5ib29sKG1lc3NhZ2UuZm9yY2VQYXRoU3R5bGUpO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lc3NhZ2UubWV0YWRhdGEgfHwge30pLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgZXhwb3J0cy5TM1VwbG9hZF9NZXRhZGF0YUVudHJ5LmVuY29kZSh7IGtleToga2V5LCB2YWx1ZSB9LCB3cml0ZXIudWludDMyKDU4KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKG1lc3NhZ2UudGFnZ2luZyAhPT0gdW5kZWZpbmVkICYmIG1lc3NhZ2UudGFnZ2luZyAhPT0gXCJcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig2Nikuc3RyaW5nKG1lc3NhZ2UudGFnZ2luZyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgbWluaW1hbF8xLmRlZmF1bHQuUmVhZGVyID8gaW5wdXQgOiBuZXcgbWluaW1hbF8xLmRlZmF1bHQuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUzNVcGxvYWQoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmFjY2Vzc0tleSA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnNlY3JldCA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnJlZ2lvbiA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmVuZHBvaW50ID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYnVja2V0ID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZm9yY2VQYXRoU3R5bGUgPSByZWFkZXIuYm9vbCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVudHJ5NyA9IGV4cG9ydHMuUzNVcGxvYWRfTWV0YWRhdGFFbnRyeS5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZW50cnk3LnZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubWV0YWRhdGFbZW50cnk3LmtleV0gPSBlbnRyeTcudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnRhZ2dpbmcgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFjY2Vzc0tleTogaXNTZXQob2JqZWN0LmFjY2Vzc0tleSkgPyBTdHJpbmcob2JqZWN0LmFjY2Vzc0tleSkgOiBcIlwiLFxuICAgICAgICAgICAgc2VjcmV0OiBpc1NldChvYmplY3Quc2VjcmV0KSA/IFN0cmluZyhvYmplY3Quc2VjcmV0KSA6IFwiXCIsXG4gICAgICAgICAgICByZWdpb246IGlzU2V0KG9iamVjdC5yZWdpb24pID8gU3RyaW5nKG9iamVjdC5yZWdpb24pIDogXCJcIixcbiAgICAgICAgICAgIGVuZHBvaW50OiBpc1NldChvYmplY3QuZW5kcG9pbnQpID8gU3RyaW5nKG9iamVjdC5lbmRwb2ludCkgOiBcIlwiLFxuICAgICAgICAgICAgYnVja2V0OiBpc1NldChvYmplY3QuYnVja2V0KSA/IFN0cmluZyhvYmplY3QuYnVja2V0KSA6IFwiXCIsXG4gICAgICAgICAgICBmb3JjZVBhdGhTdHlsZTogaXNTZXQob2JqZWN0LmZvcmNlUGF0aFN0eWxlKSA/IEJvb2xlYW4ob2JqZWN0LmZvcmNlUGF0aFN0eWxlKSA6IGZhbHNlLFxuICAgICAgICAgICAgbWV0YWRhdGE6IGlzT2JqZWN0KG9iamVjdC5tZXRhZGF0YSlcbiAgICAgICAgICAgICAgICA/IE9iamVjdC5lbnRyaWVzKG9iamVjdC5tZXRhZGF0YSkucmVkdWNlKChhY2MsIFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBhY2Nba2V5XSA9IFN0cmluZyh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgICAgICAgICAgfSwge30pXG4gICAgICAgICAgICAgICAgOiB7fSxcbiAgICAgICAgICAgIHRhZ2dpbmc6IGlzU2V0KG9iamVjdC50YWdnaW5nKSA/IFN0cmluZyhvYmplY3QudGFnZ2luZykgOiBcIlwiLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2UuYWNjZXNzS2V5ICE9PSB1bmRlZmluZWQgJiYgKG9iai5hY2Nlc3NLZXkgPSBtZXNzYWdlLmFjY2Vzc0tleSk7XG4gICAgICAgIG1lc3NhZ2Uuc2VjcmV0ICE9PSB1bmRlZmluZWQgJiYgKG9iai5zZWNyZXQgPSBtZXNzYWdlLnNlY3JldCk7XG4gICAgICAgIG1lc3NhZ2UucmVnaW9uICE9PSB1bmRlZmluZWQgJiYgKG9iai5yZWdpb24gPSBtZXNzYWdlLnJlZ2lvbik7XG4gICAgICAgIG1lc3NhZ2UuZW5kcG9pbnQgIT09IHVuZGVmaW5lZCAmJiAob2JqLmVuZHBvaW50ID0gbWVzc2FnZS5lbmRwb2ludCk7XG4gICAgICAgIG1lc3NhZ2UuYnVja2V0ICE9PSB1bmRlZmluZWQgJiYgKG9iai5idWNrZXQgPSBtZXNzYWdlLmJ1Y2tldCk7XG4gICAgICAgIG1lc3NhZ2UuZm9yY2VQYXRoU3R5bGUgIT09IHVuZGVmaW5lZCAmJiAob2JqLmZvcmNlUGF0aFN0eWxlID0gbWVzc2FnZS5mb3JjZVBhdGhTdHlsZSk7XG4gICAgICAgIG9iai5tZXRhZGF0YSA9IHt9O1xuICAgICAgICBpZiAobWVzc2FnZS5tZXRhZGF0YSkge1xuICAgICAgICAgICAgT2JqZWN0LmVudHJpZXMobWVzc2FnZS5tZXRhZGF0YSkuZm9yRWFjaCgoW2ssIHZdKSA9PiB7XG4gICAgICAgICAgICAgICAgb2JqLm1ldGFkYXRhW2tdID0gdjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIG1lc3NhZ2UudGFnZ2luZyAhPT0gdW5kZWZpbmVkICYmIChvYmoudGFnZ2luZyA9IG1lc3NhZ2UudGFnZ2luZyk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2YsIF9nLCBfaDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VTM1VwbG9hZCgpO1xuICAgICAgICBtZXNzYWdlLmFjY2Vzc0tleSA9IChfYSA9IG9iamVjdC5hY2Nlc3NLZXkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFwiXCI7XG4gICAgICAgIG1lc3NhZ2Uuc2VjcmV0ID0gKF9iID0gb2JqZWN0LnNlY3JldCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogXCJcIjtcbiAgICAgICAgbWVzc2FnZS5yZWdpb24gPSAoX2MgPSBvYmplY3QucmVnaW9uKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiBcIlwiO1xuICAgICAgICBtZXNzYWdlLmVuZHBvaW50ID0gKF9kID0gb2JqZWN0LmVuZHBvaW50KSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiBcIlwiO1xuICAgICAgICBtZXNzYWdlLmJ1Y2tldCA9IChfZSA9IG9iamVjdC5idWNrZXQpICE9PSBudWxsICYmIF9lICE9PSB2b2lkIDAgPyBfZSA6IFwiXCI7XG4gICAgICAgIG1lc3NhZ2UuZm9yY2VQYXRoU3R5bGUgPSAoX2YgPSBvYmplY3QuZm9yY2VQYXRoU3R5bGUpICE9PSBudWxsICYmIF9mICE9PSB2b2lkIDAgPyBfZiA6IGZhbHNlO1xuICAgICAgICBtZXNzYWdlLm1ldGFkYXRhID0gT2JqZWN0LmVudHJpZXMoKF9nID0gb2JqZWN0Lm1ldGFkYXRhKSAhPT0gbnVsbCAmJiBfZyAhPT0gdm9pZCAwID8gX2cgOiB7fSkucmVkdWNlKChhY2MsIFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBhY2Nba2V5XSA9IFN0cmluZyh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICB9LCB7fSk7XG4gICAgICAgIG1lc3NhZ2UudGFnZ2luZyA9IChfaCA9IG9iamVjdC50YWdnaW5nKSAhPT0gbnVsbCAmJiBfaCAhPT0gdm9pZCAwID8gX2ggOiBcIlwiO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VTM1VwbG9hZF9NZXRhZGF0YUVudHJ5KCkge1xuICAgIHJldHVybiB7IGtleTogXCJcIiwgdmFsdWU6IFwiXCIgfTtcbn1cbmV4cG9ydHMuUzNVcGxvYWRfTWV0YWRhdGFFbnRyeSA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gbWluaW1hbF8xLmRlZmF1bHQuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLmtleSAhPT0gXCJcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxMCkuc3RyaW5nKG1lc3NhZ2Uua2V5KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS52YWx1ZSAhPT0gXCJcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxOCkuc3RyaW5nKG1lc3NhZ2UudmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIG1pbmltYWxfMS5kZWZhdWx0LlJlYWRlciA/IGlucHV0IDogbmV3IG1pbmltYWxfMS5kZWZhdWx0LlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVMzVXBsb2FkX01ldGFkYXRhRW50cnkoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmtleSA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnZhbHVlID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7IGtleTogaXNTZXQob2JqZWN0LmtleSkgPyBTdHJpbmcob2JqZWN0LmtleSkgOiBcIlwiLCB2YWx1ZTogaXNTZXQob2JqZWN0LnZhbHVlKSA/IFN0cmluZyhvYmplY3QudmFsdWUpIDogXCJcIiB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2Uua2V5ICE9PSB1bmRlZmluZWQgJiYgKG9iai5rZXkgPSBtZXNzYWdlLmtleSk7XG4gICAgICAgIG1lc3NhZ2UudmFsdWUgIT09IHVuZGVmaW5lZCAmJiAob2JqLnZhbHVlID0gbWVzc2FnZS52YWx1ZSk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VTM1VwbG9hZF9NZXRhZGF0YUVudHJ5KCk7XG4gICAgICAgIG1lc3NhZ2Uua2V5ID0gKF9hID0gb2JqZWN0LmtleSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogXCJcIjtcbiAgICAgICAgbWVzc2FnZS52YWx1ZSA9IChfYiA9IG9iamVjdC52YWx1ZSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogXCJcIjtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlR0NQVXBsb2FkKCkge1xuICAgIHJldHVybiB7IGNyZWRlbnRpYWxzOiBcIlwiLCBidWNrZXQ6IFwiXCIgfTtcbn1cbmV4cG9ydHMuR0NQVXBsb2FkID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBtaW5pbWFsXzEuZGVmYXVsdC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UuY3JlZGVudGlhbHMgIT09IHVuZGVmaW5lZCAmJiBtZXNzYWdlLmNyZWRlbnRpYWxzICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEwKS5zdHJpbmcobWVzc2FnZS5jcmVkZW50aWFscyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuYnVja2V0ICE9PSB1bmRlZmluZWQgJiYgbWVzc2FnZS5idWNrZXQgIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTgpLnN0cmluZyhtZXNzYWdlLmJ1Y2tldCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgbWluaW1hbF8xLmRlZmF1bHQuUmVhZGVyID8gaW5wdXQgOiBuZXcgbWluaW1hbF8xLmRlZmF1bHQuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlR0NQVXBsb2FkKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5jcmVkZW50aWFscyA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmJ1Y2tldCA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY3JlZGVudGlhbHM6IGlzU2V0KG9iamVjdC5jcmVkZW50aWFscykgPyBTdHJpbmcob2JqZWN0LmNyZWRlbnRpYWxzKSA6IFwiXCIsXG4gICAgICAgICAgICBidWNrZXQ6IGlzU2V0KG9iamVjdC5idWNrZXQpID8gU3RyaW5nKG9iamVjdC5idWNrZXQpIDogXCJcIixcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLmNyZWRlbnRpYWxzICE9PSB1bmRlZmluZWQgJiYgKG9iai5jcmVkZW50aWFscyA9IG1lc3NhZ2UuY3JlZGVudGlhbHMpO1xuICAgICAgICBtZXNzYWdlLmJ1Y2tldCAhPT0gdW5kZWZpbmVkICYmIChvYmouYnVja2V0ID0gbWVzc2FnZS5idWNrZXQpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlR0NQVXBsb2FkKCk7XG4gICAgICAgIG1lc3NhZ2UuY3JlZGVudGlhbHMgPSAoX2EgPSBvYmplY3QuY3JlZGVudGlhbHMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFwiXCI7XG4gICAgICAgIG1lc3NhZ2UuYnVja2V0ID0gKF9iID0gb2JqZWN0LmJ1Y2tldCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogXCJcIjtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlQXp1cmVCbG9iVXBsb2FkKCkge1xuICAgIHJldHVybiB7IGFjY291bnROYW1lOiBcIlwiLCBhY2NvdW50S2V5OiBcIlwiLCBjb250YWluZXJOYW1lOiBcIlwiIH07XG59XG5leHBvcnRzLkF6dXJlQmxvYlVwbG9hZCA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gbWluaW1hbF8xLmRlZmF1bHQuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLmFjY291bnROYW1lICE9PSB1bmRlZmluZWQgJiYgbWVzc2FnZS5hY2NvdW50TmFtZSAhPT0gXCJcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxMCkuc3RyaW5nKG1lc3NhZ2UuYWNjb3VudE5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmFjY291bnRLZXkgIT09IHVuZGVmaW5lZCAmJiBtZXNzYWdlLmFjY291bnRLZXkgIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTgpLnN0cmluZyhtZXNzYWdlLmFjY291bnRLZXkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmNvbnRhaW5lck5hbWUgIT09IHVuZGVmaW5lZCAmJiBtZXNzYWdlLmNvbnRhaW5lck5hbWUgIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMjYpLnN0cmluZyhtZXNzYWdlLmNvbnRhaW5lck5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIG1pbmltYWxfMS5kZWZhdWx0LlJlYWRlciA/IGlucHV0IDogbmV3IG1pbmltYWxfMS5kZWZhdWx0LlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZUF6dXJlQmxvYlVwbG9hZCgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYWNjb3VudE5hbWUgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5hY2NvdW50S2V5ID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuY29udGFpbmVyTmFtZSA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYWNjb3VudE5hbWU6IGlzU2V0KG9iamVjdC5hY2NvdW50TmFtZSkgPyBTdHJpbmcob2JqZWN0LmFjY291bnROYW1lKSA6IFwiXCIsXG4gICAgICAgICAgICBhY2NvdW50S2V5OiBpc1NldChvYmplY3QuYWNjb3VudEtleSkgPyBTdHJpbmcob2JqZWN0LmFjY291bnRLZXkpIDogXCJcIixcbiAgICAgICAgICAgIGNvbnRhaW5lck5hbWU6IGlzU2V0KG9iamVjdC5jb250YWluZXJOYW1lKSA/IFN0cmluZyhvYmplY3QuY29udGFpbmVyTmFtZSkgOiBcIlwiLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2UuYWNjb3VudE5hbWUgIT09IHVuZGVmaW5lZCAmJiAob2JqLmFjY291bnROYW1lID0gbWVzc2FnZS5hY2NvdW50TmFtZSk7XG4gICAgICAgIG1lc3NhZ2UuYWNjb3VudEtleSAhPT0gdW5kZWZpbmVkICYmIChvYmouYWNjb3VudEtleSA9IG1lc3NhZ2UuYWNjb3VudEtleSk7XG4gICAgICAgIG1lc3NhZ2UuY29udGFpbmVyTmFtZSAhPT0gdW5kZWZpbmVkICYmIChvYmouY29udGFpbmVyTmFtZSA9IG1lc3NhZ2UuY29udGFpbmVyTmFtZSk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlQXp1cmVCbG9iVXBsb2FkKCk7XG4gICAgICAgIG1lc3NhZ2UuYWNjb3VudE5hbWUgPSAoX2EgPSBvYmplY3QuYWNjb3VudE5hbWUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFwiXCI7XG4gICAgICAgIG1lc3NhZ2UuYWNjb3VudEtleSA9IChfYiA9IG9iamVjdC5hY2NvdW50S2V5KSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBcIlwiO1xuICAgICAgICBtZXNzYWdlLmNvbnRhaW5lck5hbWUgPSAoX2MgPSBvYmplY3QuY29udGFpbmVyTmFtZSkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogXCJcIjtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlQWxpT1NTVXBsb2FkKCkge1xuICAgIHJldHVybiB7IGFjY2Vzc0tleTogXCJcIiwgc2VjcmV0OiBcIlwiLCByZWdpb246IFwiXCIsIGVuZHBvaW50OiBcIlwiLCBidWNrZXQ6IFwiXCIgfTtcbn1cbmV4cG9ydHMuQWxpT1NTVXBsb2FkID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBtaW5pbWFsXzEuZGVmYXVsdC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UuYWNjZXNzS2V5ICE9PSB1bmRlZmluZWQgJiYgbWVzc2FnZS5hY2Nlc3NLZXkgIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTApLnN0cmluZyhtZXNzYWdlLmFjY2Vzc0tleSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2Uuc2VjcmV0ICE9PSB1bmRlZmluZWQgJiYgbWVzc2FnZS5zZWNyZXQgIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTgpLnN0cmluZyhtZXNzYWdlLnNlY3JldCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UucmVnaW9uICE9PSB1bmRlZmluZWQgJiYgbWVzc2FnZS5yZWdpb24gIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMjYpLnN0cmluZyhtZXNzYWdlLnJlZ2lvbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuZW5kcG9pbnQgIT09IHVuZGVmaW5lZCAmJiBtZXNzYWdlLmVuZHBvaW50ICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDM0KS5zdHJpbmcobWVzc2FnZS5lbmRwb2ludCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuYnVja2V0ICE9PSB1bmRlZmluZWQgJiYgbWVzc2FnZS5idWNrZXQgIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoNDIpLnN0cmluZyhtZXNzYWdlLmJ1Y2tldCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgbWluaW1hbF8xLmRlZmF1bHQuUmVhZGVyID8gaW5wdXQgOiBuZXcgbWluaW1hbF8xLmRlZmF1bHQuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlQWxpT1NTVXBsb2FkKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5hY2Nlc3NLZXkgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5zZWNyZXQgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5yZWdpb24gPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5lbmRwb2ludCA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmJ1Y2tldCA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYWNjZXNzS2V5OiBpc1NldChvYmplY3QuYWNjZXNzS2V5KSA/IFN0cmluZyhvYmplY3QuYWNjZXNzS2V5KSA6IFwiXCIsXG4gICAgICAgICAgICBzZWNyZXQ6IGlzU2V0KG9iamVjdC5zZWNyZXQpID8gU3RyaW5nKG9iamVjdC5zZWNyZXQpIDogXCJcIixcbiAgICAgICAgICAgIHJlZ2lvbjogaXNTZXQob2JqZWN0LnJlZ2lvbikgPyBTdHJpbmcob2JqZWN0LnJlZ2lvbikgOiBcIlwiLFxuICAgICAgICAgICAgZW5kcG9pbnQ6IGlzU2V0KG9iamVjdC5lbmRwb2ludCkgPyBTdHJpbmcob2JqZWN0LmVuZHBvaW50KSA6IFwiXCIsXG4gICAgICAgICAgICBidWNrZXQ6IGlzU2V0KG9iamVjdC5idWNrZXQpID8gU3RyaW5nKG9iamVjdC5idWNrZXQpIDogXCJcIixcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLmFjY2Vzc0tleSAhPT0gdW5kZWZpbmVkICYmIChvYmouYWNjZXNzS2V5ID0gbWVzc2FnZS5hY2Nlc3NLZXkpO1xuICAgICAgICBtZXNzYWdlLnNlY3JldCAhPT0gdW5kZWZpbmVkICYmIChvYmouc2VjcmV0ID0gbWVzc2FnZS5zZWNyZXQpO1xuICAgICAgICBtZXNzYWdlLnJlZ2lvbiAhPT0gdW5kZWZpbmVkICYmIChvYmoucmVnaW9uID0gbWVzc2FnZS5yZWdpb24pO1xuICAgICAgICBtZXNzYWdlLmVuZHBvaW50ICE9PSB1bmRlZmluZWQgJiYgKG9iai5lbmRwb2ludCA9IG1lc3NhZ2UuZW5kcG9pbnQpO1xuICAgICAgICBtZXNzYWdlLmJ1Y2tldCAhPT0gdW5kZWZpbmVkICYmIChvYmouYnVja2V0ID0gbWVzc2FnZS5idWNrZXQpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2U7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlQWxpT1NTVXBsb2FkKCk7XG4gICAgICAgIG1lc3NhZ2UuYWNjZXNzS2V5ID0gKF9hID0gb2JqZWN0LmFjY2Vzc0tleSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogXCJcIjtcbiAgICAgICAgbWVzc2FnZS5zZWNyZXQgPSAoX2IgPSBvYmplY3Quc2VjcmV0KSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBcIlwiO1xuICAgICAgICBtZXNzYWdlLnJlZ2lvbiA9IChfYyA9IG9iamVjdC5yZWdpb24pICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IFwiXCI7XG4gICAgICAgIG1lc3NhZ2UuZW5kcG9pbnQgPSAoX2QgPSBvYmplY3QuZW5kcG9pbnQpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IFwiXCI7XG4gICAgICAgIG1lc3NhZ2UuYnVja2V0ID0gKF9lID0gb2JqZWN0LmJ1Y2tldCkgIT09IG51bGwgJiYgX2UgIT09IHZvaWQgMCA/IF9lIDogXCJcIjtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlU3RyZWFtT3V0cHV0KCkge1xuICAgIHJldHVybiB7IHByb3RvY29sOiAwLCB1cmxzOiBbXSB9O1xufVxuZXhwb3J0cy5TdHJlYW1PdXRwdXQgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IG1pbmltYWxfMS5kZWZhdWx0LldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5wcm90b2NvbCAhPT0gdW5kZWZpbmVkICYmIG1lc3NhZ2UucHJvdG9jb2wgIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoOCkuaW50MzIobWVzc2FnZS5wcm90b2NvbCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UudXJscyAhPT0gdW5kZWZpbmVkICYmIG1lc3NhZ2UudXJscy5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgdiBvZiBtZXNzYWdlLnVybHMpIHtcbiAgICAgICAgICAgICAgICB3cml0ZXIudWludDMyKDE4KS5zdHJpbmcodik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgbWluaW1hbF8xLmRlZmF1bHQuUmVhZGVyID8gaW5wdXQgOiBuZXcgbWluaW1hbF8xLmRlZmF1bHQuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlU3RyZWFtT3V0cHV0KCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5wcm90b2NvbCA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudXJscy5wdXNoKHJlYWRlci5zdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHByb3RvY29sOiBpc1NldChvYmplY3QucHJvdG9jb2wpID8gc3RyZWFtUHJvdG9jb2xGcm9tSlNPTihvYmplY3QucHJvdG9jb2wpIDogMCxcbiAgICAgICAgICAgIHVybHM6IEFycmF5LmlzQXJyYXkob2JqZWN0ID09PSBudWxsIHx8IG9iamVjdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb2JqZWN0LnVybHMpID8gb2JqZWN0LnVybHMubWFwKChlKSA9PiBTdHJpbmcoZSkpIDogW10sXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS5wcm90b2NvbCAhPT0gdW5kZWZpbmVkICYmIChvYmoucHJvdG9jb2wgPSBzdHJlYW1Qcm90b2NvbFRvSlNPTihtZXNzYWdlLnByb3RvY29sKSk7XG4gICAgICAgIGlmIChtZXNzYWdlLnVybHMpIHtcbiAgICAgICAgICAgIG9iai51cmxzID0gbWVzc2FnZS51cmxzLm1hcCgoZSkgPT4gZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvYmoudXJscyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VTdHJlYW1PdXRwdXQoKTtcbiAgICAgICAgbWVzc2FnZS5wcm90b2NvbCA9IChfYSA9IG9iamVjdC5wcm90b2NvbCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMDtcbiAgICAgICAgbWVzc2FnZS51cmxzID0gKChfYiA9IG9iamVjdC51cmxzKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IubWFwKChlKSA9PiBlKSkgfHwgW107XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZUVuY29kaW5nT3B0aW9ucygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB3aWR0aDogMCxcbiAgICAgICAgaGVpZ2h0OiAwLFxuICAgICAgICBkZXB0aDogMCxcbiAgICAgICAgZnJhbWVyYXRlOiAwLFxuICAgICAgICBhdWRpb0NvZGVjOiAwLFxuICAgICAgICBhdWRpb0JpdHJhdGU6IDAsXG4gICAgICAgIGF1ZGlvRnJlcXVlbmN5OiAwLFxuICAgICAgICB2aWRlb0NvZGVjOiAwLFxuICAgICAgICB2aWRlb0JpdHJhdGU6IDAsXG4gICAgICAgIGtleUZyYW1lSW50ZXJ2YWw6IDAsXG4gICAgfTtcbn1cbmV4cG9ydHMuRW5jb2RpbmdPcHRpb25zID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBtaW5pbWFsXzEuZGVmYXVsdC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2Uud2lkdGggIT09IHVuZGVmaW5lZCAmJiBtZXNzYWdlLndpZHRoICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDgpLmludDMyKG1lc3NhZ2Uud2lkdGgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmhlaWdodCAhPT0gdW5kZWZpbmVkICYmIG1lc3NhZ2UuaGVpZ2h0ICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDE2KS5pbnQzMihtZXNzYWdlLmhlaWdodCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuZGVwdGggIT09IHVuZGVmaW5lZCAmJiBtZXNzYWdlLmRlcHRoICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDI0KS5pbnQzMihtZXNzYWdlLmRlcHRoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5mcmFtZXJhdGUgIT09IHVuZGVmaW5lZCAmJiBtZXNzYWdlLmZyYW1lcmF0ZSAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigzMikuaW50MzIobWVzc2FnZS5mcmFtZXJhdGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmF1ZGlvQ29kZWMgIT09IHVuZGVmaW5lZCAmJiBtZXNzYWdlLmF1ZGlvQ29kZWMgIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoNDApLmludDMyKG1lc3NhZ2UuYXVkaW9Db2RlYyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuYXVkaW9CaXRyYXRlICE9PSB1bmRlZmluZWQgJiYgbWVzc2FnZS5hdWRpb0JpdHJhdGUgIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoNDgpLmludDMyKG1lc3NhZ2UuYXVkaW9CaXRyYXRlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5hdWRpb0ZyZXF1ZW5jeSAhPT0gdW5kZWZpbmVkICYmIG1lc3NhZ2UuYXVkaW9GcmVxdWVuY3kgIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoNTYpLmludDMyKG1lc3NhZ2UuYXVkaW9GcmVxdWVuY3kpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnZpZGVvQ29kZWMgIT09IHVuZGVmaW5lZCAmJiBtZXNzYWdlLnZpZGVvQ29kZWMgIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoNjQpLmludDMyKG1lc3NhZ2UudmlkZW9Db2RlYyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UudmlkZW9CaXRyYXRlICE9PSB1bmRlZmluZWQgJiYgbWVzc2FnZS52aWRlb0JpdHJhdGUgIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoNzIpLmludDMyKG1lc3NhZ2UudmlkZW9CaXRyYXRlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5rZXlGcmFtZUludGVydmFsICE9PSB1bmRlZmluZWQgJiYgbWVzc2FnZS5rZXlGcmFtZUludGVydmFsICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDgxKS5kb3VibGUobWVzc2FnZS5rZXlGcmFtZUludGVydmFsKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBtaW5pbWFsXzEuZGVmYXVsdC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBtaW5pbWFsXzEuZGVmYXVsdC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VFbmNvZGluZ09wdGlvbnMoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLndpZHRoID0gcmVhZGVyLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5oZWlnaHQgPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmRlcHRoID0gcmVhZGVyLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5mcmFtZXJhdGUgPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmF1ZGlvQ29kZWMgPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmF1ZGlvQml0cmF0ZSA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYXVkaW9GcmVxdWVuY3kgPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnZpZGVvQ29kZWMgPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnZpZGVvQml0cmF0ZSA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmtleUZyYW1lSW50ZXJ2YWwgPSByZWFkZXIuZG91YmxlKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHdpZHRoOiBpc1NldChvYmplY3Qud2lkdGgpID8gTnVtYmVyKG9iamVjdC53aWR0aCkgOiAwLFxuICAgICAgICAgICAgaGVpZ2h0OiBpc1NldChvYmplY3QuaGVpZ2h0KSA/IE51bWJlcihvYmplY3QuaGVpZ2h0KSA6IDAsXG4gICAgICAgICAgICBkZXB0aDogaXNTZXQob2JqZWN0LmRlcHRoKSA/IE51bWJlcihvYmplY3QuZGVwdGgpIDogMCxcbiAgICAgICAgICAgIGZyYW1lcmF0ZTogaXNTZXQob2JqZWN0LmZyYW1lcmF0ZSkgPyBOdW1iZXIob2JqZWN0LmZyYW1lcmF0ZSkgOiAwLFxuICAgICAgICAgICAgYXVkaW9Db2RlYzogaXNTZXQob2JqZWN0LmF1ZGlvQ29kZWMpID8gbGl2ZWtpdF9tb2RlbHNfMS5hdWRpb0NvZGVjRnJvbUpTT04ob2JqZWN0LmF1ZGlvQ29kZWMpIDogMCxcbiAgICAgICAgICAgIGF1ZGlvQml0cmF0ZTogaXNTZXQob2JqZWN0LmF1ZGlvQml0cmF0ZSkgPyBOdW1iZXIob2JqZWN0LmF1ZGlvQml0cmF0ZSkgOiAwLFxuICAgICAgICAgICAgYXVkaW9GcmVxdWVuY3k6IGlzU2V0KG9iamVjdC5hdWRpb0ZyZXF1ZW5jeSkgPyBOdW1iZXIob2JqZWN0LmF1ZGlvRnJlcXVlbmN5KSA6IDAsXG4gICAgICAgICAgICB2aWRlb0NvZGVjOiBpc1NldChvYmplY3QudmlkZW9Db2RlYykgPyBsaXZla2l0X21vZGVsc18xLnZpZGVvQ29kZWNGcm9tSlNPTihvYmplY3QudmlkZW9Db2RlYykgOiAwLFxuICAgICAgICAgICAgdmlkZW9CaXRyYXRlOiBpc1NldChvYmplY3QudmlkZW9CaXRyYXRlKSA/IE51bWJlcihvYmplY3QudmlkZW9CaXRyYXRlKSA6IDAsXG4gICAgICAgICAgICBrZXlGcmFtZUludGVydmFsOiBpc1NldChvYmplY3Qua2V5RnJhbWVJbnRlcnZhbCkgPyBOdW1iZXIob2JqZWN0LmtleUZyYW1lSW50ZXJ2YWwpIDogMCxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLndpZHRoICE9PSB1bmRlZmluZWQgJiYgKG9iai53aWR0aCA9IE1hdGgucm91bmQobWVzc2FnZS53aWR0aCkpO1xuICAgICAgICBtZXNzYWdlLmhlaWdodCAhPT0gdW5kZWZpbmVkICYmIChvYmouaGVpZ2h0ID0gTWF0aC5yb3VuZChtZXNzYWdlLmhlaWdodCkpO1xuICAgICAgICBtZXNzYWdlLmRlcHRoICE9PSB1bmRlZmluZWQgJiYgKG9iai5kZXB0aCA9IE1hdGgucm91bmQobWVzc2FnZS5kZXB0aCkpO1xuICAgICAgICBtZXNzYWdlLmZyYW1lcmF0ZSAhPT0gdW5kZWZpbmVkICYmIChvYmouZnJhbWVyYXRlID0gTWF0aC5yb3VuZChtZXNzYWdlLmZyYW1lcmF0ZSkpO1xuICAgICAgICBtZXNzYWdlLmF1ZGlvQ29kZWMgIT09IHVuZGVmaW5lZCAmJiAob2JqLmF1ZGlvQ29kZWMgPSBsaXZla2l0X21vZGVsc18xLmF1ZGlvQ29kZWNUb0pTT04obWVzc2FnZS5hdWRpb0NvZGVjKSk7XG4gICAgICAgIG1lc3NhZ2UuYXVkaW9CaXRyYXRlICE9PSB1bmRlZmluZWQgJiYgKG9iai5hdWRpb0JpdHJhdGUgPSBNYXRoLnJvdW5kKG1lc3NhZ2UuYXVkaW9CaXRyYXRlKSk7XG4gICAgICAgIG1lc3NhZ2UuYXVkaW9GcmVxdWVuY3kgIT09IHVuZGVmaW5lZCAmJiAob2JqLmF1ZGlvRnJlcXVlbmN5ID0gTWF0aC5yb3VuZChtZXNzYWdlLmF1ZGlvRnJlcXVlbmN5KSk7XG4gICAgICAgIG1lc3NhZ2UudmlkZW9Db2RlYyAhPT0gdW5kZWZpbmVkICYmIChvYmoudmlkZW9Db2RlYyA9IGxpdmVraXRfbW9kZWxzXzEudmlkZW9Db2RlY1RvSlNPTihtZXNzYWdlLnZpZGVvQ29kZWMpKTtcbiAgICAgICAgbWVzc2FnZS52aWRlb0JpdHJhdGUgIT09IHVuZGVmaW5lZCAmJiAob2JqLnZpZGVvQml0cmF0ZSA9IE1hdGgucm91bmQobWVzc2FnZS52aWRlb0JpdHJhdGUpKTtcbiAgICAgICAgbWVzc2FnZS5rZXlGcmFtZUludGVydmFsICE9PSB1bmRlZmluZWQgJiYgKG9iai5rZXlGcmFtZUludGVydmFsID0gbWVzc2FnZS5rZXlGcmFtZUludGVydmFsKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZiwgX2csIF9oLCBfaiwgX2s7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlRW5jb2RpbmdPcHRpb25zKCk7XG4gICAgICAgIG1lc3NhZ2Uud2lkdGggPSAoX2EgPSBvYmplY3Qud2lkdGgpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IDA7XG4gICAgICAgIG1lc3NhZ2UuaGVpZ2h0ID0gKF9iID0gb2JqZWN0LmhlaWdodCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogMDtcbiAgICAgICAgbWVzc2FnZS5kZXB0aCA9IChfYyA9IG9iamVjdC5kZXB0aCkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogMDtcbiAgICAgICAgbWVzc2FnZS5mcmFtZXJhdGUgPSAoX2QgPSBvYmplY3QuZnJhbWVyYXRlKSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiAwO1xuICAgICAgICBtZXNzYWdlLmF1ZGlvQ29kZWMgPSAoX2UgPSBvYmplY3QuYXVkaW9Db2RlYykgIT09IG51bGwgJiYgX2UgIT09IHZvaWQgMCA/IF9lIDogMDtcbiAgICAgICAgbWVzc2FnZS5hdWRpb0JpdHJhdGUgPSAoX2YgPSBvYmplY3QuYXVkaW9CaXRyYXRlKSAhPT0gbnVsbCAmJiBfZiAhPT0gdm9pZCAwID8gX2YgOiAwO1xuICAgICAgICBtZXNzYWdlLmF1ZGlvRnJlcXVlbmN5ID0gKF9nID0gb2JqZWN0LmF1ZGlvRnJlcXVlbmN5KSAhPT0gbnVsbCAmJiBfZyAhPT0gdm9pZCAwID8gX2cgOiAwO1xuICAgICAgICBtZXNzYWdlLnZpZGVvQ29kZWMgPSAoX2ggPSBvYmplY3QudmlkZW9Db2RlYykgIT09IG51bGwgJiYgX2ggIT09IHZvaWQgMCA/IF9oIDogMDtcbiAgICAgICAgbWVzc2FnZS52aWRlb0JpdHJhdGUgPSAoX2ogPSBvYmplY3QudmlkZW9CaXRyYXRlKSAhPT0gbnVsbCAmJiBfaiAhPT0gdm9pZCAwID8gX2ogOiAwO1xuICAgICAgICBtZXNzYWdlLmtleUZyYW1lSW50ZXJ2YWwgPSAoX2sgPSBvYmplY3Qua2V5RnJhbWVJbnRlcnZhbCkgIT09IG51bGwgJiYgX2sgIT09IHZvaWQgMCA/IF9rIDogMDtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlVXBkYXRlTGF5b3V0UmVxdWVzdCgpIHtcbiAgICByZXR1cm4geyBlZ3Jlc3NJZDogXCJcIiwgbGF5b3V0OiBcIlwiIH07XG59XG5leHBvcnRzLlVwZGF0ZUxheW91dFJlcXVlc3QgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IG1pbmltYWxfMS5kZWZhdWx0LldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5lZ3Jlc3NJZCAhPT0gdW5kZWZpbmVkICYmIG1lc3NhZ2UuZWdyZXNzSWQgIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTApLnN0cmluZyhtZXNzYWdlLmVncmVzc0lkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5sYXlvdXQgIT09IHVuZGVmaW5lZCAmJiBtZXNzYWdlLmxheW91dCAhPT0gXCJcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxOCkuc3RyaW5nKG1lc3NhZ2UubGF5b3V0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBtaW5pbWFsXzEuZGVmYXVsdC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBtaW5pbWFsXzEuZGVmYXVsdC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VVcGRhdGVMYXlvdXRSZXF1ZXN0KCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5lZ3Jlc3NJZCA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmxheW91dCA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZWdyZXNzSWQ6IGlzU2V0KG9iamVjdC5lZ3Jlc3NJZCkgPyBTdHJpbmcob2JqZWN0LmVncmVzc0lkKSA6IFwiXCIsXG4gICAgICAgICAgICBsYXlvdXQ6IGlzU2V0KG9iamVjdC5sYXlvdXQpID8gU3RyaW5nKG9iamVjdC5sYXlvdXQpIDogXCJcIixcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLmVncmVzc0lkICE9PSB1bmRlZmluZWQgJiYgKG9iai5lZ3Jlc3NJZCA9IG1lc3NhZ2UuZWdyZXNzSWQpO1xuICAgICAgICBtZXNzYWdlLmxheW91dCAhPT0gdW5kZWZpbmVkICYmIChvYmoubGF5b3V0ID0gbWVzc2FnZS5sYXlvdXQpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlVXBkYXRlTGF5b3V0UmVxdWVzdCgpO1xuICAgICAgICBtZXNzYWdlLmVncmVzc0lkID0gKF9hID0gb2JqZWN0LmVncmVzc0lkKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBcIlwiO1xuICAgICAgICBtZXNzYWdlLmxheW91dCA9IChfYiA9IG9iamVjdC5sYXlvdXQpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IFwiXCI7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZVVwZGF0ZVN0cmVhbVJlcXVlc3QoKSB7XG4gICAgcmV0dXJuIHsgZWdyZXNzSWQ6IFwiXCIsIGFkZE91dHB1dFVybHM6IFtdLCByZW1vdmVPdXRwdXRVcmxzOiBbXSB9O1xufVxuZXhwb3J0cy5VcGRhdGVTdHJlYW1SZXF1ZXN0ID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBtaW5pbWFsXzEuZGVmYXVsdC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UuZWdyZXNzSWQgIT09IHVuZGVmaW5lZCAmJiBtZXNzYWdlLmVncmVzc0lkICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEwKS5zdHJpbmcobWVzc2FnZS5lZ3Jlc3NJZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuYWRkT3V0cHV0VXJscyAhPT0gdW5kZWZpbmVkICYmIG1lc3NhZ2UuYWRkT3V0cHV0VXJscy5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgdiBvZiBtZXNzYWdlLmFkZE91dHB1dFVybHMpIHtcbiAgICAgICAgICAgICAgICB3cml0ZXIudWludDMyKDE4KS5zdHJpbmcodik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UucmVtb3ZlT3V0cHV0VXJscyAhPT0gdW5kZWZpbmVkICYmIG1lc3NhZ2UucmVtb3ZlT3V0cHV0VXJscy5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgdiBvZiBtZXNzYWdlLnJlbW92ZU91dHB1dFVybHMpIHtcbiAgICAgICAgICAgICAgICB3cml0ZXIudWludDMyKDI2KS5zdHJpbmcodik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgbWluaW1hbF8xLmRlZmF1bHQuUmVhZGVyID8gaW5wdXQgOiBuZXcgbWluaW1hbF8xLmRlZmF1bHQuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlVXBkYXRlU3RyZWFtUmVxdWVzdCgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZWdyZXNzSWQgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5hZGRPdXRwdXRVcmxzLnB1c2gocmVhZGVyLnN0cmluZygpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnJlbW92ZU91dHB1dFVybHMucHVzaChyZWFkZXIuc3RyaW5nKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBlZ3Jlc3NJZDogaXNTZXQob2JqZWN0LmVncmVzc0lkKSA/IFN0cmluZyhvYmplY3QuZWdyZXNzSWQpIDogXCJcIixcbiAgICAgICAgICAgIGFkZE91dHB1dFVybHM6IEFycmF5LmlzQXJyYXkob2JqZWN0ID09PSBudWxsIHx8IG9iamVjdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb2JqZWN0LmFkZE91dHB1dFVybHMpID8gb2JqZWN0LmFkZE91dHB1dFVybHMubWFwKChlKSA9PiBTdHJpbmcoZSkpIDogW10sXG4gICAgICAgICAgICByZW1vdmVPdXRwdXRVcmxzOiBBcnJheS5pc0FycmF5KG9iamVjdCA9PT0gbnVsbCB8fCBvYmplY3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9iamVjdC5yZW1vdmVPdXRwdXRVcmxzKVxuICAgICAgICAgICAgICAgID8gb2JqZWN0LnJlbW92ZU91dHB1dFVybHMubWFwKChlKSA9PiBTdHJpbmcoZSkpXG4gICAgICAgICAgICAgICAgOiBbXSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLmVncmVzc0lkICE9PSB1bmRlZmluZWQgJiYgKG9iai5lZ3Jlc3NJZCA9IG1lc3NhZ2UuZWdyZXNzSWQpO1xuICAgICAgICBpZiAobWVzc2FnZS5hZGRPdXRwdXRVcmxzKSB7XG4gICAgICAgICAgICBvYmouYWRkT3V0cHV0VXJscyA9IG1lc3NhZ2UuYWRkT3V0cHV0VXJscy5tYXAoKGUpID0+IGUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb2JqLmFkZE91dHB1dFVybHMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5yZW1vdmVPdXRwdXRVcmxzKSB7XG4gICAgICAgICAgICBvYmoucmVtb3ZlT3V0cHV0VXJscyA9IG1lc3NhZ2UucmVtb3ZlT3V0cHV0VXJscy5tYXAoKGUpID0+IGUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb2JqLnJlbW92ZU91dHB1dFVybHMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVVwZGF0ZVN0cmVhbVJlcXVlc3QoKTtcbiAgICAgICAgbWVzc2FnZS5lZ3Jlc3NJZCA9IChfYSA9IG9iamVjdC5lZ3Jlc3NJZCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogXCJcIjtcbiAgICAgICAgbWVzc2FnZS5hZGRPdXRwdXRVcmxzID0gKChfYiA9IG9iamVjdC5hZGRPdXRwdXRVcmxzKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IubWFwKChlKSA9PiBlKSkgfHwgW107XG4gICAgICAgIG1lc3NhZ2UucmVtb3ZlT3V0cHV0VXJscyA9ICgoX2MgPSBvYmplY3QucmVtb3ZlT3V0cHV0VXJscykgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLm1hcCgoZSkgPT4gZSkpIHx8IFtdO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VVcGRhdGVPdXRwdXRzUmVxdWVzdCgpIHtcbiAgICByZXR1cm4geyBlZ3Jlc3NJZDogXCJcIiwgYWRkSW1hZ2VPdXRwdXRzOiBbXSwgcmVtb3ZlSW1hZ2VPdXRwdXRzOiBbXSB9O1xufVxuZXhwb3J0cy5VcGRhdGVPdXRwdXRzUmVxdWVzdCA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gbWluaW1hbF8xLmRlZmF1bHQuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLmVncmVzc0lkICE9PSB1bmRlZmluZWQgJiYgbWVzc2FnZS5lZ3Jlc3NJZCAhPT0gXCJcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxMCkuc3RyaW5nKG1lc3NhZ2UuZWdyZXNzSWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmFkZEltYWdlT3V0cHV0cyAhPT0gdW5kZWZpbmVkICYmIG1lc3NhZ2UuYWRkSW1hZ2VPdXRwdXRzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCB2IG9mIG1lc3NhZ2UuYWRkSW1hZ2VPdXRwdXRzKSB7XG4gICAgICAgICAgICAgICAgZXhwb3J0cy5JbWFnZU91dHB1dC5lbmNvZGUodiwgd3JpdGVyLnVpbnQzMigxOCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5yZW1vdmVJbWFnZU91dHB1dHMgIT09IHVuZGVmaW5lZCAmJiBtZXNzYWdlLnJlbW92ZUltYWdlT3V0cHV0cy5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgdiBvZiBtZXNzYWdlLnJlbW92ZUltYWdlT3V0cHV0cykge1xuICAgICAgICAgICAgICAgIGV4cG9ydHMuSW1hZ2VPdXRwdXQuZW5jb2RlKHYsIHdyaXRlci51aW50MzIoMjYpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgbWluaW1hbF8xLmRlZmF1bHQuUmVhZGVyID8gaW5wdXQgOiBuZXcgbWluaW1hbF8xLmRlZmF1bHQuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlVXBkYXRlT3V0cHV0c1JlcXVlc3QoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmVncmVzc0lkID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYWRkSW1hZ2VPdXRwdXRzLnB1c2goZXhwb3J0cy5JbWFnZU91dHB1dC5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnJlbW92ZUltYWdlT3V0cHV0cy5wdXNoKGV4cG9ydHMuSW1hZ2VPdXRwdXQuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGVncmVzc0lkOiBpc1NldChvYmplY3QuZWdyZXNzSWQpID8gU3RyaW5nKG9iamVjdC5lZ3Jlc3NJZCkgOiBcIlwiLFxuICAgICAgICAgICAgYWRkSW1hZ2VPdXRwdXRzOiBBcnJheS5pc0FycmF5KG9iamVjdCA9PT0gbnVsbCB8fCBvYmplY3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9iamVjdC5hZGRJbWFnZU91dHB1dHMpXG4gICAgICAgICAgICAgICAgPyBvYmplY3QuYWRkSW1hZ2VPdXRwdXRzLm1hcCgoZSkgPT4gZXhwb3J0cy5JbWFnZU91dHB1dC5mcm9tSlNPTihlKSlcbiAgICAgICAgICAgICAgICA6IFtdLFxuICAgICAgICAgICAgcmVtb3ZlSW1hZ2VPdXRwdXRzOiBBcnJheS5pc0FycmF5KG9iamVjdCA9PT0gbnVsbCB8fCBvYmplY3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9iamVjdC5yZW1vdmVJbWFnZU91dHB1dHMpXG4gICAgICAgICAgICAgICAgPyBvYmplY3QucmVtb3ZlSW1hZ2VPdXRwdXRzLm1hcCgoZSkgPT4gZXhwb3J0cy5JbWFnZU91dHB1dC5mcm9tSlNPTihlKSlcbiAgICAgICAgICAgICAgICA6IFtdLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2UuZWdyZXNzSWQgIT09IHVuZGVmaW5lZCAmJiAob2JqLmVncmVzc0lkID0gbWVzc2FnZS5lZ3Jlc3NJZCk7XG4gICAgICAgIGlmIChtZXNzYWdlLmFkZEltYWdlT3V0cHV0cykge1xuICAgICAgICAgICAgb2JqLmFkZEltYWdlT3V0cHV0cyA9IG1lc3NhZ2UuYWRkSW1hZ2VPdXRwdXRzLm1hcCgoZSkgPT4gZSA/IGV4cG9ydHMuSW1hZ2VPdXRwdXQudG9KU09OKGUpIDogdW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9iai5hZGRJbWFnZU91dHB1dHMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5yZW1vdmVJbWFnZU91dHB1dHMpIHtcbiAgICAgICAgICAgIG9iai5yZW1vdmVJbWFnZU91dHB1dHMgPSBtZXNzYWdlLnJlbW92ZUltYWdlT3V0cHV0cy5tYXAoKGUpID0+IGUgPyBleHBvcnRzLkltYWdlT3V0cHV0LnRvSlNPTihlKSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvYmoucmVtb3ZlSW1hZ2VPdXRwdXRzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYztcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VVcGRhdGVPdXRwdXRzUmVxdWVzdCgpO1xuICAgICAgICBtZXNzYWdlLmVncmVzc0lkID0gKF9hID0gb2JqZWN0LmVncmVzc0lkKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBcIlwiO1xuICAgICAgICBtZXNzYWdlLmFkZEltYWdlT3V0cHV0cyA9ICgoX2IgPSBvYmplY3QuYWRkSW1hZ2VPdXRwdXRzKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IubWFwKChlKSA9PiBleHBvcnRzLkltYWdlT3V0cHV0LmZyb21QYXJ0aWFsKGUpKSkgfHwgW107XG4gICAgICAgIG1lc3NhZ2UucmVtb3ZlSW1hZ2VPdXRwdXRzID0gKChfYyA9IG9iamVjdC5yZW1vdmVJbWFnZU91dHB1dHMpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5tYXAoKGUpID0+IGV4cG9ydHMuSW1hZ2VPdXRwdXQuZnJvbVBhcnRpYWwoZSkpKSB8fCBbXTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlTGlzdEVncmVzc1JlcXVlc3QoKSB7XG4gICAgcmV0dXJuIHsgcm9vbU5hbWU6IFwiXCIsIGVncmVzc0lkOiBcIlwiLCBhY3RpdmU6IGZhbHNlIH07XG59XG5leHBvcnRzLkxpc3RFZ3Jlc3NSZXF1ZXN0ID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBtaW5pbWFsXzEuZGVmYXVsdC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2Uucm9vbU5hbWUgIT09IHVuZGVmaW5lZCAmJiBtZXNzYWdlLnJvb21OYW1lICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEwKS5zdHJpbmcobWVzc2FnZS5yb29tTmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuZWdyZXNzSWQgIT09IHVuZGVmaW5lZCAmJiBtZXNzYWdlLmVncmVzc0lkICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDE4KS5zdHJpbmcobWVzc2FnZS5lZ3Jlc3NJZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuYWN0aXZlID09PSB0cnVlKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDI0KS5ib29sKG1lc3NhZ2UuYWN0aXZlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBtaW5pbWFsXzEuZGVmYXVsdC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBtaW5pbWFsXzEuZGVmYXVsdC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VMaXN0RWdyZXNzUmVxdWVzdCgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uucm9vbU5hbWUgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5lZ3Jlc3NJZCA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmFjdGl2ZSA9IHJlYWRlci5ib29sKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJvb21OYW1lOiBpc1NldChvYmplY3Qucm9vbU5hbWUpID8gU3RyaW5nKG9iamVjdC5yb29tTmFtZSkgOiBcIlwiLFxuICAgICAgICAgICAgZWdyZXNzSWQ6IGlzU2V0KG9iamVjdC5lZ3Jlc3NJZCkgPyBTdHJpbmcob2JqZWN0LmVncmVzc0lkKSA6IFwiXCIsXG4gICAgICAgICAgICBhY3RpdmU6IGlzU2V0KG9iamVjdC5hY3RpdmUpID8gQm9vbGVhbihvYmplY3QuYWN0aXZlKSA6IGZhbHNlLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2Uucm9vbU5hbWUgIT09IHVuZGVmaW5lZCAmJiAob2JqLnJvb21OYW1lID0gbWVzc2FnZS5yb29tTmFtZSk7XG4gICAgICAgIG1lc3NhZ2UuZWdyZXNzSWQgIT09IHVuZGVmaW5lZCAmJiAob2JqLmVncmVzc0lkID0gbWVzc2FnZS5lZ3Jlc3NJZCk7XG4gICAgICAgIG1lc3NhZ2UuYWN0aXZlICE9PSB1bmRlZmluZWQgJiYgKG9iai5hY3RpdmUgPSBtZXNzYWdlLmFjdGl2ZSk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlTGlzdEVncmVzc1JlcXVlc3QoKTtcbiAgICAgICAgbWVzc2FnZS5yb29tTmFtZSA9IChfYSA9IG9iamVjdC5yb29tTmFtZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogXCJcIjtcbiAgICAgICAgbWVzc2FnZS5lZ3Jlc3NJZCA9IChfYiA9IG9iamVjdC5lZ3Jlc3NJZCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogXCJcIjtcbiAgICAgICAgbWVzc2FnZS5hY3RpdmUgPSAoX2MgPSBvYmplY3QuYWN0aXZlKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiBmYWxzZTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlTGlzdEVncmVzc1Jlc3BvbnNlKCkge1xuICAgIHJldHVybiB7IGl0ZW1zOiBbXSB9O1xufVxuZXhwb3J0cy5MaXN0RWdyZXNzUmVzcG9uc2UgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IG1pbmltYWxfMS5kZWZhdWx0LldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5pdGVtcyAhPT0gdW5kZWZpbmVkICYmIG1lc3NhZ2UuaXRlbXMubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHYgb2YgbWVzc2FnZS5pdGVtcykge1xuICAgICAgICAgICAgICAgIGV4cG9ydHMuRWdyZXNzSW5mby5lbmNvZGUodiwgd3JpdGVyLnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBtaW5pbWFsXzEuZGVmYXVsdC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBtaW5pbWFsXzEuZGVmYXVsdC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VMaXN0RWdyZXNzUmVzcG9uc2UoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLml0ZW1zLnB1c2goZXhwb3J0cy5FZ3Jlc3NJbmZvLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7IGl0ZW1zOiBBcnJheS5pc0FycmF5KG9iamVjdCA9PT0gbnVsbCB8fCBvYmplY3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9iamVjdC5pdGVtcykgPyBvYmplY3QuaXRlbXMubWFwKChlKSA9PiBleHBvcnRzLkVncmVzc0luZm8uZnJvbUpTT04oZSkpIDogW10gfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBpZiAobWVzc2FnZS5pdGVtcykge1xuICAgICAgICAgICAgb2JqLml0ZW1zID0gbWVzc2FnZS5pdGVtcy5tYXAoKGUpID0+IGUgPyBleHBvcnRzLkVncmVzc0luZm8udG9KU09OKGUpIDogdW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9iai5pdGVtcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZUxpc3RFZ3Jlc3NSZXNwb25zZSgpO1xuICAgICAgICBtZXNzYWdlLml0ZW1zID0gKChfYSA9IG9iamVjdC5pdGVtcykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm1hcCgoZSkgPT4gZXhwb3J0cy5FZ3Jlc3NJbmZvLmZyb21QYXJ0aWFsKGUpKSkgfHwgW107XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZVN0b3BFZ3Jlc3NSZXF1ZXN0KCkge1xuICAgIHJldHVybiB7IGVncmVzc0lkOiBcIlwiIH07XG59XG5leHBvcnRzLlN0b3BFZ3Jlc3NSZXF1ZXN0ID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBtaW5pbWFsXzEuZGVmYXVsdC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UuZWdyZXNzSWQgIT09IHVuZGVmaW5lZCAmJiBtZXNzYWdlLmVncmVzc0lkICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEwKS5zdHJpbmcobWVzc2FnZS5lZ3Jlc3NJZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgbWluaW1hbF8xLmRlZmF1bHQuUmVhZGVyID8gaW5wdXQgOiBuZXcgbWluaW1hbF8xLmRlZmF1bHQuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlU3RvcEVncmVzc1JlcXVlc3QoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmVncmVzc0lkID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7IGVncmVzc0lkOiBpc1NldChvYmplY3QuZWdyZXNzSWQpID8gU3RyaW5nKG9iamVjdC5lZ3Jlc3NJZCkgOiBcIlwiIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS5lZ3Jlc3NJZCAhPT0gdW5kZWZpbmVkICYmIChvYmouZWdyZXNzSWQgPSBtZXNzYWdlLmVncmVzc0lkKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlU3RvcEVncmVzc1JlcXVlc3QoKTtcbiAgICAgICAgbWVzc2FnZS5lZ3Jlc3NJZCA9IChfYSA9IG9iamVjdC5lZ3Jlc3NJZCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogXCJcIjtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlRWdyZXNzSW5mbygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBlZ3Jlc3NJZDogXCJcIixcbiAgICAgICAgcm9vbUlkOiBcIlwiLFxuICAgICAgICByb29tTmFtZTogXCJcIixcbiAgICAgICAgc3RhdHVzOiAwLFxuICAgICAgICBzdGFydGVkQXQ6IDAsXG4gICAgICAgIGVuZGVkQXQ6IDAsXG4gICAgICAgIHVwZGF0ZWRBdDogMCxcbiAgICAgICAgZXJyb3I6IFwiXCIsXG4gICAgICAgIHJvb21Db21wb3NpdGU6IHVuZGVmaW5lZCxcbiAgICAgICAgd2ViOiB1bmRlZmluZWQsXG4gICAgICAgIHBhcnRpY2lwYW50OiB1bmRlZmluZWQsXG4gICAgICAgIHRyYWNrQ29tcG9zaXRlOiB1bmRlZmluZWQsXG4gICAgICAgIHRyYWNrOiB1bmRlZmluZWQsXG4gICAgICAgIHN0cmVhbTogdW5kZWZpbmVkLFxuICAgICAgICBmaWxlOiB1bmRlZmluZWQsXG4gICAgICAgIHNlZ21lbnRzOiB1bmRlZmluZWQsXG4gICAgICAgIHN0cmVhbVJlc3VsdHM6IFtdLFxuICAgICAgICBmaWxlUmVzdWx0czogW10sXG4gICAgICAgIHNlZ21lbnRSZXN1bHRzOiBbXSxcbiAgICAgICAgaW1hZ2VSZXN1bHRzOiBbXSxcbiAgICB9O1xufVxuZXhwb3J0cy5FZ3Jlc3NJbmZvID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBtaW5pbWFsXzEuZGVmYXVsdC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UuZWdyZXNzSWQgIT09IHVuZGVmaW5lZCAmJiBtZXNzYWdlLmVncmVzc0lkICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEwKS5zdHJpbmcobWVzc2FnZS5lZ3Jlc3NJZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2Uucm9vbUlkICE9PSB1bmRlZmluZWQgJiYgbWVzc2FnZS5yb29tSWQgIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTgpLnN0cmluZyhtZXNzYWdlLnJvb21JZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2Uucm9vbU5hbWUgIT09IHVuZGVmaW5lZCAmJiBtZXNzYWdlLnJvb21OYW1lICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEwNikuc3RyaW5nKG1lc3NhZ2Uucm9vbU5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnN0YXR1cyAhPT0gdW5kZWZpbmVkICYmIG1lc3NhZ2Uuc3RhdHVzICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDI0KS5pbnQzMihtZXNzYWdlLnN0YXR1cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2Uuc3RhcnRlZEF0ICE9PSB1bmRlZmluZWQgJiYgbWVzc2FnZS5zdGFydGVkQXQgIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoODApLmludDY0KG1lc3NhZ2Uuc3RhcnRlZEF0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5lbmRlZEF0ICE9PSB1bmRlZmluZWQgJiYgbWVzc2FnZS5lbmRlZEF0ICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDg4KS5pbnQ2NChtZXNzYWdlLmVuZGVkQXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnVwZGF0ZWRBdCAhPT0gdW5kZWZpbmVkICYmIG1lc3NhZ2UudXBkYXRlZEF0ICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDE0NCkuaW50NjQobWVzc2FnZS51cGRhdGVkQXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmVycm9yICE9PSB1bmRlZmluZWQgJiYgbWVzc2FnZS5lcnJvciAhPT0gXCJcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig3NCkuc3RyaW5nKG1lc3NhZ2UuZXJyb3IpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnJvb21Db21wb3NpdGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZXhwb3J0cy5Sb29tQ29tcG9zaXRlRWdyZXNzUmVxdWVzdC5lbmNvZGUobWVzc2FnZS5yb29tQ29tcG9zaXRlLCB3cml0ZXIudWludDMyKDM0KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLndlYiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBleHBvcnRzLldlYkVncmVzc1JlcXVlc3QuZW5jb2RlKG1lc3NhZ2Uud2ViLCB3cml0ZXIudWludDMyKDExNCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5wYXJ0aWNpcGFudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBleHBvcnRzLlBhcnRpY2lwYW50RWdyZXNzUmVxdWVzdC5lbmNvZGUobWVzc2FnZS5wYXJ0aWNpcGFudCwgd3JpdGVyLnVpbnQzMigxNTQpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UudHJhY2tDb21wb3NpdGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZXhwb3J0cy5UcmFja0NvbXBvc2l0ZUVncmVzc1JlcXVlc3QuZW5jb2RlKG1lc3NhZ2UudHJhY2tDb21wb3NpdGUsIHdyaXRlci51aW50MzIoNDIpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UudHJhY2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZXhwb3J0cy5UcmFja0VncmVzc1JlcXVlc3QuZW5jb2RlKG1lc3NhZ2UudHJhY2ssIHdyaXRlci51aW50MzIoNTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2Uuc3RyZWFtICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGV4cG9ydHMuU3RyZWFtSW5mb0xpc3QuZW5jb2RlKG1lc3NhZ2Uuc3RyZWFtLCB3cml0ZXIudWludDMyKDU4KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmZpbGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZXhwb3J0cy5GaWxlSW5mby5lbmNvZGUobWVzc2FnZS5maWxlLCB3cml0ZXIudWludDMyKDY2KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnNlZ21lbnRzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGV4cG9ydHMuU2VnbWVudHNJbmZvLmVuY29kZShtZXNzYWdlLnNlZ21lbnRzLCB3cml0ZXIudWludDMyKDk4KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnN0cmVhbVJlc3VsdHMgIT09IHVuZGVmaW5lZCAmJiBtZXNzYWdlLnN0cmVhbVJlc3VsdHMubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHYgb2YgbWVzc2FnZS5zdHJlYW1SZXN1bHRzKSB7XG4gICAgICAgICAgICAgICAgZXhwb3J0cy5TdHJlYW1JbmZvLmVuY29kZSh2LCB3cml0ZXIudWludDMyKDEyMikuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5maWxlUmVzdWx0cyAhPT0gdW5kZWZpbmVkICYmIG1lc3NhZ2UuZmlsZVJlc3VsdHMubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHYgb2YgbWVzc2FnZS5maWxlUmVzdWx0cykge1xuICAgICAgICAgICAgICAgIGV4cG9ydHMuRmlsZUluZm8uZW5jb2RlKHYsIHdyaXRlci51aW50MzIoMTMwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnNlZ21lbnRSZXN1bHRzICE9PSB1bmRlZmluZWQgJiYgbWVzc2FnZS5zZWdtZW50UmVzdWx0cy5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgdiBvZiBtZXNzYWdlLnNlZ21lbnRSZXN1bHRzKSB7XG4gICAgICAgICAgICAgICAgZXhwb3J0cy5TZWdtZW50c0luZm8uZW5jb2RlKHYsIHdyaXRlci51aW50MzIoMTM4KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmltYWdlUmVzdWx0cyAhPT0gdW5kZWZpbmVkICYmIG1lc3NhZ2UuaW1hZ2VSZXN1bHRzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCB2IG9mIG1lc3NhZ2UuaW1hZ2VSZXN1bHRzKSB7XG4gICAgICAgICAgICAgICAgZXhwb3J0cy5JbWFnZXNJbmZvLmVuY29kZSh2LCB3cml0ZXIudWludDMyKDE2MikuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBtaW5pbWFsXzEuZGVmYXVsdC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBtaW5pbWFsXzEuZGVmYXVsdC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VFZ3Jlc3NJbmZvKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5lZ3Jlc3NJZCA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnJvb21JZCA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5yb29tTmFtZSA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnN0YXR1cyA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnN0YXJ0ZWRBdCA9IGxvbmdUb051bWJlcihyZWFkZXIuaW50NjQoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZW5kZWRBdCA9IGxvbmdUb051bWJlcihyZWFkZXIuaW50NjQoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTg6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudXBkYXRlZEF0ID0gbG9uZ1RvTnVtYmVyKHJlYWRlci5pbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmVycm9yID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uucm9vbUNvbXBvc2l0ZSA9IGV4cG9ydHMuUm9vbUNvbXBvc2l0ZUVncmVzc1JlcXVlc3QuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxNDpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS53ZWIgPSBleHBvcnRzLldlYkVncmVzc1JlcXVlc3QuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxOTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5wYXJ0aWNpcGFudCA9IGV4cG9ydHMuUGFydGljaXBhbnRFZ3Jlc3NSZXF1ZXN0LmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS50cmFja0NvbXBvc2l0ZSA9IGV4cG9ydHMuVHJhY2tDb21wb3NpdGVFZ3Jlc3NSZXF1ZXN0LmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS50cmFjayA9IGV4cG9ydHMuVHJhY2tFZ3Jlc3NSZXF1ZXN0LmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5zdHJlYW0gPSBleHBvcnRzLlN0cmVhbUluZm9MaXN0LmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5maWxlID0gZXhwb3J0cy5GaWxlSW5mby5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDEyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnNlZ21lbnRzID0gZXhwb3J0cy5TZWdtZW50c0luZm8uZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxNTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5zdHJlYW1SZXN1bHRzLnB1c2goZXhwb3J0cy5TdHJlYW1JbmZvLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDE2OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmZpbGVSZXN1bHRzLnB1c2goZXhwb3J0cy5GaWxlSW5mby5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxNzpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5zZWdtZW50UmVzdWx0cy5wdXNoKGV4cG9ydHMuU2VnbWVudHNJbmZvLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDIwOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmltYWdlUmVzdWx0cy5wdXNoKGV4cG9ydHMuSW1hZ2VzSW5mby5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZWdyZXNzSWQ6IGlzU2V0KG9iamVjdC5lZ3Jlc3NJZCkgPyBTdHJpbmcob2JqZWN0LmVncmVzc0lkKSA6IFwiXCIsXG4gICAgICAgICAgICByb29tSWQ6IGlzU2V0KG9iamVjdC5yb29tSWQpID8gU3RyaW5nKG9iamVjdC5yb29tSWQpIDogXCJcIixcbiAgICAgICAgICAgIHJvb21OYW1lOiBpc1NldChvYmplY3Qucm9vbU5hbWUpID8gU3RyaW5nKG9iamVjdC5yb29tTmFtZSkgOiBcIlwiLFxuICAgICAgICAgICAgc3RhdHVzOiBpc1NldChvYmplY3Quc3RhdHVzKSA/IGVncmVzc1N0YXR1c0Zyb21KU09OKG9iamVjdC5zdGF0dXMpIDogMCxcbiAgICAgICAgICAgIHN0YXJ0ZWRBdDogaXNTZXQob2JqZWN0LnN0YXJ0ZWRBdCkgPyBOdW1iZXIob2JqZWN0LnN0YXJ0ZWRBdCkgOiAwLFxuICAgICAgICAgICAgZW5kZWRBdDogaXNTZXQob2JqZWN0LmVuZGVkQXQpID8gTnVtYmVyKG9iamVjdC5lbmRlZEF0KSA6IDAsXG4gICAgICAgICAgICB1cGRhdGVkQXQ6IGlzU2V0KG9iamVjdC51cGRhdGVkQXQpID8gTnVtYmVyKG9iamVjdC51cGRhdGVkQXQpIDogMCxcbiAgICAgICAgICAgIGVycm9yOiBpc1NldChvYmplY3QuZXJyb3IpID8gU3RyaW5nKG9iamVjdC5lcnJvcikgOiBcIlwiLFxuICAgICAgICAgICAgcm9vbUNvbXBvc2l0ZTogaXNTZXQob2JqZWN0LnJvb21Db21wb3NpdGUpXG4gICAgICAgICAgICAgICAgPyBleHBvcnRzLlJvb21Db21wb3NpdGVFZ3Jlc3NSZXF1ZXN0LmZyb21KU09OKG9iamVjdC5yb29tQ29tcG9zaXRlKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgd2ViOiBpc1NldChvYmplY3Qud2ViKSA/IGV4cG9ydHMuV2ViRWdyZXNzUmVxdWVzdC5mcm9tSlNPTihvYmplY3Qud2ViKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHBhcnRpY2lwYW50OiBpc1NldChvYmplY3QucGFydGljaXBhbnQpID8gZXhwb3J0cy5QYXJ0aWNpcGFudEVncmVzc1JlcXVlc3QuZnJvbUpTT04ob2JqZWN0LnBhcnRpY2lwYW50KSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHRyYWNrQ29tcG9zaXRlOiBpc1NldChvYmplY3QudHJhY2tDb21wb3NpdGUpXG4gICAgICAgICAgICAgICAgPyBleHBvcnRzLlRyYWNrQ29tcG9zaXRlRWdyZXNzUmVxdWVzdC5mcm9tSlNPTihvYmplY3QudHJhY2tDb21wb3NpdGUpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB0cmFjazogaXNTZXQob2JqZWN0LnRyYWNrKSA/IGV4cG9ydHMuVHJhY2tFZ3Jlc3NSZXF1ZXN0LmZyb21KU09OKG9iamVjdC50cmFjaykgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBzdHJlYW06IGlzU2V0KG9iamVjdC5zdHJlYW0pID8gZXhwb3J0cy5TdHJlYW1JbmZvTGlzdC5mcm9tSlNPTihvYmplY3Quc3RyZWFtKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGZpbGU6IGlzU2V0KG9iamVjdC5maWxlKSA/IGV4cG9ydHMuRmlsZUluZm8uZnJvbUpTT04ob2JqZWN0LmZpbGUpIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgc2VnbWVudHM6IGlzU2V0KG9iamVjdC5zZWdtZW50cykgPyBleHBvcnRzLlNlZ21lbnRzSW5mby5mcm9tSlNPTihvYmplY3Quc2VnbWVudHMpIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgc3RyZWFtUmVzdWx0czogQXJyYXkuaXNBcnJheShvYmplY3QgPT09IG51bGwgfHwgb2JqZWN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvYmplY3Quc3RyZWFtUmVzdWx0cylcbiAgICAgICAgICAgICAgICA/IG9iamVjdC5zdHJlYW1SZXN1bHRzLm1hcCgoZSkgPT4gZXhwb3J0cy5TdHJlYW1JbmZvLmZyb21KU09OKGUpKVxuICAgICAgICAgICAgICAgIDogW10sXG4gICAgICAgICAgICBmaWxlUmVzdWx0czogQXJyYXkuaXNBcnJheShvYmplY3QgPT09IG51bGwgfHwgb2JqZWN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvYmplY3QuZmlsZVJlc3VsdHMpID8gb2JqZWN0LmZpbGVSZXN1bHRzLm1hcCgoZSkgPT4gZXhwb3J0cy5GaWxlSW5mby5mcm9tSlNPTihlKSkgOiBbXSxcbiAgICAgICAgICAgIHNlZ21lbnRSZXN1bHRzOiBBcnJheS5pc0FycmF5KG9iamVjdCA9PT0gbnVsbCB8fCBvYmplY3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9iamVjdC5zZWdtZW50UmVzdWx0cylcbiAgICAgICAgICAgICAgICA/IG9iamVjdC5zZWdtZW50UmVzdWx0cy5tYXAoKGUpID0+IGV4cG9ydHMuU2VnbWVudHNJbmZvLmZyb21KU09OKGUpKVxuICAgICAgICAgICAgICAgIDogW10sXG4gICAgICAgICAgICBpbWFnZVJlc3VsdHM6IEFycmF5LmlzQXJyYXkob2JqZWN0ID09PSBudWxsIHx8IG9iamVjdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb2JqZWN0LmltYWdlUmVzdWx0cylcbiAgICAgICAgICAgICAgICA/IG9iamVjdC5pbWFnZVJlc3VsdHMubWFwKChlKSA9PiBleHBvcnRzLkltYWdlc0luZm8uZnJvbUpTT04oZSkpXG4gICAgICAgICAgICAgICAgOiBbXSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLmVncmVzc0lkICE9PSB1bmRlZmluZWQgJiYgKG9iai5lZ3Jlc3NJZCA9IG1lc3NhZ2UuZWdyZXNzSWQpO1xuICAgICAgICBtZXNzYWdlLnJvb21JZCAhPT0gdW5kZWZpbmVkICYmIChvYmoucm9vbUlkID0gbWVzc2FnZS5yb29tSWQpO1xuICAgICAgICBtZXNzYWdlLnJvb21OYW1lICE9PSB1bmRlZmluZWQgJiYgKG9iai5yb29tTmFtZSA9IG1lc3NhZ2Uucm9vbU5hbWUpO1xuICAgICAgICBtZXNzYWdlLnN0YXR1cyAhPT0gdW5kZWZpbmVkICYmIChvYmouc3RhdHVzID0gZWdyZXNzU3RhdHVzVG9KU09OKG1lc3NhZ2Uuc3RhdHVzKSk7XG4gICAgICAgIG1lc3NhZ2Uuc3RhcnRlZEF0ICE9PSB1bmRlZmluZWQgJiYgKG9iai5zdGFydGVkQXQgPSBNYXRoLnJvdW5kKG1lc3NhZ2Uuc3RhcnRlZEF0KSk7XG4gICAgICAgIG1lc3NhZ2UuZW5kZWRBdCAhPT0gdW5kZWZpbmVkICYmIChvYmouZW5kZWRBdCA9IE1hdGgucm91bmQobWVzc2FnZS5lbmRlZEF0KSk7XG4gICAgICAgIG1lc3NhZ2UudXBkYXRlZEF0ICE9PSB1bmRlZmluZWQgJiYgKG9iai51cGRhdGVkQXQgPSBNYXRoLnJvdW5kKG1lc3NhZ2UudXBkYXRlZEF0KSk7XG4gICAgICAgIG1lc3NhZ2UuZXJyb3IgIT09IHVuZGVmaW5lZCAmJiAob2JqLmVycm9yID0gbWVzc2FnZS5lcnJvcik7XG4gICAgICAgIG1lc3NhZ2Uucm9vbUNvbXBvc2l0ZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLnJvb21Db21wb3NpdGUgPSBtZXNzYWdlLnJvb21Db21wb3NpdGVcbiAgICAgICAgICAgICAgICA/IGV4cG9ydHMuUm9vbUNvbXBvc2l0ZUVncmVzc1JlcXVlc3QudG9KU09OKG1lc3NhZ2Uucm9vbUNvbXBvc2l0ZSlcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCk7XG4gICAgICAgIG1lc3NhZ2Uud2ViICE9PSB1bmRlZmluZWQgJiYgKG9iai53ZWIgPSBtZXNzYWdlLndlYiA/IGV4cG9ydHMuV2ViRWdyZXNzUmVxdWVzdC50b0pTT04obWVzc2FnZS53ZWIpIDogdW5kZWZpbmVkKTtcbiAgICAgICAgbWVzc2FnZS5wYXJ0aWNpcGFudCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLnBhcnRpY2lwYW50ID0gbWVzc2FnZS5wYXJ0aWNpcGFudCA/IGV4cG9ydHMuUGFydGljaXBhbnRFZ3Jlc3NSZXF1ZXN0LnRvSlNPTihtZXNzYWdlLnBhcnRpY2lwYW50KSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIG1lc3NhZ2UudHJhY2tDb21wb3NpdGUgIT09IHVuZGVmaW5lZCAmJiAob2JqLnRyYWNrQ29tcG9zaXRlID0gbWVzc2FnZS50cmFja0NvbXBvc2l0ZVxuICAgICAgICAgICAgPyBleHBvcnRzLlRyYWNrQ29tcG9zaXRlRWdyZXNzUmVxdWVzdC50b0pTT04obWVzc2FnZS50cmFja0NvbXBvc2l0ZSlcbiAgICAgICAgICAgIDogdW5kZWZpbmVkKTtcbiAgICAgICAgbWVzc2FnZS50cmFjayAhPT0gdW5kZWZpbmVkICYmIChvYmoudHJhY2sgPSBtZXNzYWdlLnRyYWNrID8gZXhwb3J0cy5UcmFja0VncmVzc1JlcXVlc3QudG9KU09OKG1lc3NhZ2UudHJhY2spIDogdW5kZWZpbmVkKTtcbiAgICAgICAgbWVzc2FnZS5zdHJlYW0gIT09IHVuZGVmaW5lZCAmJiAob2JqLnN0cmVhbSA9IG1lc3NhZ2Uuc3RyZWFtID8gZXhwb3J0cy5TdHJlYW1JbmZvTGlzdC50b0pTT04obWVzc2FnZS5zdHJlYW0pIDogdW5kZWZpbmVkKTtcbiAgICAgICAgbWVzc2FnZS5maWxlICE9PSB1bmRlZmluZWQgJiYgKG9iai5maWxlID0gbWVzc2FnZS5maWxlID8gZXhwb3J0cy5GaWxlSW5mby50b0pTT04obWVzc2FnZS5maWxlKSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIG1lc3NhZ2Uuc2VnbWVudHMgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5zZWdtZW50cyA9IG1lc3NhZ2Uuc2VnbWVudHMgPyBleHBvcnRzLlNlZ21lbnRzSW5mby50b0pTT04obWVzc2FnZS5zZWdtZW50cykgOiB1bmRlZmluZWQpO1xuICAgICAgICBpZiAobWVzc2FnZS5zdHJlYW1SZXN1bHRzKSB7XG4gICAgICAgICAgICBvYmouc3RyZWFtUmVzdWx0cyA9IG1lc3NhZ2Uuc3RyZWFtUmVzdWx0cy5tYXAoKGUpID0+IGUgPyBleHBvcnRzLlN0cmVhbUluZm8udG9KU09OKGUpIDogdW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9iai5zdHJlYW1SZXN1bHRzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuZmlsZVJlc3VsdHMpIHtcbiAgICAgICAgICAgIG9iai5maWxlUmVzdWx0cyA9IG1lc3NhZ2UuZmlsZVJlc3VsdHMubWFwKChlKSA9PiBlID8gZXhwb3J0cy5GaWxlSW5mby50b0pTT04oZSkgOiB1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb2JqLmZpbGVSZXN1bHRzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2Uuc2VnbWVudFJlc3VsdHMpIHtcbiAgICAgICAgICAgIG9iai5zZWdtZW50UmVzdWx0cyA9IG1lc3NhZ2Uuc2VnbWVudFJlc3VsdHMubWFwKChlKSA9PiBlID8gZXhwb3J0cy5TZWdtZW50c0luZm8udG9KU09OKGUpIDogdW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9iai5zZWdtZW50UmVzdWx0cyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmltYWdlUmVzdWx0cykge1xuICAgICAgICAgICAgb2JqLmltYWdlUmVzdWx0cyA9IG1lc3NhZ2UuaW1hZ2VSZXN1bHRzLm1hcCgoZSkgPT4gZSA/IGV4cG9ydHMuSW1hZ2VzSW5mby50b0pTT04oZSkgOiB1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb2JqLmltYWdlUmVzdWx0cyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2YsIF9nLCBfaCwgX2osIF9rLCBfbCwgX207XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlRWdyZXNzSW5mbygpO1xuICAgICAgICBtZXNzYWdlLmVncmVzc0lkID0gKF9hID0gb2JqZWN0LmVncmVzc0lkKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBcIlwiO1xuICAgICAgICBtZXNzYWdlLnJvb21JZCA9IChfYiA9IG9iamVjdC5yb29tSWQpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IFwiXCI7XG4gICAgICAgIG1lc3NhZ2Uucm9vbU5hbWUgPSAoX2MgPSBvYmplY3Qucm9vbU5hbWUpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IFwiXCI7XG4gICAgICAgIG1lc3NhZ2Uuc3RhdHVzID0gKF9kID0gb2JqZWN0LnN0YXR1cykgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogMDtcbiAgICAgICAgbWVzc2FnZS5zdGFydGVkQXQgPSAoX2UgPSBvYmplY3Quc3RhcnRlZEF0KSAhPT0gbnVsbCAmJiBfZSAhPT0gdm9pZCAwID8gX2UgOiAwO1xuICAgICAgICBtZXNzYWdlLmVuZGVkQXQgPSAoX2YgPSBvYmplY3QuZW5kZWRBdCkgIT09IG51bGwgJiYgX2YgIT09IHZvaWQgMCA/IF9mIDogMDtcbiAgICAgICAgbWVzc2FnZS51cGRhdGVkQXQgPSAoX2cgPSBvYmplY3QudXBkYXRlZEF0KSAhPT0gbnVsbCAmJiBfZyAhPT0gdm9pZCAwID8gX2cgOiAwO1xuICAgICAgICBtZXNzYWdlLmVycm9yID0gKF9oID0gb2JqZWN0LmVycm9yKSAhPT0gbnVsbCAmJiBfaCAhPT0gdm9pZCAwID8gX2ggOiBcIlwiO1xuICAgICAgICBtZXNzYWdlLnJvb21Db21wb3NpdGUgPSAob2JqZWN0LnJvb21Db21wb3NpdGUgIT09IHVuZGVmaW5lZCAmJiBvYmplY3Qucm9vbUNvbXBvc2l0ZSAhPT0gbnVsbClcbiAgICAgICAgICAgID8gZXhwb3J0cy5Sb29tQ29tcG9zaXRlRWdyZXNzUmVxdWVzdC5mcm9tUGFydGlhbChvYmplY3Qucm9vbUNvbXBvc2l0ZSlcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICBtZXNzYWdlLndlYiA9IChvYmplY3Qud2ViICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0LndlYiAhPT0gbnVsbClcbiAgICAgICAgICAgID8gZXhwb3J0cy5XZWJFZ3Jlc3NSZXF1ZXN0LmZyb21QYXJ0aWFsKG9iamVjdC53ZWIpXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgbWVzc2FnZS5wYXJ0aWNpcGFudCA9IChvYmplY3QucGFydGljaXBhbnQgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QucGFydGljaXBhbnQgIT09IG51bGwpXG4gICAgICAgICAgICA/IGV4cG9ydHMuUGFydGljaXBhbnRFZ3Jlc3NSZXF1ZXN0LmZyb21QYXJ0aWFsKG9iamVjdC5wYXJ0aWNpcGFudClcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICBtZXNzYWdlLnRyYWNrQ29tcG9zaXRlID0gKG9iamVjdC50cmFja0NvbXBvc2l0ZSAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC50cmFja0NvbXBvc2l0ZSAhPT0gbnVsbClcbiAgICAgICAgICAgID8gZXhwb3J0cy5UcmFja0NvbXBvc2l0ZUVncmVzc1JlcXVlc3QuZnJvbVBhcnRpYWwob2JqZWN0LnRyYWNrQ29tcG9zaXRlKVxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIG1lc3NhZ2UudHJhY2sgPSAob2JqZWN0LnRyYWNrICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0LnRyYWNrICE9PSBudWxsKVxuICAgICAgICAgICAgPyBleHBvcnRzLlRyYWNrRWdyZXNzUmVxdWVzdC5mcm9tUGFydGlhbChvYmplY3QudHJhY2spXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgbWVzc2FnZS5zdHJlYW0gPSAob2JqZWN0LnN0cmVhbSAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5zdHJlYW0gIT09IG51bGwpXG4gICAgICAgICAgICA/IGV4cG9ydHMuU3RyZWFtSW5mb0xpc3QuZnJvbVBhcnRpYWwob2JqZWN0LnN0cmVhbSlcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICBtZXNzYWdlLmZpbGUgPSAob2JqZWN0LmZpbGUgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QuZmlsZSAhPT0gbnVsbCkgPyBleHBvcnRzLkZpbGVJbmZvLmZyb21QYXJ0aWFsKG9iamVjdC5maWxlKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgbWVzc2FnZS5zZWdtZW50cyA9IChvYmplY3Quc2VnbWVudHMgIT09IHVuZGVmaW5lZCAmJiBvYmplY3Quc2VnbWVudHMgIT09IG51bGwpXG4gICAgICAgICAgICA/IGV4cG9ydHMuU2VnbWVudHNJbmZvLmZyb21QYXJ0aWFsKG9iamVjdC5zZWdtZW50cylcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICBtZXNzYWdlLnN0cmVhbVJlc3VsdHMgPSAoKF9qID0gb2JqZWN0LnN0cmVhbVJlc3VsdHMpID09PSBudWxsIHx8IF9qID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfai5tYXAoKGUpID0+IGV4cG9ydHMuU3RyZWFtSW5mby5mcm9tUGFydGlhbChlKSkpIHx8IFtdO1xuICAgICAgICBtZXNzYWdlLmZpbGVSZXN1bHRzID0gKChfayA9IG9iamVjdC5maWxlUmVzdWx0cykgPT09IG51bGwgfHwgX2sgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9rLm1hcCgoZSkgPT4gZXhwb3J0cy5GaWxlSW5mby5mcm9tUGFydGlhbChlKSkpIHx8IFtdO1xuICAgICAgICBtZXNzYWdlLnNlZ21lbnRSZXN1bHRzID0gKChfbCA9IG9iamVjdC5zZWdtZW50UmVzdWx0cykgPT09IG51bGwgfHwgX2wgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9sLm1hcCgoZSkgPT4gZXhwb3J0cy5TZWdtZW50c0luZm8uZnJvbVBhcnRpYWwoZSkpKSB8fCBbXTtcbiAgICAgICAgbWVzc2FnZS5pbWFnZVJlc3VsdHMgPSAoKF9tID0gb2JqZWN0LmltYWdlUmVzdWx0cykgPT09IG51bGwgfHwgX20gPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9tLm1hcCgoZSkgPT4gZXhwb3J0cy5JbWFnZXNJbmZvLmZyb21QYXJ0aWFsKGUpKSkgfHwgW107XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZVN0cmVhbUluZm9MaXN0KCkge1xuICAgIHJldHVybiB7IGluZm86IFtdIH07XG59XG5leHBvcnRzLlN0cmVhbUluZm9MaXN0ID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBtaW5pbWFsXzEuZGVmYXVsdC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UuaW5mbyAhPT0gdW5kZWZpbmVkICYmIG1lc3NhZ2UuaW5mby5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgdiBvZiBtZXNzYWdlLmluZm8pIHtcbiAgICAgICAgICAgICAgICBleHBvcnRzLlN0cmVhbUluZm8uZW5jb2RlKHYsIHdyaXRlci51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgbWluaW1hbF8xLmRlZmF1bHQuUmVhZGVyID8gaW5wdXQgOiBuZXcgbWluaW1hbF8xLmRlZmF1bHQuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlU3RyZWFtSW5mb0xpc3QoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmluZm8ucHVzaChleHBvcnRzLlN0cmVhbUluZm8uZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHsgaW5mbzogQXJyYXkuaXNBcnJheShvYmplY3QgPT09IG51bGwgfHwgb2JqZWN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvYmplY3QuaW5mbykgPyBvYmplY3QuaW5mby5tYXAoKGUpID0+IGV4cG9ydHMuU3RyZWFtSW5mby5mcm9tSlNPTihlKSkgOiBbXSB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIGlmIChtZXNzYWdlLmluZm8pIHtcbiAgICAgICAgICAgIG9iai5pbmZvID0gbWVzc2FnZS5pbmZvLm1hcCgoZSkgPT4gZSA/IGV4cG9ydHMuU3RyZWFtSW5mby50b0pTT04oZSkgOiB1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb2JqLmluZm8gPSBbXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VTdHJlYW1JbmZvTGlzdCgpO1xuICAgICAgICBtZXNzYWdlLmluZm8gPSAoKF9hID0gb2JqZWN0LmluZm8pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5tYXAoKGUpID0+IGV4cG9ydHMuU3RyZWFtSW5mby5mcm9tUGFydGlhbChlKSkpIHx8IFtdO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VTdHJlYW1JbmZvKCkge1xuICAgIHJldHVybiB7IHVybDogXCJcIiwgc3RhcnRlZEF0OiAwLCBlbmRlZEF0OiAwLCBkdXJhdGlvbjogMCwgc3RhdHVzOiAwLCBlcnJvcjogXCJcIiB9O1xufVxuZXhwb3J0cy5TdHJlYW1JbmZvID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBtaW5pbWFsXzEuZGVmYXVsdC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UudXJsICE9PSB1bmRlZmluZWQgJiYgbWVzc2FnZS51cmwgIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTApLnN0cmluZyhtZXNzYWdlLnVybCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2Uuc3RhcnRlZEF0ICE9PSB1bmRlZmluZWQgJiYgbWVzc2FnZS5zdGFydGVkQXQgIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTYpLmludDY0KG1lc3NhZ2Uuc3RhcnRlZEF0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5lbmRlZEF0ICE9PSB1bmRlZmluZWQgJiYgbWVzc2FnZS5lbmRlZEF0ICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDI0KS5pbnQ2NChtZXNzYWdlLmVuZGVkQXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmR1cmF0aW9uICE9PSB1bmRlZmluZWQgJiYgbWVzc2FnZS5kdXJhdGlvbiAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigzMikuaW50NjQobWVzc2FnZS5kdXJhdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2Uuc3RhdHVzICE9PSB1bmRlZmluZWQgJiYgbWVzc2FnZS5zdGF0dXMgIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoNDApLmludDMyKG1lc3NhZ2Uuc3RhdHVzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5lcnJvciAhPT0gdW5kZWZpbmVkICYmIG1lc3NhZ2UuZXJyb3IgIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoNTApLnN0cmluZyhtZXNzYWdlLmVycm9yKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBtaW5pbWFsXzEuZGVmYXVsdC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBtaW5pbWFsXzEuZGVmYXVsdC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VTdHJlYW1JbmZvKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS51cmwgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5zdGFydGVkQXQgPSBsb25nVG9OdW1iZXIocmVhZGVyLmludDY0KCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZW5kZWRBdCA9IGxvbmdUb051bWJlcihyZWFkZXIuaW50NjQoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5kdXJhdGlvbiA9IGxvbmdUb051bWJlcihyZWFkZXIuaW50NjQoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5zdGF0dXMgPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmVycm9yID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB1cmw6IGlzU2V0KG9iamVjdC51cmwpID8gU3RyaW5nKG9iamVjdC51cmwpIDogXCJcIixcbiAgICAgICAgICAgIHN0YXJ0ZWRBdDogaXNTZXQob2JqZWN0LnN0YXJ0ZWRBdCkgPyBOdW1iZXIob2JqZWN0LnN0YXJ0ZWRBdCkgOiAwLFxuICAgICAgICAgICAgZW5kZWRBdDogaXNTZXQob2JqZWN0LmVuZGVkQXQpID8gTnVtYmVyKG9iamVjdC5lbmRlZEF0KSA6IDAsXG4gICAgICAgICAgICBkdXJhdGlvbjogaXNTZXQob2JqZWN0LmR1cmF0aW9uKSA/IE51bWJlcihvYmplY3QuZHVyYXRpb24pIDogMCxcbiAgICAgICAgICAgIHN0YXR1czogaXNTZXQob2JqZWN0LnN0YXR1cykgPyBzdHJlYW1JbmZvX1N0YXR1c0Zyb21KU09OKG9iamVjdC5zdGF0dXMpIDogMCxcbiAgICAgICAgICAgIGVycm9yOiBpc1NldChvYmplY3QuZXJyb3IpID8gU3RyaW5nKG9iamVjdC5lcnJvcikgOiBcIlwiLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2UudXJsICE9PSB1bmRlZmluZWQgJiYgKG9iai51cmwgPSBtZXNzYWdlLnVybCk7XG4gICAgICAgIG1lc3NhZ2Uuc3RhcnRlZEF0ICE9PSB1bmRlZmluZWQgJiYgKG9iai5zdGFydGVkQXQgPSBNYXRoLnJvdW5kKG1lc3NhZ2Uuc3RhcnRlZEF0KSk7XG4gICAgICAgIG1lc3NhZ2UuZW5kZWRBdCAhPT0gdW5kZWZpbmVkICYmIChvYmouZW5kZWRBdCA9IE1hdGgucm91bmQobWVzc2FnZS5lbmRlZEF0KSk7XG4gICAgICAgIG1lc3NhZ2UuZHVyYXRpb24gIT09IHVuZGVmaW5lZCAmJiAob2JqLmR1cmF0aW9uID0gTWF0aC5yb3VuZChtZXNzYWdlLmR1cmF0aW9uKSk7XG4gICAgICAgIG1lc3NhZ2Uuc3RhdHVzICE9PSB1bmRlZmluZWQgJiYgKG9iai5zdGF0dXMgPSBzdHJlYW1JbmZvX1N0YXR1c1RvSlNPTihtZXNzYWdlLnN0YXR1cykpO1xuICAgICAgICBtZXNzYWdlLmVycm9yICE9PSB1bmRlZmluZWQgJiYgKG9iai5lcnJvciA9IG1lc3NhZ2UuZXJyb3IpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVN0cmVhbUluZm8oKTtcbiAgICAgICAgbWVzc2FnZS51cmwgPSAoX2EgPSBvYmplY3QudXJsKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBcIlwiO1xuICAgICAgICBtZXNzYWdlLnN0YXJ0ZWRBdCA9IChfYiA9IG9iamVjdC5zdGFydGVkQXQpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IDA7XG4gICAgICAgIG1lc3NhZ2UuZW5kZWRBdCA9IChfYyA9IG9iamVjdC5lbmRlZEF0KSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiAwO1xuICAgICAgICBtZXNzYWdlLmR1cmF0aW9uID0gKF9kID0gb2JqZWN0LmR1cmF0aW9uKSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiAwO1xuICAgICAgICBtZXNzYWdlLnN0YXR1cyA9IChfZSA9IG9iamVjdC5zdGF0dXMpICE9PSBudWxsICYmIF9lICE9PSB2b2lkIDAgPyBfZSA6IDA7XG4gICAgICAgIG1lc3NhZ2UuZXJyb3IgPSAoX2YgPSBvYmplY3QuZXJyb3IpICE9PSBudWxsICYmIF9mICE9PSB2b2lkIDAgPyBfZiA6IFwiXCI7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZUZpbGVJbmZvKCkge1xuICAgIHJldHVybiB7IGZpbGVuYW1lOiBcIlwiLCBzdGFydGVkQXQ6IDAsIGVuZGVkQXQ6IDAsIGR1cmF0aW9uOiAwLCBzaXplOiAwLCBsb2NhdGlvbjogXCJcIiB9O1xufVxuZXhwb3J0cy5GaWxlSW5mbyA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gbWluaW1hbF8xLmRlZmF1bHQuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLmZpbGVuYW1lICE9PSB1bmRlZmluZWQgJiYgbWVzc2FnZS5maWxlbmFtZSAhPT0gXCJcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxMCkuc3RyaW5nKG1lc3NhZ2UuZmlsZW5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnN0YXJ0ZWRBdCAhPT0gdW5kZWZpbmVkICYmIG1lc3NhZ2Uuc3RhcnRlZEF0ICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDE2KS5pbnQ2NChtZXNzYWdlLnN0YXJ0ZWRBdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuZW5kZWRBdCAhPT0gdW5kZWZpbmVkICYmIG1lc3NhZ2UuZW5kZWRBdCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigyNCkuaW50NjQobWVzc2FnZS5lbmRlZEF0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5kdXJhdGlvbiAhPT0gdW5kZWZpbmVkICYmIG1lc3NhZ2UuZHVyYXRpb24gIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoNDgpLmludDY0KG1lc3NhZ2UuZHVyYXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnNpemUgIT09IHVuZGVmaW5lZCAmJiBtZXNzYWdlLnNpemUgIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMzIpLmludDY0KG1lc3NhZ2Uuc2l6ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UubG9jYXRpb24gIT09IHVuZGVmaW5lZCAmJiBtZXNzYWdlLmxvY2F0aW9uICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDQyKS5zdHJpbmcobWVzc2FnZS5sb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgbWluaW1hbF8xLmRlZmF1bHQuUmVhZGVyID8gaW5wdXQgOiBuZXcgbWluaW1hbF8xLmRlZmF1bHQuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlRmlsZUluZm8oKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmZpbGVuYW1lID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc3RhcnRlZEF0ID0gbG9uZ1RvTnVtYmVyKHJlYWRlci5pbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmVuZGVkQXQgPSBsb25nVG9OdW1iZXIocmVhZGVyLmludDY0KCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZHVyYXRpb24gPSBsb25nVG9OdW1iZXIocmVhZGVyLmludDY0KCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc2l6ZSA9IGxvbmdUb051bWJlcihyZWFkZXIuaW50NjQoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5sb2NhdGlvbiA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZmlsZW5hbWU6IGlzU2V0KG9iamVjdC5maWxlbmFtZSkgPyBTdHJpbmcob2JqZWN0LmZpbGVuYW1lKSA6IFwiXCIsXG4gICAgICAgICAgICBzdGFydGVkQXQ6IGlzU2V0KG9iamVjdC5zdGFydGVkQXQpID8gTnVtYmVyKG9iamVjdC5zdGFydGVkQXQpIDogMCxcbiAgICAgICAgICAgIGVuZGVkQXQ6IGlzU2V0KG9iamVjdC5lbmRlZEF0KSA/IE51bWJlcihvYmplY3QuZW5kZWRBdCkgOiAwLFxuICAgICAgICAgICAgZHVyYXRpb246IGlzU2V0KG9iamVjdC5kdXJhdGlvbikgPyBOdW1iZXIob2JqZWN0LmR1cmF0aW9uKSA6IDAsXG4gICAgICAgICAgICBzaXplOiBpc1NldChvYmplY3Quc2l6ZSkgPyBOdW1iZXIob2JqZWN0LnNpemUpIDogMCxcbiAgICAgICAgICAgIGxvY2F0aW9uOiBpc1NldChvYmplY3QubG9jYXRpb24pID8gU3RyaW5nKG9iamVjdC5sb2NhdGlvbikgOiBcIlwiLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2UuZmlsZW5hbWUgIT09IHVuZGVmaW5lZCAmJiAob2JqLmZpbGVuYW1lID0gbWVzc2FnZS5maWxlbmFtZSk7XG4gICAgICAgIG1lc3NhZ2Uuc3RhcnRlZEF0ICE9PSB1bmRlZmluZWQgJiYgKG9iai5zdGFydGVkQXQgPSBNYXRoLnJvdW5kKG1lc3NhZ2Uuc3RhcnRlZEF0KSk7XG4gICAgICAgIG1lc3NhZ2UuZW5kZWRBdCAhPT0gdW5kZWZpbmVkICYmIChvYmouZW5kZWRBdCA9IE1hdGgucm91bmQobWVzc2FnZS5lbmRlZEF0KSk7XG4gICAgICAgIG1lc3NhZ2UuZHVyYXRpb24gIT09IHVuZGVmaW5lZCAmJiAob2JqLmR1cmF0aW9uID0gTWF0aC5yb3VuZChtZXNzYWdlLmR1cmF0aW9uKSk7XG4gICAgICAgIG1lc3NhZ2Uuc2l6ZSAhPT0gdW5kZWZpbmVkICYmIChvYmouc2l6ZSA9IE1hdGgucm91bmQobWVzc2FnZS5zaXplKSk7XG4gICAgICAgIG1lc3NhZ2UubG9jYXRpb24gIT09IHVuZGVmaW5lZCAmJiAob2JqLmxvY2F0aW9uID0gbWVzc2FnZS5sb2NhdGlvbik7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2Y7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlRmlsZUluZm8oKTtcbiAgICAgICAgbWVzc2FnZS5maWxlbmFtZSA9IChfYSA9IG9iamVjdC5maWxlbmFtZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogXCJcIjtcbiAgICAgICAgbWVzc2FnZS5zdGFydGVkQXQgPSAoX2IgPSBvYmplY3Quc3RhcnRlZEF0KSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAwO1xuICAgICAgICBtZXNzYWdlLmVuZGVkQXQgPSAoX2MgPSBvYmplY3QuZW5kZWRBdCkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogMDtcbiAgICAgICAgbWVzc2FnZS5kdXJhdGlvbiA9IChfZCA9IG9iamVjdC5kdXJhdGlvbikgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogMDtcbiAgICAgICAgbWVzc2FnZS5zaXplID0gKF9lID0gb2JqZWN0LnNpemUpICE9PSBudWxsICYmIF9lICE9PSB2b2lkIDAgPyBfZSA6IDA7XG4gICAgICAgIG1lc3NhZ2UubG9jYXRpb24gPSAoX2YgPSBvYmplY3QubG9jYXRpb24pICE9PSBudWxsICYmIF9mICE9PSB2b2lkIDAgPyBfZiA6IFwiXCI7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZVNlZ21lbnRzSW5mbygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBwbGF5bGlzdE5hbWU6IFwiXCIsXG4gICAgICAgIGxpdmVQbGF5bGlzdE5hbWU6IFwiXCIsXG4gICAgICAgIGR1cmF0aW9uOiAwLFxuICAgICAgICBzaXplOiAwLFxuICAgICAgICBwbGF5bGlzdExvY2F0aW9uOiBcIlwiLFxuICAgICAgICBsaXZlUGxheWxpc3RMb2NhdGlvbjogXCJcIixcbiAgICAgICAgc2VnbWVudENvdW50OiAwLFxuICAgICAgICBzdGFydGVkQXQ6IDAsXG4gICAgICAgIGVuZGVkQXQ6IDAsXG4gICAgfTtcbn1cbmV4cG9ydHMuU2VnbWVudHNJbmZvID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBtaW5pbWFsXzEuZGVmYXVsdC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UucGxheWxpc3ROYW1lICE9PSB1bmRlZmluZWQgJiYgbWVzc2FnZS5wbGF5bGlzdE5hbWUgIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTApLnN0cmluZyhtZXNzYWdlLnBsYXlsaXN0TmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UubGl2ZVBsYXlsaXN0TmFtZSAhPT0gdW5kZWZpbmVkICYmIG1lc3NhZ2UubGl2ZVBsYXlsaXN0TmFtZSAhPT0gXCJcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig2Nikuc3RyaW5nKG1lc3NhZ2UubGl2ZVBsYXlsaXN0TmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuZHVyYXRpb24gIT09IHVuZGVmaW5lZCAmJiBtZXNzYWdlLmR1cmF0aW9uICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDE2KS5pbnQ2NChtZXNzYWdlLmR1cmF0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5zaXplICE9PSB1bmRlZmluZWQgJiYgbWVzc2FnZS5zaXplICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDI0KS5pbnQ2NChtZXNzYWdlLnNpemUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnBsYXlsaXN0TG9jYXRpb24gIT09IHVuZGVmaW5lZCAmJiBtZXNzYWdlLnBsYXlsaXN0TG9jYXRpb24gIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMzQpLnN0cmluZyhtZXNzYWdlLnBsYXlsaXN0TG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmxpdmVQbGF5bGlzdExvY2F0aW9uICE9PSB1bmRlZmluZWQgJiYgbWVzc2FnZS5saXZlUGxheWxpc3RMb2NhdGlvbiAhPT0gXCJcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig3NCkuc3RyaW5nKG1lc3NhZ2UubGl2ZVBsYXlsaXN0TG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnNlZ21lbnRDb3VudCAhPT0gdW5kZWZpbmVkICYmIG1lc3NhZ2Uuc2VnbWVudENvdW50ICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDQwKS5pbnQ2NChtZXNzYWdlLnNlZ21lbnRDb3VudCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2Uuc3RhcnRlZEF0ICE9PSB1bmRlZmluZWQgJiYgbWVzc2FnZS5zdGFydGVkQXQgIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoNDgpLmludDY0KG1lc3NhZ2Uuc3RhcnRlZEF0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5lbmRlZEF0ICE9PSB1bmRlZmluZWQgJiYgbWVzc2FnZS5lbmRlZEF0ICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDU2KS5pbnQ2NChtZXNzYWdlLmVuZGVkQXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIG1pbmltYWxfMS5kZWZhdWx0LlJlYWRlciA/IGlucHV0IDogbmV3IG1pbmltYWxfMS5kZWZhdWx0LlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVNlZ21lbnRzSW5mbygpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucGxheWxpc3ROYW1lID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubGl2ZVBsYXlsaXN0TmFtZSA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmR1cmF0aW9uID0gbG9uZ1RvTnVtYmVyKHJlYWRlci5pbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnNpemUgPSBsb25nVG9OdW1iZXIocmVhZGVyLmludDY0KCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucGxheWxpc3RMb2NhdGlvbiA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmxpdmVQbGF5bGlzdExvY2F0aW9uID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc2VnbWVudENvdW50ID0gbG9uZ1RvTnVtYmVyKHJlYWRlci5pbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnN0YXJ0ZWRBdCA9IGxvbmdUb051bWJlcihyZWFkZXIuaW50NjQoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5lbmRlZEF0ID0gbG9uZ1RvTnVtYmVyKHJlYWRlci5pbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcGxheWxpc3ROYW1lOiBpc1NldChvYmplY3QucGxheWxpc3ROYW1lKSA/IFN0cmluZyhvYmplY3QucGxheWxpc3ROYW1lKSA6IFwiXCIsXG4gICAgICAgICAgICBsaXZlUGxheWxpc3ROYW1lOiBpc1NldChvYmplY3QubGl2ZVBsYXlsaXN0TmFtZSkgPyBTdHJpbmcob2JqZWN0LmxpdmVQbGF5bGlzdE5hbWUpIDogXCJcIixcbiAgICAgICAgICAgIGR1cmF0aW9uOiBpc1NldChvYmplY3QuZHVyYXRpb24pID8gTnVtYmVyKG9iamVjdC5kdXJhdGlvbikgOiAwLFxuICAgICAgICAgICAgc2l6ZTogaXNTZXQob2JqZWN0LnNpemUpID8gTnVtYmVyKG9iamVjdC5zaXplKSA6IDAsXG4gICAgICAgICAgICBwbGF5bGlzdExvY2F0aW9uOiBpc1NldChvYmplY3QucGxheWxpc3RMb2NhdGlvbikgPyBTdHJpbmcob2JqZWN0LnBsYXlsaXN0TG9jYXRpb24pIDogXCJcIixcbiAgICAgICAgICAgIGxpdmVQbGF5bGlzdExvY2F0aW9uOiBpc1NldChvYmplY3QubGl2ZVBsYXlsaXN0TG9jYXRpb24pID8gU3RyaW5nKG9iamVjdC5saXZlUGxheWxpc3RMb2NhdGlvbikgOiBcIlwiLFxuICAgICAgICAgICAgc2VnbWVudENvdW50OiBpc1NldChvYmplY3Quc2VnbWVudENvdW50KSA/IE51bWJlcihvYmplY3Quc2VnbWVudENvdW50KSA6IDAsXG4gICAgICAgICAgICBzdGFydGVkQXQ6IGlzU2V0KG9iamVjdC5zdGFydGVkQXQpID8gTnVtYmVyKG9iamVjdC5zdGFydGVkQXQpIDogMCxcbiAgICAgICAgICAgIGVuZGVkQXQ6IGlzU2V0KG9iamVjdC5lbmRlZEF0KSA/IE51bWJlcihvYmplY3QuZW5kZWRBdCkgOiAwLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2UucGxheWxpc3ROYW1lICE9PSB1bmRlZmluZWQgJiYgKG9iai5wbGF5bGlzdE5hbWUgPSBtZXNzYWdlLnBsYXlsaXN0TmFtZSk7XG4gICAgICAgIG1lc3NhZ2UubGl2ZVBsYXlsaXN0TmFtZSAhPT0gdW5kZWZpbmVkICYmIChvYmoubGl2ZVBsYXlsaXN0TmFtZSA9IG1lc3NhZ2UubGl2ZVBsYXlsaXN0TmFtZSk7XG4gICAgICAgIG1lc3NhZ2UuZHVyYXRpb24gIT09IHVuZGVmaW5lZCAmJiAob2JqLmR1cmF0aW9uID0gTWF0aC5yb3VuZChtZXNzYWdlLmR1cmF0aW9uKSk7XG4gICAgICAgIG1lc3NhZ2Uuc2l6ZSAhPT0gdW5kZWZpbmVkICYmIChvYmouc2l6ZSA9IE1hdGgucm91bmQobWVzc2FnZS5zaXplKSk7XG4gICAgICAgIG1lc3NhZ2UucGxheWxpc3RMb2NhdGlvbiAhPT0gdW5kZWZpbmVkICYmIChvYmoucGxheWxpc3RMb2NhdGlvbiA9IG1lc3NhZ2UucGxheWxpc3RMb2NhdGlvbik7XG4gICAgICAgIG1lc3NhZ2UubGl2ZVBsYXlsaXN0TG9jYXRpb24gIT09IHVuZGVmaW5lZCAmJiAob2JqLmxpdmVQbGF5bGlzdExvY2F0aW9uID0gbWVzc2FnZS5saXZlUGxheWxpc3RMb2NhdGlvbik7XG4gICAgICAgIG1lc3NhZ2Uuc2VnbWVudENvdW50ICE9PSB1bmRlZmluZWQgJiYgKG9iai5zZWdtZW50Q291bnQgPSBNYXRoLnJvdW5kKG1lc3NhZ2Uuc2VnbWVudENvdW50KSk7XG4gICAgICAgIG1lc3NhZ2Uuc3RhcnRlZEF0ICE9PSB1bmRlZmluZWQgJiYgKG9iai5zdGFydGVkQXQgPSBNYXRoLnJvdW5kKG1lc3NhZ2Uuc3RhcnRlZEF0KSk7XG4gICAgICAgIG1lc3NhZ2UuZW5kZWRBdCAhPT0gdW5kZWZpbmVkICYmIChvYmouZW5kZWRBdCA9IE1hdGgucm91bmQobWVzc2FnZS5lbmRlZEF0KSk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2YsIF9nLCBfaCwgX2o7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlU2VnbWVudHNJbmZvKCk7XG4gICAgICAgIG1lc3NhZ2UucGxheWxpc3ROYW1lID0gKF9hID0gb2JqZWN0LnBsYXlsaXN0TmFtZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogXCJcIjtcbiAgICAgICAgbWVzc2FnZS5saXZlUGxheWxpc3ROYW1lID0gKF9iID0gb2JqZWN0LmxpdmVQbGF5bGlzdE5hbWUpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IFwiXCI7XG4gICAgICAgIG1lc3NhZ2UuZHVyYXRpb24gPSAoX2MgPSBvYmplY3QuZHVyYXRpb24pICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IDA7XG4gICAgICAgIG1lc3NhZ2Uuc2l6ZSA9IChfZCA9IG9iamVjdC5zaXplKSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiAwO1xuICAgICAgICBtZXNzYWdlLnBsYXlsaXN0TG9jYXRpb24gPSAoX2UgPSBvYmplY3QucGxheWxpc3RMb2NhdGlvbikgIT09IG51bGwgJiYgX2UgIT09IHZvaWQgMCA/IF9lIDogXCJcIjtcbiAgICAgICAgbWVzc2FnZS5saXZlUGxheWxpc3RMb2NhdGlvbiA9IChfZiA9IG9iamVjdC5saXZlUGxheWxpc3RMb2NhdGlvbikgIT09IG51bGwgJiYgX2YgIT09IHZvaWQgMCA/IF9mIDogXCJcIjtcbiAgICAgICAgbWVzc2FnZS5zZWdtZW50Q291bnQgPSAoX2cgPSBvYmplY3Quc2VnbWVudENvdW50KSAhPT0gbnVsbCAmJiBfZyAhPT0gdm9pZCAwID8gX2cgOiAwO1xuICAgICAgICBtZXNzYWdlLnN0YXJ0ZWRBdCA9IChfaCA9IG9iamVjdC5zdGFydGVkQXQpICE9PSBudWxsICYmIF9oICE9PSB2b2lkIDAgPyBfaCA6IDA7XG4gICAgICAgIG1lc3NhZ2UuZW5kZWRBdCA9IChfaiA9IG9iamVjdC5lbmRlZEF0KSAhPT0gbnVsbCAmJiBfaiAhPT0gdm9pZCAwID8gX2ogOiAwO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VJbWFnZXNJbmZvKCkge1xuICAgIHJldHVybiB7IGltYWdlQ291bnQ6IDAsIHN0YXJ0ZWRBdDogMCwgZW5kZWRBdDogMCB9O1xufVxuZXhwb3J0cy5JbWFnZXNJbmZvID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBtaW5pbWFsXzEuZGVmYXVsdC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UuaW1hZ2VDb3VudCAhPT0gdW5kZWZpbmVkICYmIG1lc3NhZ2UuaW1hZ2VDb3VudCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig4KS5pbnQ2NChtZXNzYWdlLmltYWdlQ291bnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnN0YXJ0ZWRBdCAhPT0gdW5kZWZpbmVkICYmIG1lc3NhZ2Uuc3RhcnRlZEF0ICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDE2KS5pbnQ2NChtZXNzYWdlLnN0YXJ0ZWRBdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuZW5kZWRBdCAhPT0gdW5kZWZpbmVkICYmIG1lc3NhZ2UuZW5kZWRBdCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigyNCkuaW50NjQobWVzc2FnZS5lbmRlZEF0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBtaW5pbWFsXzEuZGVmYXVsdC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBtaW5pbWFsXzEuZGVmYXVsdC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VJbWFnZXNJbmZvKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5pbWFnZUNvdW50ID0gbG9uZ1RvTnVtYmVyKHJlYWRlci5pbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnN0YXJ0ZWRBdCA9IGxvbmdUb051bWJlcihyZWFkZXIuaW50NjQoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5lbmRlZEF0ID0gbG9uZ1RvTnVtYmVyKHJlYWRlci5pbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaW1hZ2VDb3VudDogaXNTZXQob2JqZWN0LmltYWdlQ291bnQpID8gTnVtYmVyKG9iamVjdC5pbWFnZUNvdW50KSA6IDAsXG4gICAgICAgICAgICBzdGFydGVkQXQ6IGlzU2V0KG9iamVjdC5zdGFydGVkQXQpID8gTnVtYmVyKG9iamVjdC5zdGFydGVkQXQpIDogMCxcbiAgICAgICAgICAgIGVuZGVkQXQ6IGlzU2V0KG9iamVjdC5lbmRlZEF0KSA/IE51bWJlcihvYmplY3QuZW5kZWRBdCkgOiAwLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2UuaW1hZ2VDb3VudCAhPT0gdW5kZWZpbmVkICYmIChvYmouaW1hZ2VDb3VudCA9IE1hdGgucm91bmQobWVzc2FnZS5pbWFnZUNvdW50KSk7XG4gICAgICAgIG1lc3NhZ2Uuc3RhcnRlZEF0ICE9PSB1bmRlZmluZWQgJiYgKG9iai5zdGFydGVkQXQgPSBNYXRoLnJvdW5kKG1lc3NhZ2Uuc3RhcnRlZEF0KSk7XG4gICAgICAgIG1lc3NhZ2UuZW5kZWRBdCAhPT0gdW5kZWZpbmVkICYmIChvYmouZW5kZWRBdCA9IE1hdGgucm91bmQobWVzc2FnZS5lbmRlZEF0KSk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlSW1hZ2VzSW5mbygpO1xuICAgICAgICBtZXNzYWdlLmltYWdlQ291bnQgPSAoX2EgPSBvYmplY3QuaW1hZ2VDb3VudCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMDtcbiAgICAgICAgbWVzc2FnZS5zdGFydGVkQXQgPSAoX2IgPSBvYmplY3Quc3RhcnRlZEF0KSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAwO1xuICAgICAgICBtZXNzYWdlLmVuZGVkQXQgPSAoX2MgPSBvYmplY3QuZW5kZWRBdCkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogMDtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlQXV0b1BhcnRpY2lwYW50RWdyZXNzKCkge1xuICAgIHJldHVybiB7IHByZXNldDogdW5kZWZpbmVkLCBhZHZhbmNlZDogdW5kZWZpbmVkLCBmaWxlT3V0cHV0czogW10sIHNlZ21lbnRPdXRwdXRzOiBbXSB9O1xufVxuZXhwb3J0cy5BdXRvUGFydGljaXBhbnRFZ3Jlc3MgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IG1pbmltYWxfMS5kZWZhdWx0LldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5wcmVzZXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig4KS5pbnQzMihtZXNzYWdlLnByZXNldCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuYWR2YW5jZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZXhwb3J0cy5FbmNvZGluZ09wdGlvbnMuZW5jb2RlKG1lc3NhZ2UuYWR2YW5jZWQsIHdyaXRlci51aW50MzIoMTgpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuZmlsZU91dHB1dHMgIT09IHVuZGVmaW5lZCAmJiBtZXNzYWdlLmZpbGVPdXRwdXRzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCB2IG9mIG1lc3NhZ2UuZmlsZU91dHB1dHMpIHtcbiAgICAgICAgICAgICAgICBleHBvcnRzLkVuY29kZWRGaWxlT3V0cHV0LmVuY29kZSh2LCB3cml0ZXIudWludDMyKDI2KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnNlZ21lbnRPdXRwdXRzICE9PSB1bmRlZmluZWQgJiYgbWVzc2FnZS5zZWdtZW50T3V0cHV0cy5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgdiBvZiBtZXNzYWdlLnNlZ21lbnRPdXRwdXRzKSB7XG4gICAgICAgICAgICAgICAgZXhwb3J0cy5TZWdtZW50ZWRGaWxlT3V0cHV0LmVuY29kZSh2LCB3cml0ZXIudWludDMyKDM0KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIG1pbmltYWxfMS5kZWZhdWx0LlJlYWRlciA/IGlucHV0IDogbmV3IG1pbmltYWxfMS5kZWZhdWx0LlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZUF1dG9QYXJ0aWNpcGFudEVncmVzcygpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucHJlc2V0ID0gcmVhZGVyLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5hZHZhbmNlZCA9IGV4cG9ydHMuRW5jb2RpbmdPcHRpb25zLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5maWxlT3V0cHV0cy5wdXNoKGV4cG9ydHMuRW5jb2RlZEZpbGVPdXRwdXQuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5zZWdtZW50T3V0cHV0cy5wdXNoKGV4cG9ydHMuU2VnbWVudGVkRmlsZU91dHB1dC5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcHJlc2V0OiBpc1NldChvYmplY3QucHJlc2V0KSA/IGVuY29kaW5nT3B0aW9uc1ByZXNldEZyb21KU09OKG9iamVjdC5wcmVzZXQpIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgYWR2YW5jZWQ6IGlzU2V0KG9iamVjdC5hZHZhbmNlZCkgPyBleHBvcnRzLkVuY29kaW5nT3B0aW9ucy5mcm9tSlNPTihvYmplY3QuYWR2YW5jZWQpIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZmlsZU91dHB1dHM6IEFycmF5LmlzQXJyYXkob2JqZWN0ID09PSBudWxsIHx8IG9iamVjdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb2JqZWN0LmZpbGVPdXRwdXRzKVxuICAgICAgICAgICAgICAgID8gb2JqZWN0LmZpbGVPdXRwdXRzLm1hcCgoZSkgPT4gZXhwb3J0cy5FbmNvZGVkRmlsZU91dHB1dC5mcm9tSlNPTihlKSlcbiAgICAgICAgICAgICAgICA6IFtdLFxuICAgICAgICAgICAgc2VnbWVudE91dHB1dHM6IEFycmF5LmlzQXJyYXkob2JqZWN0ID09PSBudWxsIHx8IG9iamVjdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb2JqZWN0LnNlZ21lbnRPdXRwdXRzKVxuICAgICAgICAgICAgICAgID8gb2JqZWN0LnNlZ21lbnRPdXRwdXRzLm1hcCgoZSkgPT4gZXhwb3J0cy5TZWdtZW50ZWRGaWxlT3V0cHV0LmZyb21KU09OKGUpKVxuICAgICAgICAgICAgICAgIDogW10sXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS5wcmVzZXQgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5wcmVzZXQgPSBtZXNzYWdlLnByZXNldCAhPT0gdW5kZWZpbmVkID8gZW5jb2RpbmdPcHRpb25zUHJlc2V0VG9KU09OKG1lc3NhZ2UucHJlc2V0KSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIG1lc3NhZ2UuYWR2YW5jZWQgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5hZHZhbmNlZCA9IG1lc3NhZ2UuYWR2YW5jZWQgPyBleHBvcnRzLkVuY29kaW5nT3B0aW9ucy50b0pTT04obWVzc2FnZS5hZHZhbmNlZCkgOiB1bmRlZmluZWQpO1xuICAgICAgICBpZiAobWVzc2FnZS5maWxlT3V0cHV0cykge1xuICAgICAgICAgICAgb2JqLmZpbGVPdXRwdXRzID0gbWVzc2FnZS5maWxlT3V0cHV0cy5tYXAoKGUpID0+IGUgPyBleHBvcnRzLkVuY29kZWRGaWxlT3V0cHV0LnRvSlNPTihlKSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvYmouZmlsZU91dHB1dHMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5zZWdtZW50T3V0cHV0cykge1xuICAgICAgICAgICAgb2JqLnNlZ21lbnRPdXRwdXRzID0gbWVzc2FnZS5zZWdtZW50T3V0cHV0cy5tYXAoKGUpID0+IGUgPyBleHBvcnRzLlNlZ21lbnRlZEZpbGVPdXRwdXQudG9KU09OKGUpIDogdW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9iai5zZWdtZW50T3V0cHV0cyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlQXV0b1BhcnRpY2lwYW50RWdyZXNzKCk7XG4gICAgICAgIG1lc3NhZ2UucHJlc2V0ID0gKF9hID0gb2JqZWN0LnByZXNldCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogdW5kZWZpbmVkO1xuICAgICAgICBtZXNzYWdlLmFkdmFuY2VkID0gKG9iamVjdC5hZHZhbmNlZCAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5hZHZhbmNlZCAhPT0gbnVsbClcbiAgICAgICAgICAgID8gZXhwb3J0cy5FbmNvZGluZ09wdGlvbnMuZnJvbVBhcnRpYWwob2JqZWN0LmFkdmFuY2VkKVxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIG1lc3NhZ2UuZmlsZU91dHB1dHMgPSAoKF9iID0gb2JqZWN0LmZpbGVPdXRwdXRzKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IubWFwKChlKSA9PiBleHBvcnRzLkVuY29kZWRGaWxlT3V0cHV0LmZyb21QYXJ0aWFsKGUpKSkgfHwgW107XG4gICAgICAgIG1lc3NhZ2Uuc2VnbWVudE91dHB1dHMgPSAoKF9jID0gb2JqZWN0LnNlZ21lbnRPdXRwdXRzKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MubWFwKChlKSA9PiBleHBvcnRzLlNlZ21lbnRlZEZpbGVPdXRwdXQuZnJvbVBhcnRpYWwoZSkpKSB8fCBbXTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlQXV0b1RyYWNrRWdyZXNzKCkge1xuICAgIHJldHVybiB7IGZpbGVwYXRoOiBcIlwiLCBkaXNhYmxlTWFuaWZlc3Q6IGZhbHNlLCBzMzogdW5kZWZpbmVkLCBnY3A6IHVuZGVmaW5lZCwgYXp1cmU6IHVuZGVmaW5lZCB9O1xufVxuZXhwb3J0cy5BdXRvVHJhY2tFZ3Jlc3MgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IG1pbmltYWxfMS5kZWZhdWx0LldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5maWxlcGF0aCAhPT0gdW5kZWZpbmVkICYmIG1lc3NhZ2UuZmlsZXBhdGggIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTApLnN0cmluZyhtZXNzYWdlLmZpbGVwYXRoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5kaXNhYmxlTWFuaWZlc3QgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoNDApLmJvb2wobWVzc2FnZS5kaXNhYmxlTWFuaWZlc3QpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnMzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGV4cG9ydHMuUzNVcGxvYWQuZW5jb2RlKG1lc3NhZ2UuczMsIHdyaXRlci51aW50MzIoMTgpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuZ2NwICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGV4cG9ydHMuR0NQVXBsb2FkLmVuY29kZShtZXNzYWdlLmdjcCwgd3JpdGVyLnVpbnQzMigyNikuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5henVyZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBleHBvcnRzLkF6dXJlQmxvYlVwbG9hZC5lbmNvZGUobWVzc2FnZS5henVyZSwgd3JpdGVyLnVpbnQzMigzNCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBtaW5pbWFsXzEuZGVmYXVsdC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBtaW5pbWFsXzEuZGVmYXVsdC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VBdXRvVHJhY2tFZ3Jlc3MoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmZpbGVwYXRoID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZGlzYWJsZU1hbmlmZXN0ID0gcmVhZGVyLmJvb2woKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnMzID0gZXhwb3J0cy5TM1VwbG9hZC5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZ2NwID0gZXhwb3J0cy5HQ1BVcGxvYWQuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmF6dXJlID0gZXhwb3J0cy5BenVyZUJsb2JVcGxvYWQuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZmlsZXBhdGg6IGlzU2V0KG9iamVjdC5maWxlcGF0aCkgPyBTdHJpbmcob2JqZWN0LmZpbGVwYXRoKSA6IFwiXCIsXG4gICAgICAgICAgICBkaXNhYmxlTWFuaWZlc3Q6IGlzU2V0KG9iamVjdC5kaXNhYmxlTWFuaWZlc3QpID8gQm9vbGVhbihvYmplY3QuZGlzYWJsZU1hbmlmZXN0KSA6IGZhbHNlLFxuICAgICAgICAgICAgczM6IGlzU2V0KG9iamVjdC5zMykgPyBleHBvcnRzLlMzVXBsb2FkLmZyb21KU09OKG9iamVjdC5zMykgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBnY3A6IGlzU2V0KG9iamVjdC5nY3ApID8gZXhwb3J0cy5HQ1BVcGxvYWQuZnJvbUpTT04ob2JqZWN0LmdjcCkgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBhenVyZTogaXNTZXQob2JqZWN0LmF6dXJlKSA/IGV4cG9ydHMuQXp1cmVCbG9iVXBsb2FkLmZyb21KU09OKG9iamVjdC5henVyZSkgOiB1bmRlZmluZWQsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS5maWxlcGF0aCAhPT0gdW5kZWZpbmVkICYmIChvYmouZmlsZXBhdGggPSBtZXNzYWdlLmZpbGVwYXRoKTtcbiAgICAgICAgbWVzc2FnZS5kaXNhYmxlTWFuaWZlc3QgIT09IHVuZGVmaW5lZCAmJiAob2JqLmRpc2FibGVNYW5pZmVzdCA9IG1lc3NhZ2UuZGlzYWJsZU1hbmlmZXN0KTtcbiAgICAgICAgbWVzc2FnZS5zMyAhPT0gdW5kZWZpbmVkICYmIChvYmouczMgPSBtZXNzYWdlLnMzID8gZXhwb3J0cy5TM1VwbG9hZC50b0pTT04obWVzc2FnZS5zMykgOiB1bmRlZmluZWQpO1xuICAgICAgICBtZXNzYWdlLmdjcCAhPT0gdW5kZWZpbmVkICYmIChvYmouZ2NwID0gbWVzc2FnZS5nY3AgPyBleHBvcnRzLkdDUFVwbG9hZC50b0pTT04obWVzc2FnZS5nY3ApIDogdW5kZWZpbmVkKTtcbiAgICAgICAgbWVzc2FnZS5henVyZSAhPT0gdW5kZWZpbmVkICYmIChvYmouYXp1cmUgPSBtZXNzYWdlLmF6dXJlID8gZXhwb3J0cy5BenVyZUJsb2JVcGxvYWQudG9KU09OKG1lc3NhZ2UuYXp1cmUpIDogdW5kZWZpbmVkKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZUF1dG9UcmFja0VncmVzcygpO1xuICAgICAgICBtZXNzYWdlLmZpbGVwYXRoID0gKF9hID0gb2JqZWN0LmZpbGVwYXRoKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBcIlwiO1xuICAgICAgICBtZXNzYWdlLmRpc2FibGVNYW5pZmVzdCA9IChfYiA9IG9iamVjdC5kaXNhYmxlTWFuaWZlc3QpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IGZhbHNlO1xuICAgICAgICBtZXNzYWdlLnMzID0gKG9iamVjdC5zMyAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5zMyAhPT0gbnVsbCkgPyBleHBvcnRzLlMzVXBsb2FkLmZyb21QYXJ0aWFsKG9iamVjdC5zMykgOiB1bmRlZmluZWQ7XG4gICAgICAgIG1lc3NhZ2UuZ2NwID0gKG9iamVjdC5nY3AgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QuZ2NwICE9PSBudWxsKSA/IGV4cG9ydHMuR0NQVXBsb2FkLmZyb21QYXJ0aWFsKG9iamVjdC5nY3ApIDogdW5kZWZpbmVkO1xuICAgICAgICBtZXNzYWdlLmF6dXJlID0gKG9iamVjdC5henVyZSAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5henVyZSAhPT0gbnVsbClcbiAgICAgICAgICAgID8gZXhwb3J0cy5BenVyZUJsb2JVcGxvYWQuZnJvbVBhcnRpYWwob2JqZWN0LmF6dXJlKVxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xudmFyIGdsb2JhbFRoaXMgPSAoKCkgPT4ge1xuICAgIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICByZXR1cm4gZ2xvYmFsVGhpcztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJldHVybiBzZWxmO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICByZXR1cm4gd2luZG93O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICByZXR1cm4gZ2xvYmFsO1xuICAgIH1cbiAgICB0aHJvdyBcIlVuYWJsZSB0byBsb2NhdGUgZ2xvYmFsIG9iamVjdFwiO1xufSkoKTtcbmZ1bmN0aW9uIGxvbmdUb051bWJlcihsb25nKSB7XG4gICAgaWYgKGxvbmcuZ3QoTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpKSB7XG4gICAgICAgIHRocm93IG5ldyBnbG9iYWxUaGlzLkVycm9yKFwiVmFsdWUgaXMgbGFyZ2VyIHRoYW4gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJcIik7XG4gICAgfVxuICAgIHJldHVybiBsb25nLnRvTnVtYmVyKCk7XG59XG5pZiAobWluaW1hbF8xLmRlZmF1bHQudXRpbC5Mb25nICE9PSBsb25nXzEuZGVmYXVsdCkge1xuICAgIG1pbmltYWxfMS5kZWZhdWx0LnV0aWwuTG9uZyA9IGxvbmdfMS5kZWZhdWx0O1xuICAgIG1pbmltYWxfMS5kZWZhdWx0LmNvbmZpZ3VyZSgpO1xufVxuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmIHZhbHVlICE9PSBudWxsO1xufVxuZnVuY3Rpb24gaXNTZXQodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHVuZGVmaW5lZDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpdmVraXRfZWdyZXNzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/livekit-server-sdk/dist/proto/livekit_egress.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/livekit-server-sdk/dist/proto/livekit_ingress.js":
/*!***********************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/proto/livekit_ingress.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DeleteIngressRequest = exports.ListIngressResponse = exports.ListIngressRequest = exports.UpdateIngressRequest = exports.InputAudioState = exports.InputVideoState = exports.IngressState = exports.IngressInfo = exports.IngressVideoEncodingOptions = exports.IngressAudioEncodingOptions = exports.IngressVideoOptions = exports.IngressAudioOptions = exports.CreateIngressRequest = exports.ingressState_StatusToJSON = exports.ingressState_StatusFromJSON = exports.IngressState_Status = exports.ingressVideoEncodingPresetToJSON = exports.ingressVideoEncodingPresetFromJSON = exports.IngressVideoEncodingPreset = exports.ingressAudioEncodingPresetToJSON = exports.ingressAudioEncodingPresetFromJSON = exports.IngressAudioEncodingPreset = exports.ingressInputToJSON = exports.ingressInputFromJSON = exports.IngressInput = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(__webpack_require__(/*! long */ \"(action-browser)/./node_modules/long/umd/index.js\"));\nconst minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ \"(action-browser)/./node_modules/protobufjs/minimal.js\"));\nconst livekit_models_1 = __webpack_require__(/*! ./livekit_models */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/proto/livekit_models.js\");\nexports.protobufPackage = \"livekit\";\nvar IngressInput;\n(function (IngressInput) {\n    IngressInput[IngressInput[\"RTMP_INPUT\"] = 0] = \"RTMP_INPUT\";\n    IngressInput[IngressInput[\"WHIP_INPUT\"] = 1] = \"WHIP_INPUT\";\n    /** URL_INPUT - Pull from the provided URL. Only HTTP url are supported, serving either a single media file or a HLS stream */\n    IngressInput[IngressInput[\"URL_INPUT\"] = 2] = \"URL_INPUT\";\n    IngressInput[IngressInput[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(IngressInput = exports.IngressInput || (exports.IngressInput = {}));\nfunction ingressInputFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"RTMP_INPUT\":\n            return IngressInput.RTMP_INPUT;\n        case 1:\n        case \"WHIP_INPUT\":\n            return IngressInput.WHIP_INPUT;\n        case 2:\n        case \"URL_INPUT\":\n            return IngressInput.URL_INPUT;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return IngressInput.UNRECOGNIZED;\n    }\n}\nexports.ingressInputFromJSON = ingressInputFromJSON;\nfunction ingressInputToJSON(object) {\n    switch (object) {\n        case IngressInput.RTMP_INPUT:\n            return \"RTMP_INPUT\";\n        case IngressInput.WHIP_INPUT:\n            return \"WHIP_INPUT\";\n        case IngressInput.URL_INPUT:\n            return \"URL_INPUT\";\n        case IngressInput.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.ingressInputToJSON = ingressInputToJSON;\nvar IngressAudioEncodingPreset;\n(function (IngressAudioEncodingPreset) {\n    /** OPUS_STEREO_96KBPS - OPUS, 2 channels, 96kbps */\n    IngressAudioEncodingPreset[IngressAudioEncodingPreset[\"OPUS_STEREO_96KBPS\"] = 0] = \"OPUS_STEREO_96KBPS\";\n    /** OPUS_MONO_64KBS - OPUS, 1 channel, 64kbps */\n    IngressAudioEncodingPreset[IngressAudioEncodingPreset[\"OPUS_MONO_64KBS\"] = 1] = \"OPUS_MONO_64KBS\";\n    IngressAudioEncodingPreset[IngressAudioEncodingPreset[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(IngressAudioEncodingPreset = exports.IngressAudioEncodingPreset || (exports.IngressAudioEncodingPreset = {}));\nfunction ingressAudioEncodingPresetFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"OPUS_STEREO_96KBPS\":\n            return IngressAudioEncodingPreset.OPUS_STEREO_96KBPS;\n        case 1:\n        case \"OPUS_MONO_64KBS\":\n            return IngressAudioEncodingPreset.OPUS_MONO_64KBS;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return IngressAudioEncodingPreset.UNRECOGNIZED;\n    }\n}\nexports.ingressAudioEncodingPresetFromJSON = ingressAudioEncodingPresetFromJSON;\nfunction ingressAudioEncodingPresetToJSON(object) {\n    switch (object) {\n        case IngressAudioEncodingPreset.OPUS_STEREO_96KBPS:\n            return \"OPUS_STEREO_96KBPS\";\n        case IngressAudioEncodingPreset.OPUS_MONO_64KBS:\n            return \"OPUS_MONO_64KBS\";\n        case IngressAudioEncodingPreset.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.ingressAudioEncodingPresetToJSON = ingressAudioEncodingPresetToJSON;\nvar IngressVideoEncodingPreset;\n(function (IngressVideoEncodingPreset) {\n    /** H264_720P_30FPS_3_LAYERS - 1280x720,  30fps, 1900kbps main layer, 3 layers total */\n    IngressVideoEncodingPreset[IngressVideoEncodingPreset[\"H264_720P_30FPS_3_LAYERS\"] = 0] = \"H264_720P_30FPS_3_LAYERS\";\n    /** H264_1080P_30FPS_3_LAYERS - 1980x1080, 30fps, 3500kbps main layer, 3 layers total */\n    IngressVideoEncodingPreset[IngressVideoEncodingPreset[\"H264_1080P_30FPS_3_LAYERS\"] = 1] = \"H264_1080P_30FPS_3_LAYERS\";\n    /** H264_540P_25FPS_2_LAYERS - 960x540,  25fps, 1000kbps  main layer, 2 layers total */\n    IngressVideoEncodingPreset[IngressVideoEncodingPreset[\"H264_540P_25FPS_2_LAYERS\"] = 2] = \"H264_540P_25FPS_2_LAYERS\";\n    /** H264_720P_30FPS_1_LAYER - 1280x720,  30fps, 1900kbps, no simulcast */\n    IngressVideoEncodingPreset[IngressVideoEncodingPreset[\"H264_720P_30FPS_1_LAYER\"] = 3] = \"H264_720P_30FPS_1_LAYER\";\n    /** H264_1080P_30FPS_1_LAYER - 1980x1080, 30fps, 3500kbps, no simulcast */\n    IngressVideoEncodingPreset[IngressVideoEncodingPreset[\"H264_1080P_30FPS_1_LAYER\"] = 4] = \"H264_1080P_30FPS_1_LAYER\";\n    /** H264_720P_30FPS_3_LAYERS_HIGH_MOTION - 1280x720,  30fps, 2500kbps main layer, 3 layers total, higher bitrate for high motion, harder to encode content */\n    IngressVideoEncodingPreset[IngressVideoEncodingPreset[\"H264_720P_30FPS_3_LAYERS_HIGH_MOTION\"] = 5] = \"H264_720P_30FPS_3_LAYERS_HIGH_MOTION\";\n    /** H264_1080P_30FPS_3_LAYERS_HIGH_MOTION - 1980x1080, 30fps, 4500kbps main layer, 3 layers total, higher bitrate for high motion, harder to encode content */\n    IngressVideoEncodingPreset[IngressVideoEncodingPreset[\"H264_1080P_30FPS_3_LAYERS_HIGH_MOTION\"] = 6] = \"H264_1080P_30FPS_3_LAYERS_HIGH_MOTION\";\n    /** H264_540P_25FPS_2_LAYERS_HIGH_MOTION - 960x540,  25fps, 1300kbps  main layer, 2 layers total, higher bitrate for high motion, harder to encode content */\n    IngressVideoEncodingPreset[IngressVideoEncodingPreset[\"H264_540P_25FPS_2_LAYERS_HIGH_MOTION\"] = 7] = \"H264_540P_25FPS_2_LAYERS_HIGH_MOTION\";\n    /** H264_720P_30FPS_1_LAYER_HIGH_MOTION - 1280x720,  30fps, 2500kbps, no simulcast, higher bitrate for high motion, harder to encode content */\n    IngressVideoEncodingPreset[IngressVideoEncodingPreset[\"H264_720P_30FPS_1_LAYER_HIGH_MOTION\"] = 8] = \"H264_720P_30FPS_1_LAYER_HIGH_MOTION\";\n    /** H264_1080P_30FPS_1_LAYER_HIGH_MOTION - 1980x1080, 30fps, 4500kbps, no simulcast, higher bitrate for high motion, harder to encode content */\n    IngressVideoEncodingPreset[IngressVideoEncodingPreset[\"H264_1080P_30FPS_1_LAYER_HIGH_MOTION\"] = 9] = \"H264_1080P_30FPS_1_LAYER_HIGH_MOTION\";\n    IngressVideoEncodingPreset[IngressVideoEncodingPreset[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(IngressVideoEncodingPreset = exports.IngressVideoEncodingPreset || (exports.IngressVideoEncodingPreset = {}));\nfunction ingressVideoEncodingPresetFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"H264_720P_30FPS_3_LAYERS\":\n            return IngressVideoEncodingPreset.H264_720P_30FPS_3_LAYERS;\n        case 1:\n        case \"H264_1080P_30FPS_3_LAYERS\":\n            return IngressVideoEncodingPreset.H264_1080P_30FPS_3_LAYERS;\n        case 2:\n        case \"H264_540P_25FPS_2_LAYERS\":\n            return IngressVideoEncodingPreset.H264_540P_25FPS_2_LAYERS;\n        case 3:\n        case \"H264_720P_30FPS_1_LAYER\":\n            return IngressVideoEncodingPreset.H264_720P_30FPS_1_LAYER;\n        case 4:\n        case \"H264_1080P_30FPS_1_LAYER\":\n            return IngressVideoEncodingPreset.H264_1080P_30FPS_1_LAYER;\n        case 5:\n        case \"H264_720P_30FPS_3_LAYERS_HIGH_MOTION\":\n            return IngressVideoEncodingPreset.H264_720P_30FPS_3_LAYERS_HIGH_MOTION;\n        case 6:\n        case \"H264_1080P_30FPS_3_LAYERS_HIGH_MOTION\":\n            return IngressVideoEncodingPreset.H264_1080P_30FPS_3_LAYERS_HIGH_MOTION;\n        case 7:\n        case \"H264_540P_25FPS_2_LAYERS_HIGH_MOTION\":\n            return IngressVideoEncodingPreset.H264_540P_25FPS_2_LAYERS_HIGH_MOTION;\n        case 8:\n        case \"H264_720P_30FPS_1_LAYER_HIGH_MOTION\":\n            return IngressVideoEncodingPreset.H264_720P_30FPS_1_LAYER_HIGH_MOTION;\n        case 9:\n        case \"H264_1080P_30FPS_1_LAYER_HIGH_MOTION\":\n            return IngressVideoEncodingPreset.H264_1080P_30FPS_1_LAYER_HIGH_MOTION;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return IngressVideoEncodingPreset.UNRECOGNIZED;\n    }\n}\nexports.ingressVideoEncodingPresetFromJSON = ingressVideoEncodingPresetFromJSON;\nfunction ingressVideoEncodingPresetToJSON(object) {\n    switch (object) {\n        case IngressVideoEncodingPreset.H264_720P_30FPS_3_LAYERS:\n            return \"H264_720P_30FPS_3_LAYERS\";\n        case IngressVideoEncodingPreset.H264_1080P_30FPS_3_LAYERS:\n            return \"H264_1080P_30FPS_3_LAYERS\";\n        case IngressVideoEncodingPreset.H264_540P_25FPS_2_LAYERS:\n            return \"H264_540P_25FPS_2_LAYERS\";\n        case IngressVideoEncodingPreset.H264_720P_30FPS_1_LAYER:\n            return \"H264_720P_30FPS_1_LAYER\";\n        case IngressVideoEncodingPreset.H264_1080P_30FPS_1_LAYER:\n            return \"H264_1080P_30FPS_1_LAYER\";\n        case IngressVideoEncodingPreset.H264_720P_30FPS_3_LAYERS_HIGH_MOTION:\n            return \"H264_720P_30FPS_3_LAYERS_HIGH_MOTION\";\n        case IngressVideoEncodingPreset.H264_1080P_30FPS_3_LAYERS_HIGH_MOTION:\n            return \"H264_1080P_30FPS_3_LAYERS_HIGH_MOTION\";\n        case IngressVideoEncodingPreset.H264_540P_25FPS_2_LAYERS_HIGH_MOTION:\n            return \"H264_540P_25FPS_2_LAYERS_HIGH_MOTION\";\n        case IngressVideoEncodingPreset.H264_720P_30FPS_1_LAYER_HIGH_MOTION:\n            return \"H264_720P_30FPS_1_LAYER_HIGH_MOTION\";\n        case IngressVideoEncodingPreset.H264_1080P_30FPS_1_LAYER_HIGH_MOTION:\n            return \"H264_1080P_30FPS_1_LAYER_HIGH_MOTION\";\n        case IngressVideoEncodingPreset.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.ingressVideoEncodingPresetToJSON = ingressVideoEncodingPresetToJSON;\nvar IngressState_Status;\n(function (IngressState_Status) {\n    IngressState_Status[IngressState_Status[\"ENDPOINT_INACTIVE\"] = 0] = \"ENDPOINT_INACTIVE\";\n    IngressState_Status[IngressState_Status[\"ENDPOINT_BUFFERING\"] = 1] = \"ENDPOINT_BUFFERING\";\n    IngressState_Status[IngressState_Status[\"ENDPOINT_PUBLISHING\"] = 2] = \"ENDPOINT_PUBLISHING\";\n    IngressState_Status[IngressState_Status[\"ENDPOINT_ERROR\"] = 3] = \"ENDPOINT_ERROR\";\n    IngressState_Status[IngressState_Status[\"ENDPOINT_COMPLETE\"] = 4] = \"ENDPOINT_COMPLETE\";\n    IngressState_Status[IngressState_Status[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(IngressState_Status = exports.IngressState_Status || (exports.IngressState_Status = {}));\nfunction ingressState_StatusFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"ENDPOINT_INACTIVE\":\n            return IngressState_Status.ENDPOINT_INACTIVE;\n        case 1:\n        case \"ENDPOINT_BUFFERING\":\n            return IngressState_Status.ENDPOINT_BUFFERING;\n        case 2:\n        case \"ENDPOINT_PUBLISHING\":\n            return IngressState_Status.ENDPOINT_PUBLISHING;\n        case 3:\n        case \"ENDPOINT_ERROR\":\n            return IngressState_Status.ENDPOINT_ERROR;\n        case 4:\n        case \"ENDPOINT_COMPLETE\":\n            return IngressState_Status.ENDPOINT_COMPLETE;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return IngressState_Status.UNRECOGNIZED;\n    }\n}\nexports.ingressState_StatusFromJSON = ingressState_StatusFromJSON;\nfunction ingressState_StatusToJSON(object) {\n    switch (object) {\n        case IngressState_Status.ENDPOINT_INACTIVE:\n            return \"ENDPOINT_INACTIVE\";\n        case IngressState_Status.ENDPOINT_BUFFERING:\n            return \"ENDPOINT_BUFFERING\";\n        case IngressState_Status.ENDPOINT_PUBLISHING:\n            return \"ENDPOINT_PUBLISHING\";\n        case IngressState_Status.ENDPOINT_ERROR:\n            return \"ENDPOINT_ERROR\";\n        case IngressState_Status.ENDPOINT_COMPLETE:\n            return \"ENDPOINT_COMPLETE\";\n        case IngressState_Status.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.ingressState_StatusToJSON = ingressState_StatusToJSON;\nfunction createBaseCreateIngressRequest() {\n    return {\n        inputType: 0,\n        url: \"\",\n        name: \"\",\n        roomName: \"\",\n        participantIdentity: \"\",\n        participantName: \"\",\n        bypassTranscoding: false,\n        audio: undefined,\n        video: undefined,\n    };\n}\nexports.CreateIngressRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.inputType !== undefined && message.inputType !== 0) {\n            writer.uint32(8).int32(message.inputType);\n        }\n        if (message.url !== undefined && message.url !== \"\") {\n            writer.uint32(74).string(message.url);\n        }\n        if (message.name !== undefined && message.name !== \"\") {\n            writer.uint32(18).string(message.name);\n        }\n        if (message.roomName !== undefined && message.roomName !== \"\") {\n            writer.uint32(26).string(message.roomName);\n        }\n        if (message.participantIdentity !== undefined && message.participantIdentity !== \"\") {\n            writer.uint32(34).string(message.participantIdentity);\n        }\n        if (message.participantName !== undefined && message.participantName !== \"\") {\n            writer.uint32(42).string(message.participantName);\n        }\n        if (message.bypassTranscoding === true) {\n            writer.uint32(64).bool(message.bypassTranscoding);\n        }\n        if (message.audio !== undefined) {\n            exports.IngressAudioOptions.encode(message.audio, writer.uint32(50).fork()).ldelim();\n        }\n        if (message.video !== undefined) {\n            exports.IngressVideoOptions.encode(message.video, writer.uint32(58).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseCreateIngressRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.inputType = reader.int32();\n                    break;\n                case 9:\n                    message.url = reader.string();\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 3:\n                    message.roomName = reader.string();\n                    break;\n                case 4:\n                    message.participantIdentity = reader.string();\n                    break;\n                case 5:\n                    message.participantName = reader.string();\n                    break;\n                case 8:\n                    message.bypassTranscoding = reader.bool();\n                    break;\n                case 6:\n                    message.audio = exports.IngressAudioOptions.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.video = exports.IngressVideoOptions.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            inputType: isSet(object.inputType) ? ingressInputFromJSON(object.inputType) : 0,\n            url: isSet(object.url) ? String(object.url) : \"\",\n            name: isSet(object.name) ? String(object.name) : \"\",\n            roomName: isSet(object.roomName) ? String(object.roomName) : \"\",\n            participantIdentity: isSet(object.participantIdentity) ? String(object.participantIdentity) : \"\",\n            participantName: isSet(object.participantName) ? String(object.participantName) : \"\",\n            bypassTranscoding: isSet(object.bypassTranscoding) ? Boolean(object.bypassTranscoding) : false,\n            audio: isSet(object.audio) ? exports.IngressAudioOptions.fromJSON(object.audio) : undefined,\n            video: isSet(object.video) ? exports.IngressVideoOptions.fromJSON(object.video) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.inputType !== undefined && (obj.inputType = ingressInputToJSON(message.inputType));\n        message.url !== undefined && (obj.url = message.url);\n        message.name !== undefined && (obj.name = message.name);\n        message.roomName !== undefined && (obj.roomName = message.roomName);\n        message.participantIdentity !== undefined && (obj.participantIdentity = message.participantIdentity);\n        message.participantName !== undefined && (obj.participantName = message.participantName);\n        message.bypassTranscoding !== undefined && (obj.bypassTranscoding = message.bypassTranscoding);\n        message.audio !== undefined && (obj.audio = message.audio ? exports.IngressAudioOptions.toJSON(message.audio) : undefined);\n        message.video !== undefined && (obj.video = message.video ? exports.IngressVideoOptions.toJSON(message.video) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const message = createBaseCreateIngressRequest();\n        message.inputType = (_a = object.inputType) !== null && _a !== void 0 ? _a : 0;\n        message.url = (_b = object.url) !== null && _b !== void 0 ? _b : \"\";\n        message.name = (_c = object.name) !== null && _c !== void 0 ? _c : \"\";\n        message.roomName = (_d = object.roomName) !== null && _d !== void 0 ? _d : \"\";\n        message.participantIdentity = (_e = object.participantIdentity) !== null && _e !== void 0 ? _e : \"\";\n        message.participantName = (_f = object.participantName) !== null && _f !== void 0 ? _f : \"\";\n        message.bypassTranscoding = (_g = object.bypassTranscoding) !== null && _g !== void 0 ? _g : false;\n        message.audio = (object.audio !== undefined && object.audio !== null)\n            ? exports.IngressAudioOptions.fromPartial(object.audio)\n            : undefined;\n        message.video = (object.video !== undefined && object.video !== null)\n            ? exports.IngressVideoOptions.fromPartial(object.video)\n            : undefined;\n        return message;\n    },\n};\nfunction createBaseIngressAudioOptions() {\n    return { name: \"\", source: 0, preset: undefined, options: undefined };\n}\nexports.IngressAudioOptions = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.name !== undefined && message.name !== \"\") {\n            writer.uint32(10).string(message.name);\n        }\n        if (message.source !== undefined && message.source !== 0) {\n            writer.uint32(16).int32(message.source);\n        }\n        if (message.preset !== undefined) {\n            writer.uint32(24).int32(message.preset);\n        }\n        if (message.options !== undefined) {\n            exports.IngressAudioEncodingOptions.encode(message.options, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseIngressAudioOptions();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.source = reader.int32();\n                    break;\n                case 3:\n                    message.preset = reader.int32();\n                    break;\n                case 4:\n                    message.options = exports.IngressAudioEncodingOptions.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            name: isSet(object.name) ? String(object.name) : \"\",\n            source: isSet(object.source) ? livekit_models_1.trackSourceFromJSON(object.source) : 0,\n            preset: isSet(object.preset) ? ingressAudioEncodingPresetFromJSON(object.preset) : undefined,\n            options: isSet(object.options) ? exports.IngressAudioEncodingOptions.fromJSON(object.options) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.name !== undefined && (obj.name = message.name);\n        message.source !== undefined && (obj.source = livekit_models_1.trackSourceToJSON(message.source));\n        message.preset !== undefined &&\n            (obj.preset = message.preset !== undefined ? ingressAudioEncodingPresetToJSON(message.preset) : undefined);\n        message.options !== undefined &&\n            (obj.options = message.options ? exports.IngressAudioEncodingOptions.toJSON(message.options) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseIngressAudioOptions();\n        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : \"\";\n        message.source = (_b = object.source) !== null && _b !== void 0 ? _b : 0;\n        message.preset = (_c = object.preset) !== null && _c !== void 0 ? _c : undefined;\n        message.options = (object.options !== undefined && object.options !== null)\n            ? exports.IngressAudioEncodingOptions.fromPartial(object.options)\n            : undefined;\n        return message;\n    },\n};\nfunction createBaseIngressVideoOptions() {\n    return { name: \"\", source: 0, preset: undefined, options: undefined };\n}\nexports.IngressVideoOptions = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.name !== undefined && message.name !== \"\") {\n            writer.uint32(10).string(message.name);\n        }\n        if (message.source !== undefined && message.source !== 0) {\n            writer.uint32(16).int32(message.source);\n        }\n        if (message.preset !== undefined) {\n            writer.uint32(24).int32(message.preset);\n        }\n        if (message.options !== undefined) {\n            exports.IngressVideoEncodingOptions.encode(message.options, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseIngressVideoOptions();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.source = reader.int32();\n                    break;\n                case 3:\n                    message.preset = reader.int32();\n                    break;\n                case 4:\n                    message.options = exports.IngressVideoEncodingOptions.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            name: isSet(object.name) ? String(object.name) : \"\",\n            source: isSet(object.source) ? livekit_models_1.trackSourceFromJSON(object.source) : 0,\n            preset: isSet(object.preset) ? ingressVideoEncodingPresetFromJSON(object.preset) : undefined,\n            options: isSet(object.options) ? exports.IngressVideoEncodingOptions.fromJSON(object.options) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.name !== undefined && (obj.name = message.name);\n        message.source !== undefined && (obj.source = livekit_models_1.trackSourceToJSON(message.source));\n        message.preset !== undefined &&\n            (obj.preset = message.preset !== undefined ? ingressVideoEncodingPresetToJSON(message.preset) : undefined);\n        message.options !== undefined &&\n            (obj.options = message.options ? exports.IngressVideoEncodingOptions.toJSON(message.options) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseIngressVideoOptions();\n        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : \"\";\n        message.source = (_b = object.source) !== null && _b !== void 0 ? _b : 0;\n        message.preset = (_c = object.preset) !== null && _c !== void 0 ? _c : undefined;\n        message.options = (object.options !== undefined && object.options !== null)\n            ? exports.IngressVideoEncodingOptions.fromPartial(object.options)\n            : undefined;\n        return message;\n    },\n};\nfunction createBaseIngressAudioEncodingOptions() {\n    return { audioCodec: 0, bitrate: 0, disableDtx: false, channels: 0 };\n}\nexports.IngressAudioEncodingOptions = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.audioCodec !== undefined && message.audioCodec !== 0) {\n            writer.uint32(8).int32(message.audioCodec);\n        }\n        if (message.bitrate !== undefined && message.bitrate !== 0) {\n            writer.uint32(16).uint32(message.bitrate);\n        }\n        if (message.disableDtx === true) {\n            writer.uint32(24).bool(message.disableDtx);\n        }\n        if (message.channels !== undefined && message.channels !== 0) {\n            writer.uint32(32).uint32(message.channels);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseIngressAudioEncodingOptions();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.audioCodec = reader.int32();\n                    break;\n                case 2:\n                    message.bitrate = reader.uint32();\n                    break;\n                case 3:\n                    message.disableDtx = reader.bool();\n                    break;\n                case 4:\n                    message.channels = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            audioCodec: isSet(object.audioCodec) ? livekit_models_1.audioCodecFromJSON(object.audioCodec) : 0,\n            bitrate: isSet(object.bitrate) ? Number(object.bitrate) : 0,\n            disableDtx: isSet(object.disableDtx) ? Boolean(object.disableDtx) : false,\n            channels: isSet(object.channels) ? Number(object.channels) : 0,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.audioCodec !== undefined && (obj.audioCodec = livekit_models_1.audioCodecToJSON(message.audioCodec));\n        message.bitrate !== undefined && (obj.bitrate = Math.round(message.bitrate));\n        message.disableDtx !== undefined && (obj.disableDtx = message.disableDtx);\n        message.channels !== undefined && (obj.channels = Math.round(message.channels));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d;\n        const message = createBaseIngressAudioEncodingOptions();\n        message.audioCodec = (_a = object.audioCodec) !== null && _a !== void 0 ? _a : 0;\n        message.bitrate = (_b = object.bitrate) !== null && _b !== void 0 ? _b : 0;\n        message.disableDtx = (_c = object.disableDtx) !== null && _c !== void 0 ? _c : false;\n        message.channels = (_d = object.channels) !== null && _d !== void 0 ? _d : 0;\n        return message;\n    },\n};\nfunction createBaseIngressVideoEncodingOptions() {\n    return { videoCodec: 0, frameRate: 0, layers: [] };\n}\nexports.IngressVideoEncodingOptions = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.videoCodec !== undefined && message.videoCodec !== 0) {\n            writer.uint32(8).int32(message.videoCodec);\n        }\n        if (message.frameRate !== undefined && message.frameRate !== 0) {\n            writer.uint32(17).double(message.frameRate);\n        }\n        if (message.layers !== undefined && message.layers.length !== 0) {\n            for (const v of message.layers) {\n                livekit_models_1.VideoLayer.encode(v, writer.uint32(26).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseIngressVideoEncodingOptions();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.videoCodec = reader.int32();\n                    break;\n                case 2:\n                    message.frameRate = reader.double();\n                    break;\n                case 3:\n                    message.layers.push(livekit_models_1.VideoLayer.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            videoCodec: isSet(object.videoCodec) ? livekit_models_1.videoCodecFromJSON(object.videoCodec) : 0,\n            frameRate: isSet(object.frameRate) ? Number(object.frameRate) : 0,\n            layers: Array.isArray(object === null || object === void 0 ? void 0 : object.layers) ? object.layers.map((e) => livekit_models_1.VideoLayer.fromJSON(e)) : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.videoCodec !== undefined && (obj.videoCodec = livekit_models_1.videoCodecToJSON(message.videoCodec));\n        message.frameRate !== undefined && (obj.frameRate = message.frameRate);\n        if (message.layers) {\n            obj.layers = message.layers.map((e) => e ? livekit_models_1.VideoLayer.toJSON(e) : undefined);\n        }\n        else {\n            obj.layers = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseIngressVideoEncodingOptions();\n        message.videoCodec = (_a = object.videoCodec) !== null && _a !== void 0 ? _a : 0;\n        message.frameRate = (_b = object.frameRate) !== null && _b !== void 0 ? _b : 0;\n        message.layers = ((_c = object.layers) === null || _c === void 0 ? void 0 : _c.map((e) => livekit_models_1.VideoLayer.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseIngressInfo() {\n    return {\n        ingressId: \"\",\n        name: \"\",\n        streamKey: \"\",\n        url: \"\",\n        inputType: 0,\n        bypassTranscoding: false,\n        audio: undefined,\n        video: undefined,\n        roomName: \"\",\n        participantIdentity: \"\",\n        participantName: \"\",\n        reusable: false,\n        state: undefined,\n    };\n}\nexports.IngressInfo = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.ingressId !== undefined && message.ingressId !== \"\") {\n            writer.uint32(10).string(message.ingressId);\n        }\n        if (message.name !== undefined && message.name !== \"\") {\n            writer.uint32(18).string(message.name);\n        }\n        if (message.streamKey !== undefined && message.streamKey !== \"\") {\n            writer.uint32(26).string(message.streamKey);\n        }\n        if (message.url !== undefined && message.url !== \"\") {\n            writer.uint32(34).string(message.url);\n        }\n        if (message.inputType !== undefined && message.inputType !== 0) {\n            writer.uint32(40).int32(message.inputType);\n        }\n        if (message.bypassTranscoding === true) {\n            writer.uint32(104).bool(message.bypassTranscoding);\n        }\n        if (message.audio !== undefined) {\n            exports.IngressAudioOptions.encode(message.audio, writer.uint32(50).fork()).ldelim();\n        }\n        if (message.video !== undefined) {\n            exports.IngressVideoOptions.encode(message.video, writer.uint32(58).fork()).ldelim();\n        }\n        if (message.roomName !== undefined && message.roomName !== \"\") {\n            writer.uint32(66).string(message.roomName);\n        }\n        if (message.participantIdentity !== undefined && message.participantIdentity !== \"\") {\n            writer.uint32(74).string(message.participantIdentity);\n        }\n        if (message.participantName !== undefined && message.participantName !== \"\") {\n            writer.uint32(82).string(message.participantName);\n        }\n        if (message.reusable === true) {\n            writer.uint32(88).bool(message.reusable);\n        }\n        if (message.state !== undefined) {\n            exports.IngressState.encode(message.state, writer.uint32(98).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseIngressInfo();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.ingressId = reader.string();\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 3:\n                    message.streamKey = reader.string();\n                    break;\n                case 4:\n                    message.url = reader.string();\n                    break;\n                case 5:\n                    message.inputType = reader.int32();\n                    break;\n                case 13:\n                    message.bypassTranscoding = reader.bool();\n                    break;\n                case 6:\n                    message.audio = exports.IngressAudioOptions.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.video = exports.IngressVideoOptions.decode(reader, reader.uint32());\n                    break;\n                case 8:\n                    message.roomName = reader.string();\n                    break;\n                case 9:\n                    message.participantIdentity = reader.string();\n                    break;\n                case 10:\n                    message.participantName = reader.string();\n                    break;\n                case 11:\n                    message.reusable = reader.bool();\n                    break;\n                case 12:\n                    message.state = exports.IngressState.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            ingressId: isSet(object.ingressId) ? String(object.ingressId) : \"\",\n            name: isSet(object.name) ? String(object.name) : \"\",\n            streamKey: isSet(object.streamKey) ? String(object.streamKey) : \"\",\n            url: isSet(object.url) ? String(object.url) : \"\",\n            inputType: isSet(object.inputType) ? ingressInputFromJSON(object.inputType) : 0,\n            bypassTranscoding: isSet(object.bypassTranscoding) ? Boolean(object.bypassTranscoding) : false,\n            audio: isSet(object.audio) ? exports.IngressAudioOptions.fromJSON(object.audio) : undefined,\n            video: isSet(object.video) ? exports.IngressVideoOptions.fromJSON(object.video) : undefined,\n            roomName: isSet(object.roomName) ? String(object.roomName) : \"\",\n            participantIdentity: isSet(object.participantIdentity) ? String(object.participantIdentity) : \"\",\n            participantName: isSet(object.participantName) ? String(object.participantName) : \"\",\n            reusable: isSet(object.reusable) ? Boolean(object.reusable) : false,\n            state: isSet(object.state) ? exports.IngressState.fromJSON(object.state) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.ingressId !== undefined && (obj.ingressId = message.ingressId);\n        message.name !== undefined && (obj.name = message.name);\n        message.streamKey !== undefined && (obj.streamKey = message.streamKey);\n        message.url !== undefined && (obj.url = message.url);\n        message.inputType !== undefined && (obj.inputType = ingressInputToJSON(message.inputType));\n        message.bypassTranscoding !== undefined && (obj.bypassTranscoding = message.bypassTranscoding);\n        message.audio !== undefined && (obj.audio = message.audio ? exports.IngressAudioOptions.toJSON(message.audio) : undefined);\n        message.video !== undefined && (obj.video = message.video ? exports.IngressVideoOptions.toJSON(message.video) : undefined);\n        message.roomName !== undefined && (obj.roomName = message.roomName);\n        message.participantIdentity !== undefined && (obj.participantIdentity = message.participantIdentity);\n        message.participantName !== undefined && (obj.participantName = message.participantName);\n        message.reusable !== undefined && (obj.reusable = message.reusable);\n        message.state !== undefined && (obj.state = message.state ? exports.IngressState.toJSON(message.state) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n        const message = createBaseIngressInfo();\n        message.ingressId = (_a = object.ingressId) !== null && _a !== void 0 ? _a : \"\";\n        message.name = (_b = object.name) !== null && _b !== void 0 ? _b : \"\";\n        message.streamKey = (_c = object.streamKey) !== null && _c !== void 0 ? _c : \"\";\n        message.url = (_d = object.url) !== null && _d !== void 0 ? _d : \"\";\n        message.inputType = (_e = object.inputType) !== null && _e !== void 0 ? _e : 0;\n        message.bypassTranscoding = (_f = object.bypassTranscoding) !== null && _f !== void 0 ? _f : false;\n        message.audio = (object.audio !== undefined && object.audio !== null)\n            ? exports.IngressAudioOptions.fromPartial(object.audio)\n            : undefined;\n        message.video = (object.video !== undefined && object.video !== null)\n            ? exports.IngressVideoOptions.fromPartial(object.video)\n            : undefined;\n        message.roomName = (_g = object.roomName) !== null && _g !== void 0 ? _g : \"\";\n        message.participantIdentity = (_h = object.participantIdentity) !== null && _h !== void 0 ? _h : \"\";\n        message.participantName = (_j = object.participantName) !== null && _j !== void 0 ? _j : \"\";\n        message.reusable = (_k = object.reusable) !== null && _k !== void 0 ? _k : false;\n        message.state = (object.state !== undefined && object.state !== null)\n            ? exports.IngressState.fromPartial(object.state)\n            : undefined;\n        return message;\n    },\n};\nfunction createBaseIngressState() {\n    return {\n        status: 0,\n        error: \"\",\n        video: undefined,\n        audio: undefined,\n        roomId: \"\",\n        startedAt: 0,\n        endedAt: 0,\n        resourceId: \"\",\n        tracks: [],\n    };\n}\nexports.IngressState = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.status !== undefined && message.status !== 0) {\n            writer.uint32(8).int32(message.status);\n        }\n        if (message.error !== undefined && message.error !== \"\") {\n            writer.uint32(18).string(message.error);\n        }\n        if (message.video !== undefined) {\n            exports.InputVideoState.encode(message.video, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.audio !== undefined) {\n            exports.InputAudioState.encode(message.audio, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.roomId !== undefined && message.roomId !== \"\") {\n            writer.uint32(42).string(message.roomId);\n        }\n        if (message.startedAt !== undefined && message.startedAt !== 0) {\n            writer.uint32(56).int64(message.startedAt);\n        }\n        if (message.endedAt !== undefined && message.endedAt !== 0) {\n            writer.uint32(64).int64(message.endedAt);\n        }\n        if (message.resourceId !== undefined && message.resourceId !== \"\") {\n            writer.uint32(74).string(message.resourceId);\n        }\n        if (message.tracks !== undefined && message.tracks.length !== 0) {\n            for (const v of message.tracks) {\n                livekit_models_1.TrackInfo.encode(v, writer.uint32(50).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseIngressState();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.status = reader.int32();\n                    break;\n                case 2:\n                    message.error = reader.string();\n                    break;\n                case 3:\n                    message.video = exports.InputVideoState.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.audio = exports.InputAudioState.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.roomId = reader.string();\n                    break;\n                case 7:\n                    message.startedAt = longToNumber(reader.int64());\n                    break;\n                case 8:\n                    message.endedAt = longToNumber(reader.int64());\n                    break;\n                case 9:\n                    message.resourceId = reader.string();\n                    break;\n                case 6:\n                    message.tracks.push(livekit_models_1.TrackInfo.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            status: isSet(object.status) ? ingressState_StatusFromJSON(object.status) : 0,\n            error: isSet(object.error) ? String(object.error) : \"\",\n            video: isSet(object.video) ? exports.InputVideoState.fromJSON(object.video) : undefined,\n            audio: isSet(object.audio) ? exports.InputAudioState.fromJSON(object.audio) : undefined,\n            roomId: isSet(object.roomId) ? String(object.roomId) : \"\",\n            startedAt: isSet(object.startedAt) ? Number(object.startedAt) : 0,\n            endedAt: isSet(object.endedAt) ? Number(object.endedAt) : 0,\n            resourceId: isSet(object.resourceId) ? String(object.resourceId) : \"\",\n            tracks: Array.isArray(object === null || object === void 0 ? void 0 : object.tracks) ? object.tracks.map((e) => livekit_models_1.TrackInfo.fromJSON(e)) : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.status !== undefined && (obj.status = ingressState_StatusToJSON(message.status));\n        message.error !== undefined && (obj.error = message.error);\n        message.video !== undefined && (obj.video = message.video ? exports.InputVideoState.toJSON(message.video) : undefined);\n        message.audio !== undefined && (obj.audio = message.audio ? exports.InputAudioState.toJSON(message.audio) : undefined);\n        message.roomId !== undefined && (obj.roomId = message.roomId);\n        message.startedAt !== undefined && (obj.startedAt = Math.round(message.startedAt));\n        message.endedAt !== undefined && (obj.endedAt = Math.round(message.endedAt));\n        message.resourceId !== undefined && (obj.resourceId = message.resourceId);\n        if (message.tracks) {\n            obj.tracks = message.tracks.map((e) => e ? livekit_models_1.TrackInfo.toJSON(e) : undefined);\n        }\n        else {\n            obj.tracks = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const message = createBaseIngressState();\n        message.status = (_a = object.status) !== null && _a !== void 0 ? _a : 0;\n        message.error = (_b = object.error) !== null && _b !== void 0 ? _b : \"\";\n        message.video = (object.video !== undefined && object.video !== null)\n            ? exports.InputVideoState.fromPartial(object.video)\n            : undefined;\n        message.audio = (object.audio !== undefined && object.audio !== null)\n            ? exports.InputAudioState.fromPartial(object.audio)\n            : undefined;\n        message.roomId = (_c = object.roomId) !== null && _c !== void 0 ? _c : \"\";\n        message.startedAt = (_d = object.startedAt) !== null && _d !== void 0 ? _d : 0;\n        message.endedAt = (_e = object.endedAt) !== null && _e !== void 0 ? _e : 0;\n        message.resourceId = (_f = object.resourceId) !== null && _f !== void 0 ? _f : \"\";\n        message.tracks = ((_g = object.tracks) === null || _g === void 0 ? void 0 : _g.map((e) => livekit_models_1.TrackInfo.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseInputVideoState() {\n    return { mimeType: \"\", averageBitrate: 0, width: 0, height: 0, framerate: 0 };\n}\nexports.InputVideoState = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.mimeType !== undefined && message.mimeType !== \"\") {\n            writer.uint32(10).string(message.mimeType);\n        }\n        if (message.averageBitrate !== undefined && message.averageBitrate !== 0) {\n            writer.uint32(16).uint32(message.averageBitrate);\n        }\n        if (message.width !== undefined && message.width !== 0) {\n            writer.uint32(24).uint32(message.width);\n        }\n        if (message.height !== undefined && message.height !== 0) {\n            writer.uint32(32).uint32(message.height);\n        }\n        if (message.framerate !== undefined && message.framerate !== 0) {\n            writer.uint32(41).double(message.framerate);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseInputVideoState();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.mimeType = reader.string();\n                    break;\n                case 2:\n                    message.averageBitrate = reader.uint32();\n                    break;\n                case 3:\n                    message.width = reader.uint32();\n                    break;\n                case 4:\n                    message.height = reader.uint32();\n                    break;\n                case 5:\n                    message.framerate = reader.double();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            mimeType: isSet(object.mimeType) ? String(object.mimeType) : \"\",\n            averageBitrate: isSet(object.averageBitrate) ? Number(object.averageBitrate) : 0,\n            width: isSet(object.width) ? Number(object.width) : 0,\n            height: isSet(object.height) ? Number(object.height) : 0,\n            framerate: isSet(object.framerate) ? Number(object.framerate) : 0,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.mimeType !== undefined && (obj.mimeType = message.mimeType);\n        message.averageBitrate !== undefined && (obj.averageBitrate = Math.round(message.averageBitrate));\n        message.width !== undefined && (obj.width = Math.round(message.width));\n        message.height !== undefined && (obj.height = Math.round(message.height));\n        message.framerate !== undefined && (obj.framerate = message.framerate);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e;\n        const message = createBaseInputVideoState();\n        message.mimeType = (_a = object.mimeType) !== null && _a !== void 0 ? _a : \"\";\n        message.averageBitrate = (_b = object.averageBitrate) !== null && _b !== void 0 ? _b : 0;\n        message.width = (_c = object.width) !== null && _c !== void 0 ? _c : 0;\n        message.height = (_d = object.height) !== null && _d !== void 0 ? _d : 0;\n        message.framerate = (_e = object.framerate) !== null && _e !== void 0 ? _e : 0;\n        return message;\n    },\n};\nfunction createBaseInputAudioState() {\n    return { mimeType: \"\", averageBitrate: 0, channels: 0, sampleRate: 0 };\n}\nexports.InputAudioState = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.mimeType !== undefined && message.mimeType !== \"\") {\n            writer.uint32(10).string(message.mimeType);\n        }\n        if (message.averageBitrate !== undefined && message.averageBitrate !== 0) {\n            writer.uint32(16).uint32(message.averageBitrate);\n        }\n        if (message.channels !== undefined && message.channels !== 0) {\n            writer.uint32(24).uint32(message.channels);\n        }\n        if (message.sampleRate !== undefined && message.sampleRate !== 0) {\n            writer.uint32(32).uint32(message.sampleRate);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseInputAudioState();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.mimeType = reader.string();\n                    break;\n                case 2:\n                    message.averageBitrate = reader.uint32();\n                    break;\n                case 3:\n                    message.channels = reader.uint32();\n                    break;\n                case 4:\n                    message.sampleRate = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            mimeType: isSet(object.mimeType) ? String(object.mimeType) : \"\",\n            averageBitrate: isSet(object.averageBitrate) ? Number(object.averageBitrate) : 0,\n            channels: isSet(object.channels) ? Number(object.channels) : 0,\n            sampleRate: isSet(object.sampleRate) ? Number(object.sampleRate) : 0,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.mimeType !== undefined && (obj.mimeType = message.mimeType);\n        message.averageBitrate !== undefined && (obj.averageBitrate = Math.round(message.averageBitrate));\n        message.channels !== undefined && (obj.channels = Math.round(message.channels));\n        message.sampleRate !== undefined && (obj.sampleRate = Math.round(message.sampleRate));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d;\n        const message = createBaseInputAudioState();\n        message.mimeType = (_a = object.mimeType) !== null && _a !== void 0 ? _a : \"\";\n        message.averageBitrate = (_b = object.averageBitrate) !== null && _b !== void 0 ? _b : 0;\n        message.channels = (_c = object.channels) !== null && _c !== void 0 ? _c : 0;\n        message.sampleRate = (_d = object.sampleRate) !== null && _d !== void 0 ? _d : 0;\n        return message;\n    },\n};\nfunction createBaseUpdateIngressRequest() {\n    return {\n        ingressId: \"\",\n        name: \"\",\n        roomName: \"\",\n        participantIdentity: \"\",\n        participantName: \"\",\n        bypassTranscoding: undefined,\n        audio: undefined,\n        video: undefined,\n    };\n}\nexports.UpdateIngressRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.ingressId !== undefined && message.ingressId !== \"\") {\n            writer.uint32(10).string(message.ingressId);\n        }\n        if (message.name !== undefined && message.name !== \"\") {\n            writer.uint32(18).string(message.name);\n        }\n        if (message.roomName !== undefined && message.roomName !== \"\") {\n            writer.uint32(26).string(message.roomName);\n        }\n        if (message.participantIdentity !== undefined && message.participantIdentity !== \"\") {\n            writer.uint32(34).string(message.participantIdentity);\n        }\n        if (message.participantName !== undefined && message.participantName !== \"\") {\n            writer.uint32(42).string(message.participantName);\n        }\n        if (message.bypassTranscoding !== undefined) {\n            writer.uint32(64).bool(message.bypassTranscoding);\n        }\n        if (message.audio !== undefined) {\n            exports.IngressAudioOptions.encode(message.audio, writer.uint32(50).fork()).ldelim();\n        }\n        if (message.video !== undefined) {\n            exports.IngressVideoOptions.encode(message.video, writer.uint32(58).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUpdateIngressRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.ingressId = reader.string();\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 3:\n                    message.roomName = reader.string();\n                    break;\n                case 4:\n                    message.participantIdentity = reader.string();\n                    break;\n                case 5:\n                    message.participantName = reader.string();\n                    break;\n                case 8:\n                    message.bypassTranscoding = reader.bool();\n                    break;\n                case 6:\n                    message.audio = exports.IngressAudioOptions.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.video = exports.IngressVideoOptions.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            ingressId: isSet(object.ingressId) ? String(object.ingressId) : \"\",\n            name: isSet(object.name) ? String(object.name) : \"\",\n            roomName: isSet(object.roomName) ? String(object.roomName) : \"\",\n            participantIdentity: isSet(object.participantIdentity) ? String(object.participantIdentity) : \"\",\n            participantName: isSet(object.participantName) ? String(object.participantName) : \"\",\n            bypassTranscoding: isSet(object.bypassTranscoding) ? Boolean(object.bypassTranscoding) : undefined,\n            audio: isSet(object.audio) ? exports.IngressAudioOptions.fromJSON(object.audio) : undefined,\n            video: isSet(object.video) ? exports.IngressVideoOptions.fromJSON(object.video) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.ingressId !== undefined && (obj.ingressId = message.ingressId);\n        message.name !== undefined && (obj.name = message.name);\n        message.roomName !== undefined && (obj.roomName = message.roomName);\n        message.participantIdentity !== undefined && (obj.participantIdentity = message.participantIdentity);\n        message.participantName !== undefined && (obj.participantName = message.participantName);\n        message.bypassTranscoding !== undefined && (obj.bypassTranscoding = message.bypassTranscoding);\n        message.audio !== undefined && (obj.audio = message.audio ? exports.IngressAudioOptions.toJSON(message.audio) : undefined);\n        message.video !== undefined && (obj.video = message.video ? exports.IngressVideoOptions.toJSON(message.video) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f;\n        const message = createBaseUpdateIngressRequest();\n        message.ingressId = (_a = object.ingressId) !== null && _a !== void 0 ? _a : \"\";\n        message.name = (_b = object.name) !== null && _b !== void 0 ? _b : \"\";\n        message.roomName = (_c = object.roomName) !== null && _c !== void 0 ? _c : \"\";\n        message.participantIdentity = (_d = object.participantIdentity) !== null && _d !== void 0 ? _d : \"\";\n        message.participantName = (_e = object.participantName) !== null && _e !== void 0 ? _e : \"\";\n        message.bypassTranscoding = (_f = object.bypassTranscoding) !== null && _f !== void 0 ? _f : undefined;\n        message.audio = (object.audio !== undefined && object.audio !== null)\n            ? exports.IngressAudioOptions.fromPartial(object.audio)\n            : undefined;\n        message.video = (object.video !== undefined && object.video !== null)\n            ? exports.IngressVideoOptions.fromPartial(object.video)\n            : undefined;\n        return message;\n    },\n};\nfunction createBaseListIngressRequest() {\n    return { roomName: \"\", ingressId: \"\" };\n}\nexports.ListIngressRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.roomName !== undefined && message.roomName !== \"\") {\n            writer.uint32(10).string(message.roomName);\n        }\n        if (message.ingressId !== undefined && message.ingressId !== \"\") {\n            writer.uint32(18).string(message.ingressId);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseListIngressRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.roomName = reader.string();\n                    break;\n                case 2:\n                    message.ingressId = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            roomName: isSet(object.roomName) ? String(object.roomName) : \"\",\n            ingressId: isSet(object.ingressId) ? String(object.ingressId) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.roomName !== undefined && (obj.roomName = message.roomName);\n        message.ingressId !== undefined && (obj.ingressId = message.ingressId);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseListIngressRequest();\n        message.roomName = (_a = object.roomName) !== null && _a !== void 0 ? _a : \"\";\n        message.ingressId = (_b = object.ingressId) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    },\n};\nfunction createBaseListIngressResponse() {\n    return { items: [] };\n}\nexports.ListIngressResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.items !== undefined && message.items.length !== 0) {\n            for (const v of message.items) {\n                exports.IngressInfo.encode(v, writer.uint32(10).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseListIngressResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.items.push(exports.IngressInfo.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return { items: Array.isArray(object === null || object === void 0 ? void 0 : object.items) ? object.items.map((e) => exports.IngressInfo.fromJSON(e)) : [] };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.items) {\n            obj.items = message.items.map((e) => e ? exports.IngressInfo.toJSON(e) : undefined);\n        }\n        else {\n            obj.items = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseListIngressResponse();\n        message.items = ((_a = object.items) === null || _a === void 0 ? void 0 : _a.map((e) => exports.IngressInfo.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseDeleteIngressRequest() {\n    return { ingressId: \"\" };\n}\nexports.DeleteIngressRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.ingressId !== undefined && message.ingressId !== \"\") {\n            writer.uint32(10).string(message.ingressId);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDeleteIngressRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.ingressId = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return { ingressId: isSet(object.ingressId) ? String(object.ingressId) : \"\" };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.ingressId !== undefined && (obj.ingressId = message.ingressId);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseDeleteIngressRequest();\n        message.ingressId = (_a = object.ingressId) !== null && _a !== void 0 ? _a : \"\";\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\") {\n        return globalThis;\n    }\n    if (typeof self !== \"undefined\") {\n        return self;\n    }\n    if (typeof window !== \"undefined\") {\n        return window;\n    }\n    if (typeof global !== \"undefined\") {\n        return global;\n    }\n    throw \"Unable to locate global object\";\n})();\nfunction longToNumber(long) {\n    if (long.gt(Number.MAX_SAFE_INTEGER)) {\n        throw new globalThis.Error(\"Value is larger than Number.MAX_SAFE_INTEGER\");\n    }\n    return long.toNumber();\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=livekit_ingress.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/livekit-server-sdk/dist/proto/livekit_ingress.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/livekit-server-sdk/dist/proto/livekit_models.js":
/*!**********************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/proto/livekit_models.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Room = exports.clientInfo_SDKToJSON = exports.clientInfo_SDKFromJSON = exports.ClientInfo_SDK = exports.serverInfo_EditionToJSON = exports.serverInfo_EditionFromJSON = exports.ServerInfo_Edition = exports.dataPacket_KindToJSON = exports.dataPacket_KindFromJSON = exports.DataPacket_Kind = exports.encryption_TypeToJSON = exports.encryption_TypeFromJSON = exports.Encryption_Type = exports.participantInfo_StateToJSON = exports.participantInfo_StateFromJSON = exports.ParticipantInfo_State = exports.subscriptionErrorToJSON = exports.subscriptionErrorFromJSON = exports.SubscriptionError = exports.reconnectReasonToJSON = exports.reconnectReasonFromJSON = exports.ReconnectReason = exports.disconnectReasonToJSON = exports.disconnectReasonFromJSON = exports.DisconnectReason = exports.clientConfigSettingToJSON = exports.clientConfigSettingFromJSON = exports.ClientConfigSetting = exports.connectionQualityToJSON = exports.connectionQualityFromJSON = exports.ConnectionQuality = exports.videoQualityToJSON = exports.videoQualityFromJSON = exports.VideoQuality = exports.trackSourceToJSON = exports.trackSourceFromJSON = exports.TrackSource = exports.trackTypeToJSON = exports.trackTypeFromJSON = exports.TrackType = exports.imageCodecToJSON = exports.imageCodecFromJSON = exports.ImageCodec = exports.videoCodecToJSON = exports.videoCodecFromJSON = exports.VideoCodec = exports.audioCodecToJSON = exports.audioCodecFromJSON = exports.AudioCodec = exports.protobufPackage = void 0;\nexports.TimedVersion = exports.RTPStats_GapHistogramEntry = exports.RTPStats = exports.RTPDrift = exports.DisabledCodecs = exports.VideoConfiguration = exports.ClientConfiguration = exports.ClientInfo = exports.ServerInfo = exports.ParticipantTracks = exports.UserPacket = exports.SpeakerInfo = exports.ActiveSpeakerUpdate = exports.DataPacket = exports.VideoLayer = exports.TrackInfo = exports.SimulcastCodecInfo = exports.Encryption = exports.ParticipantInfo = exports.ParticipantPermission = exports.PlayoutDelay = exports.Codec = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(__webpack_require__(/*! long */ \"(action-browser)/./node_modules/long/umd/index.js\"));\nconst minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ \"(action-browser)/./node_modules/protobufjs/minimal.js\"));\nconst timestamp_1 = __webpack_require__(/*! ./google/protobuf/timestamp */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/proto/google/protobuf/timestamp.js\");\nexports.protobufPackage = \"livekit\";\nvar AudioCodec;\n(function (AudioCodec) {\n    AudioCodec[AudioCodec[\"DEFAULT_AC\"] = 0] = \"DEFAULT_AC\";\n    AudioCodec[AudioCodec[\"OPUS\"] = 1] = \"OPUS\";\n    AudioCodec[AudioCodec[\"AAC\"] = 2] = \"AAC\";\n    AudioCodec[AudioCodec[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(AudioCodec = exports.AudioCodec || (exports.AudioCodec = {}));\nfunction audioCodecFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"DEFAULT_AC\":\n            return AudioCodec.DEFAULT_AC;\n        case 1:\n        case \"OPUS\":\n            return AudioCodec.OPUS;\n        case 2:\n        case \"AAC\":\n            return AudioCodec.AAC;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return AudioCodec.UNRECOGNIZED;\n    }\n}\nexports.audioCodecFromJSON = audioCodecFromJSON;\nfunction audioCodecToJSON(object) {\n    switch (object) {\n        case AudioCodec.DEFAULT_AC:\n            return \"DEFAULT_AC\";\n        case AudioCodec.OPUS:\n            return \"OPUS\";\n        case AudioCodec.AAC:\n            return \"AAC\";\n        case AudioCodec.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.audioCodecToJSON = audioCodecToJSON;\nvar VideoCodec;\n(function (VideoCodec) {\n    VideoCodec[VideoCodec[\"DEFAULT_VC\"] = 0] = \"DEFAULT_VC\";\n    VideoCodec[VideoCodec[\"H264_BASELINE\"] = 1] = \"H264_BASELINE\";\n    VideoCodec[VideoCodec[\"H264_MAIN\"] = 2] = \"H264_MAIN\";\n    VideoCodec[VideoCodec[\"H264_HIGH\"] = 3] = \"H264_HIGH\";\n    VideoCodec[VideoCodec[\"VP8\"] = 4] = \"VP8\";\n    VideoCodec[VideoCodec[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(VideoCodec = exports.VideoCodec || (exports.VideoCodec = {}));\nfunction videoCodecFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"DEFAULT_VC\":\n            return VideoCodec.DEFAULT_VC;\n        case 1:\n        case \"H264_BASELINE\":\n            return VideoCodec.H264_BASELINE;\n        case 2:\n        case \"H264_MAIN\":\n            return VideoCodec.H264_MAIN;\n        case 3:\n        case \"H264_HIGH\":\n            return VideoCodec.H264_HIGH;\n        case 4:\n        case \"VP8\":\n            return VideoCodec.VP8;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return VideoCodec.UNRECOGNIZED;\n    }\n}\nexports.videoCodecFromJSON = videoCodecFromJSON;\nfunction videoCodecToJSON(object) {\n    switch (object) {\n        case VideoCodec.DEFAULT_VC:\n            return \"DEFAULT_VC\";\n        case VideoCodec.H264_BASELINE:\n            return \"H264_BASELINE\";\n        case VideoCodec.H264_MAIN:\n            return \"H264_MAIN\";\n        case VideoCodec.H264_HIGH:\n            return \"H264_HIGH\";\n        case VideoCodec.VP8:\n            return \"VP8\";\n        case VideoCodec.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.videoCodecToJSON = videoCodecToJSON;\nvar ImageCodec;\n(function (ImageCodec) {\n    ImageCodec[ImageCodec[\"IC_DEFAULT\"] = 0] = \"IC_DEFAULT\";\n    ImageCodec[ImageCodec[\"IC_JPEG\"] = 1] = \"IC_JPEG\";\n    ImageCodec[ImageCodec[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(ImageCodec = exports.ImageCodec || (exports.ImageCodec = {}));\nfunction imageCodecFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"IC_DEFAULT\":\n            return ImageCodec.IC_DEFAULT;\n        case 1:\n        case \"IC_JPEG\":\n            return ImageCodec.IC_JPEG;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return ImageCodec.UNRECOGNIZED;\n    }\n}\nexports.imageCodecFromJSON = imageCodecFromJSON;\nfunction imageCodecToJSON(object) {\n    switch (object) {\n        case ImageCodec.IC_DEFAULT:\n            return \"IC_DEFAULT\";\n        case ImageCodec.IC_JPEG:\n            return \"IC_JPEG\";\n        case ImageCodec.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.imageCodecToJSON = imageCodecToJSON;\nvar TrackType;\n(function (TrackType) {\n    TrackType[TrackType[\"AUDIO\"] = 0] = \"AUDIO\";\n    TrackType[TrackType[\"VIDEO\"] = 1] = \"VIDEO\";\n    TrackType[TrackType[\"DATA\"] = 2] = \"DATA\";\n    TrackType[TrackType[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(TrackType = exports.TrackType || (exports.TrackType = {}));\nfunction trackTypeFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"AUDIO\":\n            return TrackType.AUDIO;\n        case 1:\n        case \"VIDEO\":\n            return TrackType.VIDEO;\n        case 2:\n        case \"DATA\":\n            return TrackType.DATA;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return TrackType.UNRECOGNIZED;\n    }\n}\nexports.trackTypeFromJSON = trackTypeFromJSON;\nfunction trackTypeToJSON(object) {\n    switch (object) {\n        case TrackType.AUDIO:\n            return \"AUDIO\";\n        case TrackType.VIDEO:\n            return \"VIDEO\";\n        case TrackType.DATA:\n            return \"DATA\";\n        case TrackType.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.trackTypeToJSON = trackTypeToJSON;\nvar TrackSource;\n(function (TrackSource) {\n    TrackSource[TrackSource[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    TrackSource[TrackSource[\"CAMERA\"] = 1] = \"CAMERA\";\n    TrackSource[TrackSource[\"MICROPHONE\"] = 2] = \"MICROPHONE\";\n    TrackSource[TrackSource[\"SCREEN_SHARE\"] = 3] = \"SCREEN_SHARE\";\n    TrackSource[TrackSource[\"SCREEN_SHARE_AUDIO\"] = 4] = \"SCREEN_SHARE_AUDIO\";\n    TrackSource[TrackSource[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(TrackSource = exports.TrackSource || (exports.TrackSource = {}));\nfunction trackSourceFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"UNKNOWN\":\n            return TrackSource.UNKNOWN;\n        case 1:\n        case \"CAMERA\":\n            return TrackSource.CAMERA;\n        case 2:\n        case \"MICROPHONE\":\n            return TrackSource.MICROPHONE;\n        case 3:\n        case \"SCREEN_SHARE\":\n            return TrackSource.SCREEN_SHARE;\n        case 4:\n        case \"SCREEN_SHARE_AUDIO\":\n            return TrackSource.SCREEN_SHARE_AUDIO;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return TrackSource.UNRECOGNIZED;\n    }\n}\nexports.trackSourceFromJSON = trackSourceFromJSON;\nfunction trackSourceToJSON(object) {\n    switch (object) {\n        case TrackSource.UNKNOWN:\n            return \"UNKNOWN\";\n        case TrackSource.CAMERA:\n            return \"CAMERA\";\n        case TrackSource.MICROPHONE:\n            return \"MICROPHONE\";\n        case TrackSource.SCREEN_SHARE:\n            return \"SCREEN_SHARE\";\n        case TrackSource.SCREEN_SHARE_AUDIO:\n            return \"SCREEN_SHARE_AUDIO\";\n        case TrackSource.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.trackSourceToJSON = trackSourceToJSON;\nvar VideoQuality;\n(function (VideoQuality) {\n    VideoQuality[VideoQuality[\"LOW\"] = 0] = \"LOW\";\n    VideoQuality[VideoQuality[\"MEDIUM\"] = 1] = \"MEDIUM\";\n    VideoQuality[VideoQuality[\"HIGH\"] = 2] = \"HIGH\";\n    VideoQuality[VideoQuality[\"OFF\"] = 3] = \"OFF\";\n    VideoQuality[VideoQuality[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(VideoQuality = exports.VideoQuality || (exports.VideoQuality = {}));\nfunction videoQualityFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"LOW\":\n            return VideoQuality.LOW;\n        case 1:\n        case \"MEDIUM\":\n            return VideoQuality.MEDIUM;\n        case 2:\n        case \"HIGH\":\n            return VideoQuality.HIGH;\n        case 3:\n        case \"OFF\":\n            return VideoQuality.OFF;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return VideoQuality.UNRECOGNIZED;\n    }\n}\nexports.videoQualityFromJSON = videoQualityFromJSON;\nfunction videoQualityToJSON(object) {\n    switch (object) {\n        case VideoQuality.LOW:\n            return \"LOW\";\n        case VideoQuality.MEDIUM:\n            return \"MEDIUM\";\n        case VideoQuality.HIGH:\n            return \"HIGH\";\n        case VideoQuality.OFF:\n            return \"OFF\";\n        case VideoQuality.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.videoQualityToJSON = videoQualityToJSON;\nvar ConnectionQuality;\n(function (ConnectionQuality) {\n    ConnectionQuality[ConnectionQuality[\"POOR\"] = 0] = \"POOR\";\n    ConnectionQuality[ConnectionQuality[\"GOOD\"] = 1] = \"GOOD\";\n    ConnectionQuality[ConnectionQuality[\"EXCELLENT\"] = 2] = \"EXCELLENT\";\n    ConnectionQuality[ConnectionQuality[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(ConnectionQuality = exports.ConnectionQuality || (exports.ConnectionQuality = {}));\nfunction connectionQualityFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"POOR\":\n            return ConnectionQuality.POOR;\n        case 1:\n        case \"GOOD\":\n            return ConnectionQuality.GOOD;\n        case 2:\n        case \"EXCELLENT\":\n            return ConnectionQuality.EXCELLENT;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return ConnectionQuality.UNRECOGNIZED;\n    }\n}\nexports.connectionQualityFromJSON = connectionQualityFromJSON;\nfunction connectionQualityToJSON(object) {\n    switch (object) {\n        case ConnectionQuality.POOR:\n            return \"POOR\";\n        case ConnectionQuality.GOOD:\n            return \"GOOD\";\n        case ConnectionQuality.EXCELLENT:\n            return \"EXCELLENT\";\n        case ConnectionQuality.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.connectionQualityToJSON = connectionQualityToJSON;\nvar ClientConfigSetting;\n(function (ClientConfigSetting) {\n    ClientConfigSetting[ClientConfigSetting[\"UNSET\"] = 0] = \"UNSET\";\n    ClientConfigSetting[ClientConfigSetting[\"DISABLED\"] = 1] = \"DISABLED\";\n    ClientConfigSetting[ClientConfigSetting[\"ENABLED\"] = 2] = \"ENABLED\";\n    ClientConfigSetting[ClientConfigSetting[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(ClientConfigSetting = exports.ClientConfigSetting || (exports.ClientConfigSetting = {}));\nfunction clientConfigSettingFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"UNSET\":\n            return ClientConfigSetting.UNSET;\n        case 1:\n        case \"DISABLED\":\n            return ClientConfigSetting.DISABLED;\n        case 2:\n        case \"ENABLED\":\n            return ClientConfigSetting.ENABLED;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return ClientConfigSetting.UNRECOGNIZED;\n    }\n}\nexports.clientConfigSettingFromJSON = clientConfigSettingFromJSON;\nfunction clientConfigSettingToJSON(object) {\n    switch (object) {\n        case ClientConfigSetting.UNSET:\n            return \"UNSET\";\n        case ClientConfigSetting.DISABLED:\n            return \"DISABLED\";\n        case ClientConfigSetting.ENABLED:\n            return \"ENABLED\";\n        case ClientConfigSetting.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.clientConfigSettingToJSON = clientConfigSettingToJSON;\nvar DisconnectReason;\n(function (DisconnectReason) {\n    DisconnectReason[DisconnectReason[\"UNKNOWN_REASON\"] = 0] = \"UNKNOWN_REASON\";\n    DisconnectReason[DisconnectReason[\"CLIENT_INITIATED\"] = 1] = \"CLIENT_INITIATED\";\n    DisconnectReason[DisconnectReason[\"DUPLICATE_IDENTITY\"] = 2] = \"DUPLICATE_IDENTITY\";\n    DisconnectReason[DisconnectReason[\"SERVER_SHUTDOWN\"] = 3] = \"SERVER_SHUTDOWN\";\n    DisconnectReason[DisconnectReason[\"PARTICIPANT_REMOVED\"] = 4] = \"PARTICIPANT_REMOVED\";\n    DisconnectReason[DisconnectReason[\"ROOM_DELETED\"] = 5] = \"ROOM_DELETED\";\n    DisconnectReason[DisconnectReason[\"STATE_MISMATCH\"] = 6] = \"STATE_MISMATCH\";\n    DisconnectReason[DisconnectReason[\"JOIN_FAILURE\"] = 7] = \"JOIN_FAILURE\";\n    DisconnectReason[DisconnectReason[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(DisconnectReason = exports.DisconnectReason || (exports.DisconnectReason = {}));\nfunction disconnectReasonFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"UNKNOWN_REASON\":\n            return DisconnectReason.UNKNOWN_REASON;\n        case 1:\n        case \"CLIENT_INITIATED\":\n            return DisconnectReason.CLIENT_INITIATED;\n        case 2:\n        case \"DUPLICATE_IDENTITY\":\n            return DisconnectReason.DUPLICATE_IDENTITY;\n        case 3:\n        case \"SERVER_SHUTDOWN\":\n            return DisconnectReason.SERVER_SHUTDOWN;\n        case 4:\n        case \"PARTICIPANT_REMOVED\":\n            return DisconnectReason.PARTICIPANT_REMOVED;\n        case 5:\n        case \"ROOM_DELETED\":\n            return DisconnectReason.ROOM_DELETED;\n        case 6:\n        case \"STATE_MISMATCH\":\n            return DisconnectReason.STATE_MISMATCH;\n        case 7:\n        case \"JOIN_FAILURE\":\n            return DisconnectReason.JOIN_FAILURE;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return DisconnectReason.UNRECOGNIZED;\n    }\n}\nexports.disconnectReasonFromJSON = disconnectReasonFromJSON;\nfunction disconnectReasonToJSON(object) {\n    switch (object) {\n        case DisconnectReason.UNKNOWN_REASON:\n            return \"UNKNOWN_REASON\";\n        case DisconnectReason.CLIENT_INITIATED:\n            return \"CLIENT_INITIATED\";\n        case DisconnectReason.DUPLICATE_IDENTITY:\n            return \"DUPLICATE_IDENTITY\";\n        case DisconnectReason.SERVER_SHUTDOWN:\n            return \"SERVER_SHUTDOWN\";\n        case DisconnectReason.PARTICIPANT_REMOVED:\n            return \"PARTICIPANT_REMOVED\";\n        case DisconnectReason.ROOM_DELETED:\n            return \"ROOM_DELETED\";\n        case DisconnectReason.STATE_MISMATCH:\n            return \"STATE_MISMATCH\";\n        case DisconnectReason.JOIN_FAILURE:\n            return \"JOIN_FAILURE\";\n        case DisconnectReason.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.disconnectReasonToJSON = disconnectReasonToJSON;\nvar ReconnectReason;\n(function (ReconnectReason) {\n    ReconnectReason[ReconnectReason[\"RR_UNKNOWN\"] = 0] = \"RR_UNKNOWN\";\n    ReconnectReason[ReconnectReason[\"RR_SIGNAL_DISCONNECTED\"] = 1] = \"RR_SIGNAL_DISCONNECTED\";\n    ReconnectReason[ReconnectReason[\"RR_PUBLISHER_FAILED\"] = 2] = \"RR_PUBLISHER_FAILED\";\n    ReconnectReason[ReconnectReason[\"RR_SUBSCRIBER_FAILED\"] = 3] = \"RR_SUBSCRIBER_FAILED\";\n    ReconnectReason[ReconnectReason[\"RR_SWITCH_CANDIDATE\"] = 4] = \"RR_SWITCH_CANDIDATE\";\n    ReconnectReason[ReconnectReason[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(ReconnectReason = exports.ReconnectReason || (exports.ReconnectReason = {}));\nfunction reconnectReasonFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"RR_UNKNOWN\":\n            return ReconnectReason.RR_UNKNOWN;\n        case 1:\n        case \"RR_SIGNAL_DISCONNECTED\":\n            return ReconnectReason.RR_SIGNAL_DISCONNECTED;\n        case 2:\n        case \"RR_PUBLISHER_FAILED\":\n            return ReconnectReason.RR_PUBLISHER_FAILED;\n        case 3:\n        case \"RR_SUBSCRIBER_FAILED\":\n            return ReconnectReason.RR_SUBSCRIBER_FAILED;\n        case 4:\n        case \"RR_SWITCH_CANDIDATE\":\n            return ReconnectReason.RR_SWITCH_CANDIDATE;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return ReconnectReason.UNRECOGNIZED;\n    }\n}\nexports.reconnectReasonFromJSON = reconnectReasonFromJSON;\nfunction reconnectReasonToJSON(object) {\n    switch (object) {\n        case ReconnectReason.RR_UNKNOWN:\n            return \"RR_UNKNOWN\";\n        case ReconnectReason.RR_SIGNAL_DISCONNECTED:\n            return \"RR_SIGNAL_DISCONNECTED\";\n        case ReconnectReason.RR_PUBLISHER_FAILED:\n            return \"RR_PUBLISHER_FAILED\";\n        case ReconnectReason.RR_SUBSCRIBER_FAILED:\n            return \"RR_SUBSCRIBER_FAILED\";\n        case ReconnectReason.RR_SWITCH_CANDIDATE:\n            return \"RR_SWITCH_CANDIDATE\";\n        case ReconnectReason.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.reconnectReasonToJSON = reconnectReasonToJSON;\nvar SubscriptionError;\n(function (SubscriptionError) {\n    SubscriptionError[SubscriptionError[\"SE_UNKNOWN\"] = 0] = \"SE_UNKNOWN\";\n    SubscriptionError[SubscriptionError[\"SE_CODEC_UNSUPPORTED\"] = 1] = \"SE_CODEC_UNSUPPORTED\";\n    SubscriptionError[SubscriptionError[\"SE_TRACK_NOTFOUND\"] = 2] = \"SE_TRACK_NOTFOUND\";\n    SubscriptionError[SubscriptionError[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(SubscriptionError = exports.SubscriptionError || (exports.SubscriptionError = {}));\nfunction subscriptionErrorFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"SE_UNKNOWN\":\n            return SubscriptionError.SE_UNKNOWN;\n        case 1:\n        case \"SE_CODEC_UNSUPPORTED\":\n            return SubscriptionError.SE_CODEC_UNSUPPORTED;\n        case 2:\n        case \"SE_TRACK_NOTFOUND\":\n            return SubscriptionError.SE_TRACK_NOTFOUND;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return SubscriptionError.UNRECOGNIZED;\n    }\n}\nexports.subscriptionErrorFromJSON = subscriptionErrorFromJSON;\nfunction subscriptionErrorToJSON(object) {\n    switch (object) {\n        case SubscriptionError.SE_UNKNOWN:\n            return \"SE_UNKNOWN\";\n        case SubscriptionError.SE_CODEC_UNSUPPORTED:\n            return \"SE_CODEC_UNSUPPORTED\";\n        case SubscriptionError.SE_TRACK_NOTFOUND:\n            return \"SE_TRACK_NOTFOUND\";\n        case SubscriptionError.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.subscriptionErrorToJSON = subscriptionErrorToJSON;\nvar ParticipantInfo_State;\n(function (ParticipantInfo_State) {\n    /** JOINING - websocket' connected, but not offered yet */\n    ParticipantInfo_State[ParticipantInfo_State[\"JOINING\"] = 0] = \"JOINING\";\n    /** JOINED - server received client offer */\n    ParticipantInfo_State[ParticipantInfo_State[\"JOINED\"] = 1] = \"JOINED\";\n    /** ACTIVE - ICE connectivity established */\n    ParticipantInfo_State[ParticipantInfo_State[\"ACTIVE\"] = 2] = \"ACTIVE\";\n    /** DISCONNECTED - WS disconnected */\n    ParticipantInfo_State[ParticipantInfo_State[\"DISCONNECTED\"] = 3] = \"DISCONNECTED\";\n    ParticipantInfo_State[ParticipantInfo_State[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(ParticipantInfo_State = exports.ParticipantInfo_State || (exports.ParticipantInfo_State = {}));\nfunction participantInfo_StateFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"JOINING\":\n            return ParticipantInfo_State.JOINING;\n        case 1:\n        case \"JOINED\":\n            return ParticipantInfo_State.JOINED;\n        case 2:\n        case \"ACTIVE\":\n            return ParticipantInfo_State.ACTIVE;\n        case 3:\n        case \"DISCONNECTED\":\n            return ParticipantInfo_State.DISCONNECTED;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return ParticipantInfo_State.UNRECOGNIZED;\n    }\n}\nexports.participantInfo_StateFromJSON = participantInfo_StateFromJSON;\nfunction participantInfo_StateToJSON(object) {\n    switch (object) {\n        case ParticipantInfo_State.JOINING:\n            return \"JOINING\";\n        case ParticipantInfo_State.JOINED:\n            return \"JOINED\";\n        case ParticipantInfo_State.ACTIVE:\n            return \"ACTIVE\";\n        case ParticipantInfo_State.DISCONNECTED:\n            return \"DISCONNECTED\";\n        case ParticipantInfo_State.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.participantInfo_StateToJSON = participantInfo_StateToJSON;\nvar Encryption_Type;\n(function (Encryption_Type) {\n    Encryption_Type[Encryption_Type[\"NONE\"] = 0] = \"NONE\";\n    Encryption_Type[Encryption_Type[\"GCM\"] = 1] = \"GCM\";\n    Encryption_Type[Encryption_Type[\"CUSTOM\"] = 2] = \"CUSTOM\";\n    Encryption_Type[Encryption_Type[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(Encryption_Type = exports.Encryption_Type || (exports.Encryption_Type = {}));\nfunction encryption_TypeFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"NONE\":\n            return Encryption_Type.NONE;\n        case 1:\n        case \"GCM\":\n            return Encryption_Type.GCM;\n        case 2:\n        case \"CUSTOM\":\n            return Encryption_Type.CUSTOM;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return Encryption_Type.UNRECOGNIZED;\n    }\n}\nexports.encryption_TypeFromJSON = encryption_TypeFromJSON;\nfunction encryption_TypeToJSON(object) {\n    switch (object) {\n        case Encryption_Type.NONE:\n            return \"NONE\";\n        case Encryption_Type.GCM:\n            return \"GCM\";\n        case Encryption_Type.CUSTOM:\n            return \"CUSTOM\";\n        case Encryption_Type.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.encryption_TypeToJSON = encryption_TypeToJSON;\nvar DataPacket_Kind;\n(function (DataPacket_Kind) {\n    DataPacket_Kind[DataPacket_Kind[\"RELIABLE\"] = 0] = \"RELIABLE\";\n    DataPacket_Kind[DataPacket_Kind[\"LOSSY\"] = 1] = \"LOSSY\";\n    DataPacket_Kind[DataPacket_Kind[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(DataPacket_Kind = exports.DataPacket_Kind || (exports.DataPacket_Kind = {}));\nfunction dataPacket_KindFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"RELIABLE\":\n            return DataPacket_Kind.RELIABLE;\n        case 1:\n        case \"LOSSY\":\n            return DataPacket_Kind.LOSSY;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return DataPacket_Kind.UNRECOGNIZED;\n    }\n}\nexports.dataPacket_KindFromJSON = dataPacket_KindFromJSON;\nfunction dataPacket_KindToJSON(object) {\n    switch (object) {\n        case DataPacket_Kind.RELIABLE:\n            return \"RELIABLE\";\n        case DataPacket_Kind.LOSSY:\n            return \"LOSSY\";\n        case DataPacket_Kind.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.dataPacket_KindToJSON = dataPacket_KindToJSON;\nvar ServerInfo_Edition;\n(function (ServerInfo_Edition) {\n    ServerInfo_Edition[ServerInfo_Edition[\"Standard\"] = 0] = \"Standard\";\n    ServerInfo_Edition[ServerInfo_Edition[\"Cloud\"] = 1] = \"Cloud\";\n    ServerInfo_Edition[ServerInfo_Edition[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(ServerInfo_Edition = exports.ServerInfo_Edition || (exports.ServerInfo_Edition = {}));\nfunction serverInfo_EditionFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"Standard\":\n            return ServerInfo_Edition.Standard;\n        case 1:\n        case \"Cloud\":\n            return ServerInfo_Edition.Cloud;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return ServerInfo_Edition.UNRECOGNIZED;\n    }\n}\nexports.serverInfo_EditionFromJSON = serverInfo_EditionFromJSON;\nfunction serverInfo_EditionToJSON(object) {\n    switch (object) {\n        case ServerInfo_Edition.Standard:\n            return \"Standard\";\n        case ServerInfo_Edition.Cloud:\n            return \"Cloud\";\n        case ServerInfo_Edition.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.serverInfo_EditionToJSON = serverInfo_EditionToJSON;\nvar ClientInfo_SDK;\n(function (ClientInfo_SDK) {\n    ClientInfo_SDK[ClientInfo_SDK[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    ClientInfo_SDK[ClientInfo_SDK[\"JS\"] = 1] = \"JS\";\n    ClientInfo_SDK[ClientInfo_SDK[\"SWIFT\"] = 2] = \"SWIFT\";\n    ClientInfo_SDK[ClientInfo_SDK[\"ANDROID\"] = 3] = \"ANDROID\";\n    ClientInfo_SDK[ClientInfo_SDK[\"FLUTTER\"] = 4] = \"FLUTTER\";\n    ClientInfo_SDK[ClientInfo_SDK[\"GO\"] = 5] = \"GO\";\n    ClientInfo_SDK[ClientInfo_SDK[\"UNITY\"] = 6] = \"UNITY\";\n    ClientInfo_SDK[ClientInfo_SDK[\"REACT_NATIVE\"] = 7] = \"REACT_NATIVE\";\n    ClientInfo_SDK[ClientInfo_SDK[\"RUST\"] = 8] = \"RUST\";\n    ClientInfo_SDK[ClientInfo_SDK[\"PYTHON\"] = 9] = \"PYTHON\";\n    ClientInfo_SDK[ClientInfo_SDK[\"CPP\"] = 10] = \"CPP\";\n    ClientInfo_SDK[ClientInfo_SDK[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(ClientInfo_SDK = exports.ClientInfo_SDK || (exports.ClientInfo_SDK = {}));\nfunction clientInfo_SDKFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"UNKNOWN\":\n            return ClientInfo_SDK.UNKNOWN;\n        case 1:\n        case \"JS\":\n            return ClientInfo_SDK.JS;\n        case 2:\n        case \"SWIFT\":\n            return ClientInfo_SDK.SWIFT;\n        case 3:\n        case \"ANDROID\":\n            return ClientInfo_SDK.ANDROID;\n        case 4:\n        case \"FLUTTER\":\n            return ClientInfo_SDK.FLUTTER;\n        case 5:\n        case \"GO\":\n            return ClientInfo_SDK.GO;\n        case 6:\n        case \"UNITY\":\n            return ClientInfo_SDK.UNITY;\n        case 7:\n        case \"REACT_NATIVE\":\n            return ClientInfo_SDK.REACT_NATIVE;\n        case 8:\n        case \"RUST\":\n            return ClientInfo_SDK.RUST;\n        case 9:\n        case \"PYTHON\":\n            return ClientInfo_SDK.PYTHON;\n        case 10:\n        case \"CPP\":\n            return ClientInfo_SDK.CPP;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return ClientInfo_SDK.UNRECOGNIZED;\n    }\n}\nexports.clientInfo_SDKFromJSON = clientInfo_SDKFromJSON;\nfunction clientInfo_SDKToJSON(object) {\n    switch (object) {\n        case ClientInfo_SDK.UNKNOWN:\n            return \"UNKNOWN\";\n        case ClientInfo_SDK.JS:\n            return \"JS\";\n        case ClientInfo_SDK.SWIFT:\n            return \"SWIFT\";\n        case ClientInfo_SDK.ANDROID:\n            return \"ANDROID\";\n        case ClientInfo_SDK.FLUTTER:\n            return \"FLUTTER\";\n        case ClientInfo_SDK.GO:\n            return \"GO\";\n        case ClientInfo_SDK.UNITY:\n            return \"UNITY\";\n        case ClientInfo_SDK.REACT_NATIVE:\n            return \"REACT_NATIVE\";\n        case ClientInfo_SDK.RUST:\n            return \"RUST\";\n        case ClientInfo_SDK.PYTHON:\n            return \"PYTHON\";\n        case ClientInfo_SDK.CPP:\n            return \"CPP\";\n        case ClientInfo_SDK.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.clientInfo_SDKToJSON = clientInfo_SDKToJSON;\nfunction createBaseRoom() {\n    return {\n        sid: \"\",\n        name: \"\",\n        emptyTimeout: 0,\n        maxParticipants: 0,\n        creationTime: 0,\n        turnPassword: \"\",\n        enabledCodecs: [],\n        metadata: \"\",\n        numParticipants: 0,\n        numPublishers: 0,\n        activeRecording: false,\n    };\n}\nexports.Room = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.sid !== \"\") {\n            writer.uint32(10).string(message.sid);\n        }\n        if (message.name !== \"\") {\n            writer.uint32(18).string(message.name);\n        }\n        if (message.emptyTimeout !== 0) {\n            writer.uint32(24).uint32(message.emptyTimeout);\n        }\n        if (message.maxParticipants !== 0) {\n            writer.uint32(32).uint32(message.maxParticipants);\n        }\n        if (message.creationTime !== 0) {\n            writer.uint32(40).int64(message.creationTime);\n        }\n        if (message.turnPassword !== \"\") {\n            writer.uint32(50).string(message.turnPassword);\n        }\n        for (const v of message.enabledCodecs) {\n            exports.Codec.encode(v, writer.uint32(58).fork()).ldelim();\n        }\n        if (message.metadata !== \"\") {\n            writer.uint32(66).string(message.metadata);\n        }\n        if (message.numParticipants !== 0) {\n            writer.uint32(72).uint32(message.numParticipants);\n        }\n        if (message.numPublishers !== 0) {\n            writer.uint32(88).uint32(message.numPublishers);\n        }\n        if (message.activeRecording === true) {\n            writer.uint32(80).bool(message.activeRecording);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseRoom();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.sid = reader.string();\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 3:\n                    message.emptyTimeout = reader.uint32();\n                    break;\n                case 4:\n                    message.maxParticipants = reader.uint32();\n                    break;\n                case 5:\n                    message.creationTime = longToNumber(reader.int64());\n                    break;\n                case 6:\n                    message.turnPassword = reader.string();\n                    break;\n                case 7:\n                    message.enabledCodecs.push(exports.Codec.decode(reader, reader.uint32()));\n                    break;\n                case 8:\n                    message.metadata = reader.string();\n                    break;\n                case 9:\n                    message.numParticipants = reader.uint32();\n                    break;\n                case 11:\n                    message.numPublishers = reader.uint32();\n                    break;\n                case 10:\n                    message.activeRecording = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            sid: isSet(object.sid) ? String(object.sid) : \"\",\n            name: isSet(object.name) ? String(object.name) : \"\",\n            emptyTimeout: isSet(object.emptyTimeout) ? Number(object.emptyTimeout) : 0,\n            maxParticipants: isSet(object.maxParticipants) ? Number(object.maxParticipants) : 0,\n            creationTime: isSet(object.creationTime) ? Number(object.creationTime) : 0,\n            turnPassword: isSet(object.turnPassword) ? String(object.turnPassword) : \"\",\n            enabledCodecs: Array.isArray(object === null || object === void 0 ? void 0 : object.enabledCodecs)\n                ? object.enabledCodecs.map((e) => exports.Codec.fromJSON(e))\n                : [],\n            metadata: isSet(object.metadata) ? String(object.metadata) : \"\",\n            numParticipants: isSet(object.numParticipants) ? Number(object.numParticipants) : 0,\n            numPublishers: isSet(object.numPublishers) ? Number(object.numPublishers) : 0,\n            activeRecording: isSet(object.activeRecording) ? Boolean(object.activeRecording) : false,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.sid !== undefined && (obj.sid = message.sid);\n        message.name !== undefined && (obj.name = message.name);\n        message.emptyTimeout !== undefined && (obj.emptyTimeout = Math.round(message.emptyTimeout));\n        message.maxParticipants !== undefined && (obj.maxParticipants = Math.round(message.maxParticipants));\n        message.creationTime !== undefined && (obj.creationTime = Math.round(message.creationTime));\n        message.turnPassword !== undefined && (obj.turnPassword = message.turnPassword);\n        if (message.enabledCodecs) {\n            obj.enabledCodecs = message.enabledCodecs.map((e) => e ? exports.Codec.toJSON(e) : undefined);\n        }\n        else {\n            obj.enabledCodecs = [];\n        }\n        message.metadata !== undefined && (obj.metadata = message.metadata);\n        message.numParticipants !== undefined && (obj.numParticipants = Math.round(message.numParticipants));\n        message.numPublishers !== undefined && (obj.numPublishers = Math.round(message.numPublishers));\n        message.activeRecording !== undefined && (obj.activeRecording = message.activeRecording);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n        const message = createBaseRoom();\n        message.sid = (_a = object.sid) !== null && _a !== void 0 ? _a : \"\";\n        message.name = (_b = object.name) !== null && _b !== void 0 ? _b : \"\";\n        message.emptyTimeout = (_c = object.emptyTimeout) !== null && _c !== void 0 ? _c : 0;\n        message.maxParticipants = (_d = object.maxParticipants) !== null && _d !== void 0 ? _d : 0;\n        message.creationTime = (_e = object.creationTime) !== null && _e !== void 0 ? _e : 0;\n        message.turnPassword = (_f = object.turnPassword) !== null && _f !== void 0 ? _f : \"\";\n        message.enabledCodecs = ((_g = object.enabledCodecs) === null || _g === void 0 ? void 0 : _g.map((e) => exports.Codec.fromPartial(e))) || [];\n        message.metadata = (_h = object.metadata) !== null && _h !== void 0 ? _h : \"\";\n        message.numParticipants = (_j = object.numParticipants) !== null && _j !== void 0 ? _j : 0;\n        message.numPublishers = (_k = object.numPublishers) !== null && _k !== void 0 ? _k : 0;\n        message.activeRecording = (_l = object.activeRecording) !== null && _l !== void 0 ? _l : false;\n        return message;\n    },\n};\nfunction createBaseCodec() {\n    return { mime: \"\", fmtpLine: \"\" };\n}\nexports.Codec = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.mime !== \"\") {\n            writer.uint32(10).string(message.mime);\n        }\n        if (message.fmtpLine !== \"\") {\n            writer.uint32(18).string(message.fmtpLine);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseCodec();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.mime = reader.string();\n                    break;\n                case 2:\n                    message.fmtpLine = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            mime: isSet(object.mime) ? String(object.mime) : \"\",\n            fmtpLine: isSet(object.fmtpLine) ? String(object.fmtpLine) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.mime !== undefined && (obj.mime = message.mime);\n        message.fmtpLine !== undefined && (obj.fmtpLine = message.fmtpLine);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseCodec();\n        message.mime = (_a = object.mime) !== null && _a !== void 0 ? _a : \"\";\n        message.fmtpLine = (_b = object.fmtpLine) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    },\n};\nfunction createBasePlayoutDelay() {\n    return { enabled: false, min: 0, max: 0 };\n}\nexports.PlayoutDelay = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.enabled === true) {\n            writer.uint32(8).bool(message.enabled);\n        }\n        if (message.min !== 0) {\n            writer.uint32(16).uint32(message.min);\n        }\n        if (message.max !== 0) {\n            writer.uint32(24).uint32(message.max);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePlayoutDelay();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.enabled = reader.bool();\n                    break;\n                case 2:\n                    message.min = reader.uint32();\n                    break;\n                case 3:\n                    message.max = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            enabled: isSet(object.enabled) ? Boolean(object.enabled) : false,\n            min: isSet(object.min) ? Number(object.min) : 0,\n            max: isSet(object.max) ? Number(object.max) : 0,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.enabled !== undefined && (obj.enabled = message.enabled);\n        message.min !== undefined && (obj.min = Math.round(message.min));\n        message.max !== undefined && (obj.max = Math.round(message.max));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBasePlayoutDelay();\n        message.enabled = (_a = object.enabled) !== null && _a !== void 0 ? _a : false;\n        message.min = (_b = object.min) !== null && _b !== void 0 ? _b : 0;\n        message.max = (_c = object.max) !== null && _c !== void 0 ? _c : 0;\n        return message;\n    },\n};\nfunction createBaseParticipantPermission() {\n    return {\n        canSubscribe: false,\n        canPublish: false,\n        canPublishData: false,\n        canPublishSources: [],\n        hidden: false,\n        recorder: false,\n        canUpdateMetadata: false,\n    };\n}\nexports.ParticipantPermission = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.canSubscribe === true) {\n            writer.uint32(8).bool(message.canSubscribe);\n        }\n        if (message.canPublish === true) {\n            writer.uint32(16).bool(message.canPublish);\n        }\n        if (message.canPublishData === true) {\n            writer.uint32(24).bool(message.canPublishData);\n        }\n        writer.uint32(74).fork();\n        for (const v of message.canPublishSources) {\n            writer.int32(v);\n        }\n        writer.ldelim();\n        if (message.hidden === true) {\n            writer.uint32(56).bool(message.hidden);\n        }\n        if (message.recorder === true) {\n            writer.uint32(64).bool(message.recorder);\n        }\n        if (message.canUpdateMetadata === true) {\n            writer.uint32(80).bool(message.canUpdateMetadata);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseParticipantPermission();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.canSubscribe = reader.bool();\n                    break;\n                case 2:\n                    message.canPublish = reader.bool();\n                    break;\n                case 3:\n                    message.canPublishData = reader.bool();\n                    break;\n                case 9:\n                    if ((tag & 7) === 2) {\n                        const end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2) {\n                            message.canPublishSources.push(reader.int32());\n                        }\n                    }\n                    else {\n                        message.canPublishSources.push(reader.int32());\n                    }\n                    break;\n                case 7:\n                    message.hidden = reader.bool();\n                    break;\n                case 8:\n                    message.recorder = reader.bool();\n                    break;\n                case 10:\n                    message.canUpdateMetadata = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            canSubscribe: isSet(object.canSubscribe) ? Boolean(object.canSubscribe) : false,\n            canPublish: isSet(object.canPublish) ? Boolean(object.canPublish) : false,\n            canPublishData: isSet(object.canPublishData) ? Boolean(object.canPublishData) : false,\n            canPublishSources: Array.isArray(object === null || object === void 0 ? void 0 : object.canPublishSources)\n                ? object.canPublishSources.map((e) => trackSourceFromJSON(e))\n                : [],\n            hidden: isSet(object.hidden) ? Boolean(object.hidden) : false,\n            recorder: isSet(object.recorder) ? Boolean(object.recorder) : false,\n            canUpdateMetadata: isSet(object.canUpdateMetadata) ? Boolean(object.canUpdateMetadata) : false,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.canSubscribe !== undefined && (obj.canSubscribe = message.canSubscribe);\n        message.canPublish !== undefined && (obj.canPublish = message.canPublish);\n        message.canPublishData !== undefined && (obj.canPublishData = message.canPublishData);\n        if (message.canPublishSources) {\n            obj.canPublishSources = message.canPublishSources.map((e) => trackSourceToJSON(e));\n        }\n        else {\n            obj.canPublishSources = [];\n        }\n        message.hidden !== undefined && (obj.hidden = message.hidden);\n        message.recorder !== undefined && (obj.recorder = message.recorder);\n        message.canUpdateMetadata !== undefined && (obj.canUpdateMetadata = message.canUpdateMetadata);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const message = createBaseParticipantPermission();\n        message.canSubscribe = (_a = object.canSubscribe) !== null && _a !== void 0 ? _a : false;\n        message.canPublish = (_b = object.canPublish) !== null && _b !== void 0 ? _b : false;\n        message.canPublishData = (_c = object.canPublishData) !== null && _c !== void 0 ? _c : false;\n        message.canPublishSources = ((_d = object.canPublishSources) === null || _d === void 0 ? void 0 : _d.map((e) => e)) || [];\n        message.hidden = (_e = object.hidden) !== null && _e !== void 0 ? _e : false;\n        message.recorder = (_f = object.recorder) !== null && _f !== void 0 ? _f : false;\n        message.canUpdateMetadata = (_g = object.canUpdateMetadata) !== null && _g !== void 0 ? _g : false;\n        return message;\n    },\n};\nfunction createBaseParticipantInfo() {\n    return {\n        sid: \"\",\n        identity: \"\",\n        state: 0,\n        tracks: [],\n        metadata: \"\",\n        joinedAt: 0,\n        name: \"\",\n        version: 0,\n        permission: undefined,\n        region: \"\",\n        isPublisher: false,\n    };\n}\nexports.ParticipantInfo = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.sid !== \"\") {\n            writer.uint32(10).string(message.sid);\n        }\n        if (message.identity !== \"\") {\n            writer.uint32(18).string(message.identity);\n        }\n        if (message.state !== 0) {\n            writer.uint32(24).int32(message.state);\n        }\n        for (const v of message.tracks) {\n            exports.TrackInfo.encode(v, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.metadata !== \"\") {\n            writer.uint32(42).string(message.metadata);\n        }\n        if (message.joinedAt !== 0) {\n            writer.uint32(48).int64(message.joinedAt);\n        }\n        if (message.name !== \"\") {\n            writer.uint32(74).string(message.name);\n        }\n        if (message.version !== 0) {\n            writer.uint32(80).uint32(message.version);\n        }\n        if (message.permission !== undefined) {\n            exports.ParticipantPermission.encode(message.permission, writer.uint32(90).fork()).ldelim();\n        }\n        if (message.region !== \"\") {\n            writer.uint32(98).string(message.region);\n        }\n        if (message.isPublisher === true) {\n            writer.uint32(104).bool(message.isPublisher);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseParticipantInfo();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.sid = reader.string();\n                    break;\n                case 2:\n                    message.identity = reader.string();\n                    break;\n                case 3:\n                    message.state = reader.int32();\n                    break;\n                case 4:\n                    message.tracks.push(exports.TrackInfo.decode(reader, reader.uint32()));\n                    break;\n                case 5:\n                    message.metadata = reader.string();\n                    break;\n                case 6:\n                    message.joinedAt = longToNumber(reader.int64());\n                    break;\n                case 9:\n                    message.name = reader.string();\n                    break;\n                case 10:\n                    message.version = reader.uint32();\n                    break;\n                case 11:\n                    message.permission = exports.ParticipantPermission.decode(reader, reader.uint32());\n                    break;\n                case 12:\n                    message.region = reader.string();\n                    break;\n                case 13:\n                    message.isPublisher = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            sid: isSet(object.sid) ? String(object.sid) : \"\",\n            identity: isSet(object.identity) ? String(object.identity) : \"\",\n            state: isSet(object.state) ? participantInfo_StateFromJSON(object.state) : 0,\n            tracks: Array.isArray(object === null || object === void 0 ? void 0 : object.tracks) ? object.tracks.map((e) => exports.TrackInfo.fromJSON(e)) : [],\n            metadata: isSet(object.metadata) ? String(object.metadata) : \"\",\n            joinedAt: isSet(object.joinedAt) ? Number(object.joinedAt) : 0,\n            name: isSet(object.name) ? String(object.name) : \"\",\n            version: isSet(object.version) ? Number(object.version) : 0,\n            permission: isSet(object.permission) ? exports.ParticipantPermission.fromJSON(object.permission) : undefined,\n            region: isSet(object.region) ? String(object.region) : \"\",\n            isPublisher: isSet(object.isPublisher) ? Boolean(object.isPublisher) : false,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.sid !== undefined && (obj.sid = message.sid);\n        message.identity !== undefined && (obj.identity = message.identity);\n        message.state !== undefined && (obj.state = participantInfo_StateToJSON(message.state));\n        if (message.tracks) {\n            obj.tracks = message.tracks.map((e) => e ? exports.TrackInfo.toJSON(e) : undefined);\n        }\n        else {\n            obj.tracks = [];\n        }\n        message.metadata !== undefined && (obj.metadata = message.metadata);\n        message.joinedAt !== undefined && (obj.joinedAt = Math.round(message.joinedAt));\n        message.name !== undefined && (obj.name = message.name);\n        message.version !== undefined && (obj.version = Math.round(message.version));\n        message.permission !== undefined &&\n            (obj.permission = message.permission ? exports.ParticipantPermission.toJSON(message.permission) : undefined);\n        message.region !== undefined && (obj.region = message.region);\n        message.isPublisher !== undefined && (obj.isPublisher = message.isPublisher);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n        const message = createBaseParticipantInfo();\n        message.sid = (_a = object.sid) !== null && _a !== void 0 ? _a : \"\";\n        message.identity = (_b = object.identity) !== null && _b !== void 0 ? _b : \"\";\n        message.state = (_c = object.state) !== null && _c !== void 0 ? _c : 0;\n        message.tracks = ((_d = object.tracks) === null || _d === void 0 ? void 0 : _d.map((e) => exports.TrackInfo.fromPartial(e))) || [];\n        message.metadata = (_e = object.metadata) !== null && _e !== void 0 ? _e : \"\";\n        message.joinedAt = (_f = object.joinedAt) !== null && _f !== void 0 ? _f : 0;\n        message.name = (_g = object.name) !== null && _g !== void 0 ? _g : \"\";\n        message.version = (_h = object.version) !== null && _h !== void 0 ? _h : 0;\n        message.permission = (object.permission !== undefined && object.permission !== null)\n            ? exports.ParticipantPermission.fromPartial(object.permission)\n            : undefined;\n        message.region = (_j = object.region) !== null && _j !== void 0 ? _j : \"\";\n        message.isPublisher = (_k = object.isPublisher) !== null && _k !== void 0 ? _k : false;\n        return message;\n    },\n};\nfunction createBaseEncryption() {\n    return {};\n}\nexports.Encryption = {\n    encode(_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseEncryption();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        return {};\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = createBaseEncryption();\n        return message;\n    },\n};\nfunction createBaseSimulcastCodecInfo() {\n    return { mimeType: \"\", mid: \"\", cid: \"\", layers: [] };\n}\nexports.SimulcastCodecInfo = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.mimeType !== \"\") {\n            writer.uint32(10).string(message.mimeType);\n        }\n        if (message.mid !== \"\") {\n            writer.uint32(18).string(message.mid);\n        }\n        if (message.cid !== \"\") {\n            writer.uint32(26).string(message.cid);\n        }\n        for (const v of message.layers) {\n            exports.VideoLayer.encode(v, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSimulcastCodecInfo();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.mimeType = reader.string();\n                    break;\n                case 2:\n                    message.mid = reader.string();\n                    break;\n                case 3:\n                    message.cid = reader.string();\n                    break;\n                case 4:\n                    message.layers.push(exports.VideoLayer.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            mimeType: isSet(object.mimeType) ? String(object.mimeType) : \"\",\n            mid: isSet(object.mid) ? String(object.mid) : \"\",\n            cid: isSet(object.cid) ? String(object.cid) : \"\",\n            layers: Array.isArray(object === null || object === void 0 ? void 0 : object.layers) ? object.layers.map((e) => exports.VideoLayer.fromJSON(e)) : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.mimeType !== undefined && (obj.mimeType = message.mimeType);\n        message.mid !== undefined && (obj.mid = message.mid);\n        message.cid !== undefined && (obj.cid = message.cid);\n        if (message.layers) {\n            obj.layers = message.layers.map((e) => e ? exports.VideoLayer.toJSON(e) : undefined);\n        }\n        else {\n            obj.layers = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d;\n        const message = createBaseSimulcastCodecInfo();\n        message.mimeType = (_a = object.mimeType) !== null && _a !== void 0 ? _a : \"\";\n        message.mid = (_b = object.mid) !== null && _b !== void 0 ? _b : \"\";\n        message.cid = (_c = object.cid) !== null && _c !== void 0 ? _c : \"\";\n        message.layers = ((_d = object.layers) === null || _d === void 0 ? void 0 : _d.map((e) => exports.VideoLayer.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseTrackInfo() {\n    return {\n        sid: \"\",\n        type: 0,\n        name: \"\",\n        muted: false,\n        width: 0,\n        height: 0,\n        simulcast: false,\n        disableDtx: false,\n        source: 0,\n        layers: [],\n        mimeType: \"\",\n        mid: \"\",\n        codecs: [],\n        stereo: false,\n        disableRed: false,\n        encryption: 0,\n        stream: \"\",\n    };\n}\nexports.TrackInfo = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.sid !== \"\") {\n            writer.uint32(10).string(message.sid);\n        }\n        if (message.type !== 0) {\n            writer.uint32(16).int32(message.type);\n        }\n        if (message.name !== \"\") {\n            writer.uint32(26).string(message.name);\n        }\n        if (message.muted === true) {\n            writer.uint32(32).bool(message.muted);\n        }\n        if (message.width !== 0) {\n            writer.uint32(40).uint32(message.width);\n        }\n        if (message.height !== 0) {\n            writer.uint32(48).uint32(message.height);\n        }\n        if (message.simulcast === true) {\n            writer.uint32(56).bool(message.simulcast);\n        }\n        if (message.disableDtx === true) {\n            writer.uint32(64).bool(message.disableDtx);\n        }\n        if (message.source !== 0) {\n            writer.uint32(72).int32(message.source);\n        }\n        for (const v of message.layers) {\n            exports.VideoLayer.encode(v, writer.uint32(82).fork()).ldelim();\n        }\n        if (message.mimeType !== \"\") {\n            writer.uint32(90).string(message.mimeType);\n        }\n        if (message.mid !== \"\") {\n            writer.uint32(98).string(message.mid);\n        }\n        for (const v of message.codecs) {\n            exports.SimulcastCodecInfo.encode(v, writer.uint32(106).fork()).ldelim();\n        }\n        if (message.stereo === true) {\n            writer.uint32(112).bool(message.stereo);\n        }\n        if (message.disableRed === true) {\n            writer.uint32(120).bool(message.disableRed);\n        }\n        if (message.encryption !== 0) {\n            writer.uint32(128).int32(message.encryption);\n        }\n        if (message.stream !== \"\") {\n            writer.uint32(138).string(message.stream);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTrackInfo();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.sid = reader.string();\n                    break;\n                case 2:\n                    message.type = reader.int32();\n                    break;\n                case 3:\n                    message.name = reader.string();\n                    break;\n                case 4:\n                    message.muted = reader.bool();\n                    break;\n                case 5:\n                    message.width = reader.uint32();\n                    break;\n                case 6:\n                    message.height = reader.uint32();\n                    break;\n                case 7:\n                    message.simulcast = reader.bool();\n                    break;\n                case 8:\n                    message.disableDtx = reader.bool();\n                    break;\n                case 9:\n                    message.source = reader.int32();\n                    break;\n                case 10:\n                    message.layers.push(exports.VideoLayer.decode(reader, reader.uint32()));\n                    break;\n                case 11:\n                    message.mimeType = reader.string();\n                    break;\n                case 12:\n                    message.mid = reader.string();\n                    break;\n                case 13:\n                    message.codecs.push(exports.SimulcastCodecInfo.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    message.stereo = reader.bool();\n                    break;\n                case 15:\n                    message.disableRed = reader.bool();\n                    break;\n                case 16:\n                    message.encryption = reader.int32();\n                    break;\n                case 17:\n                    message.stream = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            sid: isSet(object.sid) ? String(object.sid) : \"\",\n            type: isSet(object.type) ? trackTypeFromJSON(object.type) : 0,\n            name: isSet(object.name) ? String(object.name) : \"\",\n            muted: isSet(object.muted) ? Boolean(object.muted) : false,\n            width: isSet(object.width) ? Number(object.width) : 0,\n            height: isSet(object.height) ? Number(object.height) : 0,\n            simulcast: isSet(object.simulcast) ? Boolean(object.simulcast) : false,\n            disableDtx: isSet(object.disableDtx) ? Boolean(object.disableDtx) : false,\n            source: isSet(object.source) ? trackSourceFromJSON(object.source) : 0,\n            layers: Array.isArray(object === null || object === void 0 ? void 0 : object.layers) ? object.layers.map((e) => exports.VideoLayer.fromJSON(e)) : [],\n            mimeType: isSet(object.mimeType) ? String(object.mimeType) : \"\",\n            mid: isSet(object.mid) ? String(object.mid) : \"\",\n            codecs: Array.isArray(object === null || object === void 0 ? void 0 : object.codecs) ? object.codecs.map((e) => exports.SimulcastCodecInfo.fromJSON(e)) : [],\n            stereo: isSet(object.stereo) ? Boolean(object.stereo) : false,\n            disableRed: isSet(object.disableRed) ? Boolean(object.disableRed) : false,\n            encryption: isSet(object.encryption) ? encryption_TypeFromJSON(object.encryption) : 0,\n            stream: isSet(object.stream) ? String(object.stream) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.sid !== undefined && (obj.sid = message.sid);\n        message.type !== undefined && (obj.type = trackTypeToJSON(message.type));\n        message.name !== undefined && (obj.name = message.name);\n        message.muted !== undefined && (obj.muted = message.muted);\n        message.width !== undefined && (obj.width = Math.round(message.width));\n        message.height !== undefined && (obj.height = Math.round(message.height));\n        message.simulcast !== undefined && (obj.simulcast = message.simulcast);\n        message.disableDtx !== undefined && (obj.disableDtx = message.disableDtx);\n        message.source !== undefined && (obj.source = trackSourceToJSON(message.source));\n        if (message.layers) {\n            obj.layers = message.layers.map((e) => e ? exports.VideoLayer.toJSON(e) : undefined);\n        }\n        else {\n            obj.layers = [];\n        }\n        message.mimeType !== undefined && (obj.mimeType = message.mimeType);\n        message.mid !== undefined && (obj.mid = message.mid);\n        if (message.codecs) {\n            obj.codecs = message.codecs.map((e) => e ? exports.SimulcastCodecInfo.toJSON(e) : undefined);\n        }\n        else {\n            obj.codecs = [];\n        }\n        message.stereo !== undefined && (obj.stereo = message.stereo);\n        message.disableRed !== undefined && (obj.disableRed = message.disableRed);\n        message.encryption !== undefined && (obj.encryption = encryption_TypeToJSON(message.encryption));\n        message.stream !== undefined && (obj.stream = message.stream);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;\n        const message = createBaseTrackInfo();\n        message.sid = (_a = object.sid) !== null && _a !== void 0 ? _a : \"\";\n        message.type = (_b = object.type) !== null && _b !== void 0 ? _b : 0;\n        message.name = (_c = object.name) !== null && _c !== void 0 ? _c : \"\";\n        message.muted = (_d = object.muted) !== null && _d !== void 0 ? _d : false;\n        message.width = (_e = object.width) !== null && _e !== void 0 ? _e : 0;\n        message.height = (_f = object.height) !== null && _f !== void 0 ? _f : 0;\n        message.simulcast = (_g = object.simulcast) !== null && _g !== void 0 ? _g : false;\n        message.disableDtx = (_h = object.disableDtx) !== null && _h !== void 0 ? _h : false;\n        message.source = (_j = object.source) !== null && _j !== void 0 ? _j : 0;\n        message.layers = ((_k = object.layers) === null || _k === void 0 ? void 0 : _k.map((e) => exports.VideoLayer.fromPartial(e))) || [];\n        message.mimeType = (_l = object.mimeType) !== null && _l !== void 0 ? _l : \"\";\n        message.mid = (_m = object.mid) !== null && _m !== void 0 ? _m : \"\";\n        message.codecs = ((_o = object.codecs) === null || _o === void 0 ? void 0 : _o.map((e) => exports.SimulcastCodecInfo.fromPartial(e))) || [];\n        message.stereo = (_p = object.stereo) !== null && _p !== void 0 ? _p : false;\n        message.disableRed = (_q = object.disableRed) !== null && _q !== void 0 ? _q : false;\n        message.encryption = (_r = object.encryption) !== null && _r !== void 0 ? _r : 0;\n        message.stream = (_s = object.stream) !== null && _s !== void 0 ? _s : \"\";\n        return message;\n    },\n};\nfunction createBaseVideoLayer() {\n    return { quality: 0, width: 0, height: 0, bitrate: 0, ssrc: 0 };\n}\nexports.VideoLayer = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.quality !== 0) {\n            writer.uint32(8).int32(message.quality);\n        }\n        if (message.width !== 0) {\n            writer.uint32(16).uint32(message.width);\n        }\n        if (message.height !== 0) {\n            writer.uint32(24).uint32(message.height);\n        }\n        if (message.bitrate !== 0) {\n            writer.uint32(32).uint32(message.bitrate);\n        }\n        if (message.ssrc !== 0) {\n            writer.uint32(40).uint32(message.ssrc);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseVideoLayer();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.quality = reader.int32();\n                    break;\n                case 2:\n                    message.width = reader.uint32();\n                    break;\n                case 3:\n                    message.height = reader.uint32();\n                    break;\n                case 4:\n                    message.bitrate = reader.uint32();\n                    break;\n                case 5:\n                    message.ssrc = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            quality: isSet(object.quality) ? videoQualityFromJSON(object.quality) : 0,\n            width: isSet(object.width) ? Number(object.width) : 0,\n            height: isSet(object.height) ? Number(object.height) : 0,\n            bitrate: isSet(object.bitrate) ? Number(object.bitrate) : 0,\n            ssrc: isSet(object.ssrc) ? Number(object.ssrc) : 0,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.quality !== undefined && (obj.quality = videoQualityToJSON(message.quality));\n        message.width !== undefined && (obj.width = Math.round(message.width));\n        message.height !== undefined && (obj.height = Math.round(message.height));\n        message.bitrate !== undefined && (obj.bitrate = Math.round(message.bitrate));\n        message.ssrc !== undefined && (obj.ssrc = Math.round(message.ssrc));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e;\n        const message = createBaseVideoLayer();\n        message.quality = (_a = object.quality) !== null && _a !== void 0 ? _a : 0;\n        message.width = (_b = object.width) !== null && _b !== void 0 ? _b : 0;\n        message.height = (_c = object.height) !== null && _c !== void 0 ? _c : 0;\n        message.bitrate = (_d = object.bitrate) !== null && _d !== void 0 ? _d : 0;\n        message.ssrc = (_e = object.ssrc) !== null && _e !== void 0 ? _e : 0;\n        return message;\n    },\n};\nfunction createBaseDataPacket() {\n    return { kind: 0, user: undefined, speaker: undefined };\n}\nexports.DataPacket = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.kind !== 0) {\n            writer.uint32(8).int32(message.kind);\n        }\n        if (message.user !== undefined) {\n            exports.UserPacket.encode(message.user, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.speaker !== undefined) {\n            exports.ActiveSpeakerUpdate.encode(message.speaker, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDataPacket();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.kind = reader.int32();\n                    break;\n                case 2:\n                    message.user = exports.UserPacket.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.speaker = exports.ActiveSpeakerUpdate.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            kind: isSet(object.kind) ? dataPacket_KindFromJSON(object.kind) : 0,\n            user: isSet(object.user) ? exports.UserPacket.fromJSON(object.user) : undefined,\n            speaker: isSet(object.speaker) ? exports.ActiveSpeakerUpdate.fromJSON(object.speaker) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.kind !== undefined && (obj.kind = dataPacket_KindToJSON(message.kind));\n        message.user !== undefined && (obj.user = message.user ? exports.UserPacket.toJSON(message.user) : undefined);\n        message.speaker !== undefined &&\n            (obj.speaker = message.speaker ? exports.ActiveSpeakerUpdate.toJSON(message.speaker) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseDataPacket();\n        message.kind = (_a = object.kind) !== null && _a !== void 0 ? _a : 0;\n        message.user = (object.user !== undefined && object.user !== null)\n            ? exports.UserPacket.fromPartial(object.user)\n            : undefined;\n        message.speaker = (object.speaker !== undefined && object.speaker !== null)\n            ? exports.ActiveSpeakerUpdate.fromPartial(object.speaker)\n            : undefined;\n        return message;\n    },\n};\nfunction createBaseActiveSpeakerUpdate() {\n    return { speakers: [] };\n}\nexports.ActiveSpeakerUpdate = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        for (const v of message.speakers) {\n            exports.SpeakerInfo.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseActiveSpeakerUpdate();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.speakers.push(exports.SpeakerInfo.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            speakers: Array.isArray(object === null || object === void 0 ? void 0 : object.speakers) ? object.speakers.map((e) => exports.SpeakerInfo.fromJSON(e)) : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.speakers) {\n            obj.speakers = message.speakers.map((e) => e ? exports.SpeakerInfo.toJSON(e) : undefined);\n        }\n        else {\n            obj.speakers = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseActiveSpeakerUpdate();\n        message.speakers = ((_a = object.speakers) === null || _a === void 0 ? void 0 : _a.map((e) => exports.SpeakerInfo.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseSpeakerInfo() {\n    return { sid: \"\", level: 0, active: false };\n}\nexports.SpeakerInfo = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.sid !== \"\") {\n            writer.uint32(10).string(message.sid);\n        }\n        if (message.level !== 0) {\n            writer.uint32(21).float(message.level);\n        }\n        if (message.active === true) {\n            writer.uint32(24).bool(message.active);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSpeakerInfo();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.sid = reader.string();\n                    break;\n                case 2:\n                    message.level = reader.float();\n                    break;\n                case 3:\n                    message.active = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            sid: isSet(object.sid) ? String(object.sid) : \"\",\n            level: isSet(object.level) ? Number(object.level) : 0,\n            active: isSet(object.active) ? Boolean(object.active) : false,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.sid !== undefined && (obj.sid = message.sid);\n        message.level !== undefined && (obj.level = message.level);\n        message.active !== undefined && (obj.active = message.active);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseSpeakerInfo();\n        message.sid = (_a = object.sid) !== null && _a !== void 0 ? _a : \"\";\n        message.level = (_b = object.level) !== null && _b !== void 0 ? _b : 0;\n        message.active = (_c = object.active) !== null && _c !== void 0 ? _c : false;\n        return message;\n    },\n};\nfunction createBaseUserPacket() {\n    return {\n        participantSid: \"\",\n        participantIdentity: \"\",\n        payload: new Uint8Array(),\n        destinationSids: [],\n        destinationIdentities: [],\n        topic: undefined,\n    };\n}\nexports.UserPacket = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.participantSid !== \"\") {\n            writer.uint32(10).string(message.participantSid);\n        }\n        if (message.participantIdentity !== \"\") {\n            writer.uint32(42).string(message.participantIdentity);\n        }\n        if (message.payload.length !== 0) {\n            writer.uint32(18).bytes(message.payload);\n        }\n        for (const v of message.destinationSids) {\n            writer.uint32(26).string(v);\n        }\n        for (const v of message.destinationIdentities) {\n            writer.uint32(50).string(v);\n        }\n        if (message.topic !== undefined) {\n            writer.uint32(34).string(message.topic);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUserPacket();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.participantSid = reader.string();\n                    break;\n                case 5:\n                    message.participantIdentity = reader.string();\n                    break;\n                case 2:\n                    message.payload = reader.bytes();\n                    break;\n                case 3:\n                    message.destinationSids.push(reader.string());\n                    break;\n                case 6:\n                    message.destinationIdentities.push(reader.string());\n                    break;\n                case 4:\n                    message.topic = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            participantSid: isSet(object.participantSid) ? String(object.participantSid) : \"\",\n            participantIdentity: isSet(object.participantIdentity) ? String(object.participantIdentity) : \"\",\n            payload: isSet(object.payload) ? bytesFromBase64(object.payload) : new Uint8Array(),\n            destinationSids: Array.isArray(object === null || object === void 0 ? void 0 : object.destinationSids) ? object.destinationSids.map((e) => String(e)) : [],\n            destinationIdentities: Array.isArray(object === null || object === void 0 ? void 0 : object.destinationIdentities)\n                ? object.destinationIdentities.map((e) => String(e))\n                : [],\n            topic: isSet(object.topic) ? String(object.topic) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.participantSid !== undefined && (obj.participantSid = message.participantSid);\n        message.participantIdentity !== undefined && (obj.participantIdentity = message.participantIdentity);\n        message.payload !== undefined &&\n            (obj.payload = base64FromBytes(message.payload !== undefined ? message.payload : new Uint8Array()));\n        if (message.destinationSids) {\n            obj.destinationSids = message.destinationSids.map((e) => e);\n        }\n        else {\n            obj.destinationSids = [];\n        }\n        if (message.destinationIdentities) {\n            obj.destinationIdentities = message.destinationIdentities.map((e) => e);\n        }\n        else {\n            obj.destinationIdentities = [];\n        }\n        message.topic !== undefined && (obj.topic = message.topic);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f;\n        const message = createBaseUserPacket();\n        message.participantSid = (_a = object.participantSid) !== null && _a !== void 0 ? _a : \"\";\n        message.participantIdentity = (_b = object.participantIdentity) !== null && _b !== void 0 ? _b : \"\";\n        message.payload = (_c = object.payload) !== null && _c !== void 0 ? _c : new Uint8Array();\n        message.destinationSids = ((_d = object.destinationSids) === null || _d === void 0 ? void 0 : _d.map((e) => e)) || [];\n        message.destinationIdentities = ((_e = object.destinationIdentities) === null || _e === void 0 ? void 0 : _e.map((e) => e)) || [];\n        message.topic = (_f = object.topic) !== null && _f !== void 0 ? _f : undefined;\n        return message;\n    },\n};\nfunction createBaseParticipantTracks() {\n    return { participantSid: \"\", trackSids: [] };\n}\nexports.ParticipantTracks = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.participantSid !== \"\") {\n            writer.uint32(10).string(message.participantSid);\n        }\n        for (const v of message.trackSids) {\n            writer.uint32(18).string(v);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseParticipantTracks();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.participantSid = reader.string();\n                    break;\n                case 2:\n                    message.trackSids.push(reader.string());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            participantSid: isSet(object.participantSid) ? String(object.participantSid) : \"\",\n            trackSids: Array.isArray(object === null || object === void 0 ? void 0 : object.trackSids) ? object.trackSids.map((e) => String(e)) : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.participantSid !== undefined && (obj.participantSid = message.participantSid);\n        if (message.trackSids) {\n            obj.trackSids = message.trackSids.map((e) => e);\n        }\n        else {\n            obj.trackSids = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseParticipantTracks();\n        message.participantSid = (_a = object.participantSid) !== null && _a !== void 0 ? _a : \"\";\n        message.trackSids = ((_b = object.trackSids) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];\n        return message;\n    },\n};\nfunction createBaseServerInfo() {\n    return { edition: 0, version: \"\", protocol: 0, region: \"\", nodeId: \"\", debugInfo: \"\" };\n}\nexports.ServerInfo = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.edition !== 0) {\n            writer.uint32(8).int32(message.edition);\n        }\n        if (message.version !== \"\") {\n            writer.uint32(18).string(message.version);\n        }\n        if (message.protocol !== 0) {\n            writer.uint32(24).int32(message.protocol);\n        }\n        if (message.region !== \"\") {\n            writer.uint32(34).string(message.region);\n        }\n        if (message.nodeId !== \"\") {\n            writer.uint32(42).string(message.nodeId);\n        }\n        if (message.debugInfo !== \"\") {\n            writer.uint32(50).string(message.debugInfo);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseServerInfo();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.edition = reader.int32();\n                    break;\n                case 2:\n                    message.version = reader.string();\n                    break;\n                case 3:\n                    message.protocol = reader.int32();\n                    break;\n                case 4:\n                    message.region = reader.string();\n                    break;\n                case 5:\n                    message.nodeId = reader.string();\n                    break;\n                case 6:\n                    message.debugInfo = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            edition: isSet(object.edition) ? serverInfo_EditionFromJSON(object.edition) : 0,\n            version: isSet(object.version) ? String(object.version) : \"\",\n            protocol: isSet(object.protocol) ? Number(object.protocol) : 0,\n            region: isSet(object.region) ? String(object.region) : \"\",\n            nodeId: isSet(object.nodeId) ? String(object.nodeId) : \"\",\n            debugInfo: isSet(object.debugInfo) ? String(object.debugInfo) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.edition !== undefined && (obj.edition = serverInfo_EditionToJSON(message.edition));\n        message.version !== undefined && (obj.version = message.version);\n        message.protocol !== undefined && (obj.protocol = Math.round(message.protocol));\n        message.region !== undefined && (obj.region = message.region);\n        message.nodeId !== undefined && (obj.nodeId = message.nodeId);\n        message.debugInfo !== undefined && (obj.debugInfo = message.debugInfo);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f;\n        const message = createBaseServerInfo();\n        message.edition = (_a = object.edition) !== null && _a !== void 0 ? _a : 0;\n        message.version = (_b = object.version) !== null && _b !== void 0 ? _b : \"\";\n        message.protocol = (_c = object.protocol) !== null && _c !== void 0 ? _c : 0;\n        message.region = (_d = object.region) !== null && _d !== void 0 ? _d : \"\";\n        message.nodeId = (_e = object.nodeId) !== null && _e !== void 0 ? _e : \"\";\n        message.debugInfo = (_f = object.debugInfo) !== null && _f !== void 0 ? _f : \"\";\n        return message;\n    },\n};\nfunction createBaseClientInfo() {\n    return {\n        sdk: 0,\n        version: \"\",\n        protocol: 0,\n        os: \"\",\n        osVersion: \"\",\n        deviceModel: \"\",\n        browser: \"\",\n        browserVersion: \"\",\n        address: \"\",\n        network: \"\",\n    };\n}\nexports.ClientInfo = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.sdk !== 0) {\n            writer.uint32(8).int32(message.sdk);\n        }\n        if (message.version !== \"\") {\n            writer.uint32(18).string(message.version);\n        }\n        if (message.protocol !== 0) {\n            writer.uint32(24).int32(message.protocol);\n        }\n        if (message.os !== \"\") {\n            writer.uint32(34).string(message.os);\n        }\n        if (message.osVersion !== \"\") {\n            writer.uint32(42).string(message.osVersion);\n        }\n        if (message.deviceModel !== \"\") {\n            writer.uint32(50).string(message.deviceModel);\n        }\n        if (message.browser !== \"\") {\n            writer.uint32(58).string(message.browser);\n        }\n        if (message.browserVersion !== \"\") {\n            writer.uint32(66).string(message.browserVersion);\n        }\n        if (message.address !== \"\") {\n            writer.uint32(74).string(message.address);\n        }\n        if (message.network !== \"\") {\n            writer.uint32(82).string(message.network);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseClientInfo();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.sdk = reader.int32();\n                    break;\n                case 2:\n                    message.version = reader.string();\n                    break;\n                case 3:\n                    message.protocol = reader.int32();\n                    break;\n                case 4:\n                    message.os = reader.string();\n                    break;\n                case 5:\n                    message.osVersion = reader.string();\n                    break;\n                case 6:\n                    message.deviceModel = reader.string();\n                    break;\n                case 7:\n                    message.browser = reader.string();\n                    break;\n                case 8:\n                    message.browserVersion = reader.string();\n                    break;\n                case 9:\n                    message.address = reader.string();\n                    break;\n                case 10:\n                    message.network = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            sdk: isSet(object.sdk) ? clientInfo_SDKFromJSON(object.sdk) : 0,\n            version: isSet(object.version) ? String(object.version) : \"\",\n            protocol: isSet(object.protocol) ? Number(object.protocol) : 0,\n            os: isSet(object.os) ? String(object.os) : \"\",\n            osVersion: isSet(object.osVersion) ? String(object.osVersion) : \"\",\n            deviceModel: isSet(object.deviceModel) ? String(object.deviceModel) : \"\",\n            browser: isSet(object.browser) ? String(object.browser) : \"\",\n            browserVersion: isSet(object.browserVersion) ? String(object.browserVersion) : \"\",\n            address: isSet(object.address) ? String(object.address) : \"\",\n            network: isSet(object.network) ? String(object.network) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.sdk !== undefined && (obj.sdk = clientInfo_SDKToJSON(message.sdk));\n        message.version !== undefined && (obj.version = message.version);\n        message.protocol !== undefined && (obj.protocol = Math.round(message.protocol));\n        message.os !== undefined && (obj.os = message.os);\n        message.osVersion !== undefined && (obj.osVersion = message.osVersion);\n        message.deviceModel !== undefined && (obj.deviceModel = message.deviceModel);\n        message.browser !== undefined && (obj.browser = message.browser);\n        message.browserVersion !== undefined && (obj.browserVersion = message.browserVersion);\n        message.address !== undefined && (obj.address = message.address);\n        message.network !== undefined && (obj.network = message.network);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n        const message = createBaseClientInfo();\n        message.sdk = (_a = object.sdk) !== null && _a !== void 0 ? _a : 0;\n        message.version = (_b = object.version) !== null && _b !== void 0 ? _b : \"\";\n        message.protocol = (_c = object.protocol) !== null && _c !== void 0 ? _c : 0;\n        message.os = (_d = object.os) !== null && _d !== void 0 ? _d : \"\";\n        message.osVersion = (_e = object.osVersion) !== null && _e !== void 0 ? _e : \"\";\n        message.deviceModel = (_f = object.deviceModel) !== null && _f !== void 0 ? _f : \"\";\n        message.browser = (_g = object.browser) !== null && _g !== void 0 ? _g : \"\";\n        message.browserVersion = (_h = object.browserVersion) !== null && _h !== void 0 ? _h : \"\";\n        message.address = (_j = object.address) !== null && _j !== void 0 ? _j : \"\";\n        message.network = (_k = object.network) !== null && _k !== void 0 ? _k : \"\";\n        return message;\n    },\n};\nfunction createBaseClientConfiguration() {\n    return { video: undefined, screen: undefined, resumeConnection: 0, disabledCodecs: undefined, forceRelay: 0 };\n}\nexports.ClientConfiguration = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.video !== undefined) {\n            exports.VideoConfiguration.encode(message.video, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.screen !== undefined) {\n            exports.VideoConfiguration.encode(message.screen, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.resumeConnection !== 0) {\n            writer.uint32(24).int32(message.resumeConnection);\n        }\n        if (message.disabledCodecs !== undefined) {\n            exports.DisabledCodecs.encode(message.disabledCodecs, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.forceRelay !== 0) {\n            writer.uint32(40).int32(message.forceRelay);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseClientConfiguration();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.video = exports.VideoConfiguration.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.screen = exports.VideoConfiguration.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.resumeConnection = reader.int32();\n                    break;\n                case 4:\n                    message.disabledCodecs = exports.DisabledCodecs.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.forceRelay = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            video: isSet(object.video) ? exports.VideoConfiguration.fromJSON(object.video) : undefined,\n            screen: isSet(object.screen) ? exports.VideoConfiguration.fromJSON(object.screen) : undefined,\n            resumeConnection: isSet(object.resumeConnection) ? clientConfigSettingFromJSON(object.resumeConnection) : 0,\n            disabledCodecs: isSet(object.disabledCodecs) ? exports.DisabledCodecs.fromJSON(object.disabledCodecs) : undefined,\n            forceRelay: isSet(object.forceRelay) ? clientConfigSettingFromJSON(object.forceRelay) : 0,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.video !== undefined && (obj.video = message.video ? exports.VideoConfiguration.toJSON(message.video) : undefined);\n        message.screen !== undefined &&\n            (obj.screen = message.screen ? exports.VideoConfiguration.toJSON(message.screen) : undefined);\n        message.resumeConnection !== undefined &&\n            (obj.resumeConnection = clientConfigSettingToJSON(message.resumeConnection));\n        message.disabledCodecs !== undefined &&\n            (obj.disabledCodecs = message.disabledCodecs ? exports.DisabledCodecs.toJSON(message.disabledCodecs) : undefined);\n        message.forceRelay !== undefined && (obj.forceRelay = clientConfigSettingToJSON(message.forceRelay));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseClientConfiguration();\n        message.video = (object.video !== undefined && object.video !== null)\n            ? exports.VideoConfiguration.fromPartial(object.video)\n            : undefined;\n        message.screen = (object.screen !== undefined && object.screen !== null)\n            ? exports.VideoConfiguration.fromPartial(object.screen)\n            : undefined;\n        message.resumeConnection = (_a = object.resumeConnection) !== null && _a !== void 0 ? _a : 0;\n        message.disabledCodecs = (object.disabledCodecs !== undefined && object.disabledCodecs !== null)\n            ? exports.DisabledCodecs.fromPartial(object.disabledCodecs)\n            : undefined;\n        message.forceRelay = (_b = object.forceRelay) !== null && _b !== void 0 ? _b : 0;\n        return message;\n    },\n};\nfunction createBaseVideoConfiguration() {\n    return { hardwareEncoder: 0 };\n}\nexports.VideoConfiguration = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.hardwareEncoder !== 0) {\n            writer.uint32(8).int32(message.hardwareEncoder);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseVideoConfiguration();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.hardwareEncoder = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return { hardwareEncoder: isSet(object.hardwareEncoder) ? clientConfigSettingFromJSON(object.hardwareEncoder) : 0 };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.hardwareEncoder !== undefined && (obj.hardwareEncoder = clientConfigSettingToJSON(message.hardwareEncoder));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseVideoConfiguration();\n        message.hardwareEncoder = (_a = object.hardwareEncoder) !== null && _a !== void 0 ? _a : 0;\n        return message;\n    },\n};\nfunction createBaseDisabledCodecs() {\n    return { codecs: [], publish: [] };\n}\nexports.DisabledCodecs = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        for (const v of message.codecs) {\n            exports.Codec.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        for (const v of message.publish) {\n            exports.Codec.encode(v, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDisabledCodecs();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.codecs.push(exports.Codec.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.publish.push(exports.Codec.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            codecs: Array.isArray(object === null || object === void 0 ? void 0 : object.codecs) ? object.codecs.map((e) => exports.Codec.fromJSON(e)) : [],\n            publish: Array.isArray(object === null || object === void 0 ? void 0 : object.publish) ? object.publish.map((e) => exports.Codec.fromJSON(e)) : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.codecs) {\n            obj.codecs = message.codecs.map((e) => e ? exports.Codec.toJSON(e) : undefined);\n        }\n        else {\n            obj.codecs = [];\n        }\n        if (message.publish) {\n            obj.publish = message.publish.map((e) => e ? exports.Codec.toJSON(e) : undefined);\n        }\n        else {\n            obj.publish = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseDisabledCodecs();\n        message.codecs = ((_a = object.codecs) === null || _a === void 0 ? void 0 : _a.map((e) => exports.Codec.fromPartial(e))) || [];\n        message.publish = ((_b = object.publish) === null || _b === void 0 ? void 0 : _b.map((e) => exports.Codec.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseRTPDrift() {\n    return {\n        startTime: undefined,\n        endTime: undefined,\n        duration: 0,\n        startTimestamp: 0,\n        endTimestamp: 0,\n        rtpClockTicks: 0,\n        driftSamples: 0,\n        driftMs: 0,\n        clockRate: 0,\n    };\n}\nexports.RTPDrift = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.startTime !== undefined) {\n            timestamp_1.Timestamp.encode(toTimestamp(message.startTime), writer.uint32(10).fork()).ldelim();\n        }\n        if (message.endTime !== undefined) {\n            timestamp_1.Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).ldelim();\n        }\n        if (message.duration !== 0) {\n            writer.uint32(25).double(message.duration);\n        }\n        if (message.startTimestamp !== 0) {\n            writer.uint32(32).uint64(message.startTimestamp);\n        }\n        if (message.endTimestamp !== 0) {\n            writer.uint32(40).uint64(message.endTimestamp);\n        }\n        if (message.rtpClockTicks !== 0) {\n            writer.uint32(48).uint64(message.rtpClockTicks);\n        }\n        if (message.driftSamples !== 0) {\n            writer.uint32(56).int64(message.driftSamples);\n        }\n        if (message.driftMs !== 0) {\n            writer.uint32(65).double(message.driftMs);\n        }\n        if (message.clockRate !== 0) {\n            writer.uint32(73).double(message.clockRate);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseRTPDrift();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.startTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.endTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n                    break;\n                case 3:\n                    message.duration = reader.double();\n                    break;\n                case 4:\n                    message.startTimestamp = longToNumber(reader.uint64());\n                    break;\n                case 5:\n                    message.endTimestamp = longToNumber(reader.uint64());\n                    break;\n                case 6:\n                    message.rtpClockTicks = longToNumber(reader.uint64());\n                    break;\n                case 7:\n                    message.driftSamples = longToNumber(reader.int64());\n                    break;\n                case 8:\n                    message.driftMs = reader.double();\n                    break;\n                case 9:\n                    message.clockRate = reader.double();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,\n            endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,\n            duration: isSet(object.duration) ? Number(object.duration) : 0,\n            startTimestamp: isSet(object.startTimestamp) ? Number(object.startTimestamp) : 0,\n            endTimestamp: isSet(object.endTimestamp) ? Number(object.endTimestamp) : 0,\n            rtpClockTicks: isSet(object.rtpClockTicks) ? Number(object.rtpClockTicks) : 0,\n            driftSamples: isSet(object.driftSamples) ? Number(object.driftSamples) : 0,\n            driftMs: isSet(object.driftMs) ? Number(object.driftMs) : 0,\n            clockRate: isSet(object.clockRate) ? Number(object.clockRate) : 0,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.startTime !== undefined && (obj.startTime = message.startTime.toISOString());\n        message.endTime !== undefined && (obj.endTime = message.endTime.toISOString());\n        message.duration !== undefined && (obj.duration = message.duration);\n        message.startTimestamp !== undefined && (obj.startTimestamp = Math.round(message.startTimestamp));\n        message.endTimestamp !== undefined && (obj.endTimestamp = Math.round(message.endTimestamp));\n        message.rtpClockTicks !== undefined && (obj.rtpClockTicks = Math.round(message.rtpClockTicks));\n        message.driftSamples !== undefined && (obj.driftSamples = Math.round(message.driftSamples));\n        message.driftMs !== undefined && (obj.driftMs = message.driftMs);\n        message.clockRate !== undefined && (obj.clockRate = message.clockRate);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        const message = createBaseRTPDrift();\n        message.startTime = (_a = object.startTime) !== null && _a !== void 0 ? _a : undefined;\n        message.endTime = (_b = object.endTime) !== null && _b !== void 0 ? _b : undefined;\n        message.duration = (_c = object.duration) !== null && _c !== void 0 ? _c : 0;\n        message.startTimestamp = (_d = object.startTimestamp) !== null && _d !== void 0 ? _d : 0;\n        message.endTimestamp = (_e = object.endTimestamp) !== null && _e !== void 0 ? _e : 0;\n        message.rtpClockTicks = (_f = object.rtpClockTicks) !== null && _f !== void 0 ? _f : 0;\n        message.driftSamples = (_g = object.driftSamples) !== null && _g !== void 0 ? _g : 0;\n        message.driftMs = (_h = object.driftMs) !== null && _h !== void 0 ? _h : 0;\n        message.clockRate = (_j = object.clockRate) !== null && _j !== void 0 ? _j : 0;\n        return message;\n    },\n};\nfunction createBaseRTPStats() {\n    return {\n        startTime: undefined,\n        endTime: undefined,\n        duration: 0,\n        packets: 0,\n        packetRate: 0,\n        bytes: 0,\n        headerBytes: 0,\n        bitrate: 0,\n        packetsLost: 0,\n        packetLossRate: 0,\n        packetLossPercentage: 0,\n        packetsDuplicate: 0,\n        packetDuplicateRate: 0,\n        bytesDuplicate: 0,\n        headerBytesDuplicate: 0,\n        bitrateDuplicate: 0,\n        packetsPadding: 0,\n        packetPaddingRate: 0,\n        bytesPadding: 0,\n        headerBytesPadding: 0,\n        bitratePadding: 0,\n        packetsOutOfOrder: 0,\n        frames: 0,\n        frameRate: 0,\n        jitterCurrent: 0,\n        jitterMax: 0,\n        gapHistogram: {},\n        nacks: 0,\n        nackAcks: 0,\n        nackMisses: 0,\n        nackRepeated: 0,\n        plis: 0,\n        lastPli: undefined,\n        firs: 0,\n        lastFir: undefined,\n        rttCurrent: 0,\n        rttMax: 0,\n        keyFrames: 0,\n        lastKeyFrame: undefined,\n        layerLockPlis: 0,\n        lastLayerLockPli: undefined,\n        packetDrift: undefined,\n        reportDrift: undefined,\n    };\n}\nexports.RTPStats = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.startTime !== undefined) {\n            timestamp_1.Timestamp.encode(toTimestamp(message.startTime), writer.uint32(10).fork()).ldelim();\n        }\n        if (message.endTime !== undefined) {\n            timestamp_1.Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).ldelim();\n        }\n        if (message.duration !== 0) {\n            writer.uint32(25).double(message.duration);\n        }\n        if (message.packets !== 0) {\n            writer.uint32(32).uint32(message.packets);\n        }\n        if (message.packetRate !== 0) {\n            writer.uint32(41).double(message.packetRate);\n        }\n        if (message.bytes !== 0) {\n            writer.uint32(48).uint64(message.bytes);\n        }\n        if (message.headerBytes !== 0) {\n            writer.uint32(312).uint64(message.headerBytes);\n        }\n        if (message.bitrate !== 0) {\n            writer.uint32(57).double(message.bitrate);\n        }\n        if (message.packetsLost !== 0) {\n            writer.uint32(64).uint32(message.packetsLost);\n        }\n        if (message.packetLossRate !== 0) {\n            writer.uint32(73).double(message.packetLossRate);\n        }\n        if (message.packetLossPercentage !== 0) {\n            writer.uint32(85).float(message.packetLossPercentage);\n        }\n        if (message.packetsDuplicate !== 0) {\n            writer.uint32(88).uint32(message.packetsDuplicate);\n        }\n        if (message.packetDuplicateRate !== 0) {\n            writer.uint32(97).double(message.packetDuplicateRate);\n        }\n        if (message.bytesDuplicate !== 0) {\n            writer.uint32(104).uint64(message.bytesDuplicate);\n        }\n        if (message.headerBytesDuplicate !== 0) {\n            writer.uint32(320).uint64(message.headerBytesDuplicate);\n        }\n        if (message.bitrateDuplicate !== 0) {\n            writer.uint32(113).double(message.bitrateDuplicate);\n        }\n        if (message.packetsPadding !== 0) {\n            writer.uint32(120).uint32(message.packetsPadding);\n        }\n        if (message.packetPaddingRate !== 0) {\n            writer.uint32(129).double(message.packetPaddingRate);\n        }\n        if (message.bytesPadding !== 0) {\n            writer.uint32(136).uint64(message.bytesPadding);\n        }\n        if (message.headerBytesPadding !== 0) {\n            writer.uint32(328).uint64(message.headerBytesPadding);\n        }\n        if (message.bitratePadding !== 0) {\n            writer.uint32(145).double(message.bitratePadding);\n        }\n        if (message.packetsOutOfOrder !== 0) {\n            writer.uint32(152).uint32(message.packetsOutOfOrder);\n        }\n        if (message.frames !== 0) {\n            writer.uint32(160).uint32(message.frames);\n        }\n        if (message.frameRate !== 0) {\n            writer.uint32(169).double(message.frameRate);\n        }\n        if (message.jitterCurrent !== 0) {\n            writer.uint32(177).double(message.jitterCurrent);\n        }\n        if (message.jitterMax !== 0) {\n            writer.uint32(185).double(message.jitterMax);\n        }\n        Object.entries(message.gapHistogram).forEach(([key, value]) => {\n            exports.RTPStats_GapHistogramEntry.encode({ key: key, value }, writer.uint32(194).fork()).ldelim();\n        });\n        if (message.nacks !== 0) {\n            writer.uint32(200).uint32(message.nacks);\n        }\n        if (message.nackAcks !== 0) {\n            writer.uint32(296).uint32(message.nackAcks);\n        }\n        if (message.nackMisses !== 0) {\n            writer.uint32(208).uint32(message.nackMisses);\n        }\n        if (message.nackRepeated !== 0) {\n            writer.uint32(304).uint32(message.nackRepeated);\n        }\n        if (message.plis !== 0) {\n            writer.uint32(216).uint32(message.plis);\n        }\n        if (message.lastPli !== undefined) {\n            timestamp_1.Timestamp.encode(toTimestamp(message.lastPli), writer.uint32(226).fork()).ldelim();\n        }\n        if (message.firs !== 0) {\n            writer.uint32(232).uint32(message.firs);\n        }\n        if (message.lastFir !== undefined) {\n            timestamp_1.Timestamp.encode(toTimestamp(message.lastFir), writer.uint32(242).fork()).ldelim();\n        }\n        if (message.rttCurrent !== 0) {\n            writer.uint32(248).uint32(message.rttCurrent);\n        }\n        if (message.rttMax !== 0) {\n            writer.uint32(256).uint32(message.rttMax);\n        }\n        if (message.keyFrames !== 0) {\n            writer.uint32(264).uint32(message.keyFrames);\n        }\n        if (message.lastKeyFrame !== undefined) {\n            timestamp_1.Timestamp.encode(toTimestamp(message.lastKeyFrame), writer.uint32(274).fork()).ldelim();\n        }\n        if (message.layerLockPlis !== 0) {\n            writer.uint32(280).uint32(message.layerLockPlis);\n        }\n        if (message.lastLayerLockPli !== undefined) {\n            timestamp_1.Timestamp.encode(toTimestamp(message.lastLayerLockPli), writer.uint32(290).fork()).ldelim();\n        }\n        if (message.packetDrift !== undefined) {\n            exports.RTPDrift.encode(message.packetDrift, writer.uint32(354).fork()).ldelim();\n        }\n        if (message.reportDrift !== undefined) {\n            exports.RTPDrift.encode(message.reportDrift, writer.uint32(362).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseRTPStats();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.startTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.endTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n                    break;\n                case 3:\n                    message.duration = reader.double();\n                    break;\n                case 4:\n                    message.packets = reader.uint32();\n                    break;\n                case 5:\n                    message.packetRate = reader.double();\n                    break;\n                case 6:\n                    message.bytes = longToNumber(reader.uint64());\n                    break;\n                case 39:\n                    message.headerBytes = longToNumber(reader.uint64());\n                    break;\n                case 7:\n                    message.bitrate = reader.double();\n                    break;\n                case 8:\n                    message.packetsLost = reader.uint32();\n                    break;\n                case 9:\n                    message.packetLossRate = reader.double();\n                    break;\n                case 10:\n                    message.packetLossPercentage = reader.float();\n                    break;\n                case 11:\n                    message.packetsDuplicate = reader.uint32();\n                    break;\n                case 12:\n                    message.packetDuplicateRate = reader.double();\n                    break;\n                case 13:\n                    message.bytesDuplicate = longToNumber(reader.uint64());\n                    break;\n                case 40:\n                    message.headerBytesDuplicate = longToNumber(reader.uint64());\n                    break;\n                case 14:\n                    message.bitrateDuplicate = reader.double();\n                    break;\n                case 15:\n                    message.packetsPadding = reader.uint32();\n                    break;\n                case 16:\n                    message.packetPaddingRate = reader.double();\n                    break;\n                case 17:\n                    message.bytesPadding = longToNumber(reader.uint64());\n                    break;\n                case 41:\n                    message.headerBytesPadding = longToNumber(reader.uint64());\n                    break;\n                case 18:\n                    message.bitratePadding = reader.double();\n                    break;\n                case 19:\n                    message.packetsOutOfOrder = reader.uint32();\n                    break;\n                case 20:\n                    message.frames = reader.uint32();\n                    break;\n                case 21:\n                    message.frameRate = reader.double();\n                    break;\n                case 22:\n                    message.jitterCurrent = reader.double();\n                    break;\n                case 23:\n                    message.jitterMax = reader.double();\n                    break;\n                case 24:\n                    const entry24 = exports.RTPStats_GapHistogramEntry.decode(reader, reader.uint32());\n                    if (entry24.value !== undefined) {\n                        message.gapHistogram[entry24.key] = entry24.value;\n                    }\n                    break;\n                case 25:\n                    message.nacks = reader.uint32();\n                    break;\n                case 37:\n                    message.nackAcks = reader.uint32();\n                    break;\n                case 26:\n                    message.nackMisses = reader.uint32();\n                    break;\n                case 38:\n                    message.nackRepeated = reader.uint32();\n                    break;\n                case 27:\n                    message.plis = reader.uint32();\n                    break;\n                case 28:\n                    message.lastPli = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n                    break;\n                case 29:\n                    message.firs = reader.uint32();\n                    break;\n                case 30:\n                    message.lastFir = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n                    break;\n                case 31:\n                    message.rttCurrent = reader.uint32();\n                    break;\n                case 32:\n                    message.rttMax = reader.uint32();\n                    break;\n                case 33:\n                    message.keyFrames = reader.uint32();\n                    break;\n                case 34:\n                    message.lastKeyFrame = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n                    break;\n                case 35:\n                    message.layerLockPlis = reader.uint32();\n                    break;\n                case 36:\n                    message.lastLayerLockPli = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n                    break;\n                case 44:\n                    message.packetDrift = exports.RTPDrift.decode(reader, reader.uint32());\n                    break;\n                case 45:\n                    message.reportDrift = exports.RTPDrift.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,\n            endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,\n            duration: isSet(object.duration) ? Number(object.duration) : 0,\n            packets: isSet(object.packets) ? Number(object.packets) : 0,\n            packetRate: isSet(object.packetRate) ? Number(object.packetRate) : 0,\n            bytes: isSet(object.bytes) ? Number(object.bytes) : 0,\n            headerBytes: isSet(object.headerBytes) ? Number(object.headerBytes) : 0,\n            bitrate: isSet(object.bitrate) ? Number(object.bitrate) : 0,\n            packetsLost: isSet(object.packetsLost) ? Number(object.packetsLost) : 0,\n            packetLossRate: isSet(object.packetLossRate) ? Number(object.packetLossRate) : 0,\n            packetLossPercentage: isSet(object.packetLossPercentage) ? Number(object.packetLossPercentage) : 0,\n            packetsDuplicate: isSet(object.packetsDuplicate) ? Number(object.packetsDuplicate) : 0,\n            packetDuplicateRate: isSet(object.packetDuplicateRate) ? Number(object.packetDuplicateRate) : 0,\n            bytesDuplicate: isSet(object.bytesDuplicate) ? Number(object.bytesDuplicate) : 0,\n            headerBytesDuplicate: isSet(object.headerBytesDuplicate) ? Number(object.headerBytesDuplicate) : 0,\n            bitrateDuplicate: isSet(object.bitrateDuplicate) ? Number(object.bitrateDuplicate) : 0,\n            packetsPadding: isSet(object.packetsPadding) ? Number(object.packetsPadding) : 0,\n            packetPaddingRate: isSet(object.packetPaddingRate) ? Number(object.packetPaddingRate) : 0,\n            bytesPadding: isSet(object.bytesPadding) ? Number(object.bytesPadding) : 0,\n            headerBytesPadding: isSet(object.headerBytesPadding) ? Number(object.headerBytesPadding) : 0,\n            bitratePadding: isSet(object.bitratePadding) ? Number(object.bitratePadding) : 0,\n            packetsOutOfOrder: isSet(object.packetsOutOfOrder) ? Number(object.packetsOutOfOrder) : 0,\n            frames: isSet(object.frames) ? Number(object.frames) : 0,\n            frameRate: isSet(object.frameRate) ? Number(object.frameRate) : 0,\n            jitterCurrent: isSet(object.jitterCurrent) ? Number(object.jitterCurrent) : 0,\n            jitterMax: isSet(object.jitterMax) ? Number(object.jitterMax) : 0,\n            gapHistogram: isObject(object.gapHistogram)\n                ? Object.entries(object.gapHistogram).reduce((acc, [key, value]) => {\n                    acc[Number(key)] = Number(value);\n                    return acc;\n                }, {})\n                : {},\n            nacks: isSet(object.nacks) ? Number(object.nacks) : 0,\n            nackAcks: isSet(object.nackAcks) ? Number(object.nackAcks) : 0,\n            nackMisses: isSet(object.nackMisses) ? Number(object.nackMisses) : 0,\n            nackRepeated: isSet(object.nackRepeated) ? Number(object.nackRepeated) : 0,\n            plis: isSet(object.plis) ? Number(object.plis) : 0,\n            lastPli: isSet(object.lastPli) ? fromJsonTimestamp(object.lastPli) : undefined,\n            firs: isSet(object.firs) ? Number(object.firs) : 0,\n            lastFir: isSet(object.lastFir) ? fromJsonTimestamp(object.lastFir) : undefined,\n            rttCurrent: isSet(object.rttCurrent) ? Number(object.rttCurrent) : 0,\n            rttMax: isSet(object.rttMax) ? Number(object.rttMax) : 0,\n            keyFrames: isSet(object.keyFrames) ? Number(object.keyFrames) : 0,\n            lastKeyFrame: isSet(object.lastKeyFrame) ? fromJsonTimestamp(object.lastKeyFrame) : undefined,\n            layerLockPlis: isSet(object.layerLockPlis) ? Number(object.layerLockPlis) : 0,\n            lastLayerLockPli: isSet(object.lastLayerLockPli) ? fromJsonTimestamp(object.lastLayerLockPli) : undefined,\n            packetDrift: isSet(object.packetDrift) ? exports.RTPDrift.fromJSON(object.packetDrift) : undefined,\n            reportDrift: isSet(object.reportDrift) ? exports.RTPDrift.fromJSON(object.reportDrift) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.startTime !== undefined && (obj.startTime = message.startTime.toISOString());\n        message.endTime !== undefined && (obj.endTime = message.endTime.toISOString());\n        message.duration !== undefined && (obj.duration = message.duration);\n        message.packets !== undefined && (obj.packets = Math.round(message.packets));\n        message.packetRate !== undefined && (obj.packetRate = message.packetRate);\n        message.bytes !== undefined && (obj.bytes = Math.round(message.bytes));\n        message.headerBytes !== undefined && (obj.headerBytes = Math.round(message.headerBytes));\n        message.bitrate !== undefined && (obj.bitrate = message.bitrate);\n        message.packetsLost !== undefined && (obj.packetsLost = Math.round(message.packetsLost));\n        message.packetLossRate !== undefined && (obj.packetLossRate = message.packetLossRate);\n        message.packetLossPercentage !== undefined && (obj.packetLossPercentage = message.packetLossPercentage);\n        message.packetsDuplicate !== undefined && (obj.packetsDuplicate = Math.round(message.packetsDuplicate));\n        message.packetDuplicateRate !== undefined && (obj.packetDuplicateRate = message.packetDuplicateRate);\n        message.bytesDuplicate !== undefined && (obj.bytesDuplicate = Math.round(message.bytesDuplicate));\n        message.headerBytesDuplicate !== undefined && (obj.headerBytesDuplicate = Math.round(message.headerBytesDuplicate));\n        message.bitrateDuplicate !== undefined && (obj.bitrateDuplicate = message.bitrateDuplicate);\n        message.packetsPadding !== undefined && (obj.packetsPadding = Math.round(message.packetsPadding));\n        message.packetPaddingRate !== undefined && (obj.packetPaddingRate = message.packetPaddingRate);\n        message.bytesPadding !== undefined && (obj.bytesPadding = Math.round(message.bytesPadding));\n        message.headerBytesPadding !== undefined && (obj.headerBytesPadding = Math.round(message.headerBytesPadding));\n        message.bitratePadding !== undefined && (obj.bitratePadding = message.bitratePadding);\n        message.packetsOutOfOrder !== undefined && (obj.packetsOutOfOrder = Math.round(message.packetsOutOfOrder));\n        message.frames !== undefined && (obj.frames = Math.round(message.frames));\n        message.frameRate !== undefined && (obj.frameRate = message.frameRate);\n        message.jitterCurrent !== undefined && (obj.jitterCurrent = message.jitterCurrent);\n        message.jitterMax !== undefined && (obj.jitterMax = message.jitterMax);\n        obj.gapHistogram = {};\n        if (message.gapHistogram) {\n            Object.entries(message.gapHistogram).forEach(([k, v]) => {\n                obj.gapHistogram[k] = Math.round(v);\n            });\n        }\n        message.nacks !== undefined && (obj.nacks = Math.round(message.nacks));\n        message.nackAcks !== undefined && (obj.nackAcks = Math.round(message.nackAcks));\n        message.nackMisses !== undefined && (obj.nackMisses = Math.round(message.nackMisses));\n        message.nackRepeated !== undefined && (obj.nackRepeated = Math.round(message.nackRepeated));\n        message.plis !== undefined && (obj.plis = Math.round(message.plis));\n        message.lastPli !== undefined && (obj.lastPli = message.lastPli.toISOString());\n        message.firs !== undefined && (obj.firs = Math.round(message.firs));\n        message.lastFir !== undefined && (obj.lastFir = message.lastFir.toISOString());\n        message.rttCurrent !== undefined && (obj.rttCurrent = Math.round(message.rttCurrent));\n        message.rttMax !== undefined && (obj.rttMax = Math.round(message.rttMax));\n        message.keyFrames !== undefined && (obj.keyFrames = Math.round(message.keyFrames));\n        message.lastKeyFrame !== undefined && (obj.lastKeyFrame = message.lastKeyFrame.toISOString());\n        message.layerLockPlis !== undefined && (obj.layerLockPlis = Math.round(message.layerLockPlis));\n        message.lastLayerLockPli !== undefined && (obj.lastLayerLockPli = message.lastLayerLockPli.toISOString());\n        message.packetDrift !== undefined &&\n            (obj.packetDrift = message.packetDrift ? exports.RTPDrift.toJSON(message.packetDrift) : undefined);\n        message.reportDrift !== undefined &&\n            (obj.reportDrift = message.reportDrift ? exports.RTPDrift.toJSON(message.reportDrift) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16;\n        const message = createBaseRTPStats();\n        message.startTime = (_a = object.startTime) !== null && _a !== void 0 ? _a : undefined;\n        message.endTime = (_b = object.endTime) !== null && _b !== void 0 ? _b : undefined;\n        message.duration = (_c = object.duration) !== null && _c !== void 0 ? _c : 0;\n        message.packets = (_d = object.packets) !== null && _d !== void 0 ? _d : 0;\n        message.packetRate = (_e = object.packetRate) !== null && _e !== void 0 ? _e : 0;\n        message.bytes = (_f = object.bytes) !== null && _f !== void 0 ? _f : 0;\n        message.headerBytes = (_g = object.headerBytes) !== null && _g !== void 0 ? _g : 0;\n        message.bitrate = (_h = object.bitrate) !== null && _h !== void 0 ? _h : 0;\n        message.packetsLost = (_j = object.packetsLost) !== null && _j !== void 0 ? _j : 0;\n        message.packetLossRate = (_k = object.packetLossRate) !== null && _k !== void 0 ? _k : 0;\n        message.packetLossPercentage = (_l = object.packetLossPercentage) !== null && _l !== void 0 ? _l : 0;\n        message.packetsDuplicate = (_m = object.packetsDuplicate) !== null && _m !== void 0 ? _m : 0;\n        message.packetDuplicateRate = (_o = object.packetDuplicateRate) !== null && _o !== void 0 ? _o : 0;\n        message.bytesDuplicate = (_p = object.bytesDuplicate) !== null && _p !== void 0 ? _p : 0;\n        message.headerBytesDuplicate = (_q = object.headerBytesDuplicate) !== null && _q !== void 0 ? _q : 0;\n        message.bitrateDuplicate = (_r = object.bitrateDuplicate) !== null && _r !== void 0 ? _r : 0;\n        message.packetsPadding = (_s = object.packetsPadding) !== null && _s !== void 0 ? _s : 0;\n        message.packetPaddingRate = (_t = object.packetPaddingRate) !== null && _t !== void 0 ? _t : 0;\n        message.bytesPadding = (_u = object.bytesPadding) !== null && _u !== void 0 ? _u : 0;\n        message.headerBytesPadding = (_v = object.headerBytesPadding) !== null && _v !== void 0 ? _v : 0;\n        message.bitratePadding = (_w = object.bitratePadding) !== null && _w !== void 0 ? _w : 0;\n        message.packetsOutOfOrder = (_x = object.packetsOutOfOrder) !== null && _x !== void 0 ? _x : 0;\n        message.frames = (_y = object.frames) !== null && _y !== void 0 ? _y : 0;\n        message.frameRate = (_z = object.frameRate) !== null && _z !== void 0 ? _z : 0;\n        message.jitterCurrent = (_0 = object.jitterCurrent) !== null && _0 !== void 0 ? _0 : 0;\n        message.jitterMax = (_1 = object.jitterMax) !== null && _1 !== void 0 ? _1 : 0;\n        message.gapHistogram = Object.entries((_2 = object.gapHistogram) !== null && _2 !== void 0 ? _2 : {}).reduce((acc, [key, value]) => {\n            if (value !== undefined) {\n                acc[Number(key)] = Number(value);\n            }\n            return acc;\n        }, {});\n        message.nacks = (_3 = object.nacks) !== null && _3 !== void 0 ? _3 : 0;\n        message.nackAcks = (_4 = object.nackAcks) !== null && _4 !== void 0 ? _4 : 0;\n        message.nackMisses = (_5 = object.nackMisses) !== null && _5 !== void 0 ? _5 : 0;\n        message.nackRepeated = (_6 = object.nackRepeated) !== null && _6 !== void 0 ? _6 : 0;\n        message.plis = (_7 = object.plis) !== null && _7 !== void 0 ? _7 : 0;\n        message.lastPli = (_8 = object.lastPli) !== null && _8 !== void 0 ? _8 : undefined;\n        message.firs = (_9 = object.firs) !== null && _9 !== void 0 ? _9 : 0;\n        message.lastFir = (_10 = object.lastFir) !== null && _10 !== void 0 ? _10 : undefined;\n        message.rttCurrent = (_11 = object.rttCurrent) !== null && _11 !== void 0 ? _11 : 0;\n        message.rttMax = (_12 = object.rttMax) !== null && _12 !== void 0 ? _12 : 0;\n        message.keyFrames = (_13 = object.keyFrames) !== null && _13 !== void 0 ? _13 : 0;\n        message.lastKeyFrame = (_14 = object.lastKeyFrame) !== null && _14 !== void 0 ? _14 : undefined;\n        message.layerLockPlis = (_15 = object.layerLockPlis) !== null && _15 !== void 0 ? _15 : 0;\n        message.lastLayerLockPli = (_16 = object.lastLayerLockPli) !== null && _16 !== void 0 ? _16 : undefined;\n        message.packetDrift = (object.packetDrift !== undefined && object.packetDrift !== null)\n            ? exports.RTPDrift.fromPartial(object.packetDrift)\n            : undefined;\n        message.reportDrift = (object.reportDrift !== undefined && object.reportDrift !== null)\n            ? exports.RTPDrift.fromPartial(object.reportDrift)\n            : undefined;\n        return message;\n    },\n};\nfunction createBaseRTPStats_GapHistogramEntry() {\n    return { key: 0, value: 0 };\n}\nexports.RTPStats_GapHistogramEntry = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.key !== 0) {\n            writer.uint32(8).int32(message.key);\n        }\n        if (message.value !== 0) {\n            writer.uint32(16).uint32(message.value);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseRTPStats_GapHistogramEntry();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.int32();\n                    break;\n                case 2:\n                    message.value = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return { key: isSet(object.key) ? Number(object.key) : 0, value: isSet(object.value) ? Number(object.value) : 0 };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.key !== undefined && (obj.key = Math.round(message.key));\n        message.value !== undefined && (obj.value = Math.round(message.value));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseRTPStats_GapHistogramEntry();\n        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : 0;\n        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : 0;\n        return message;\n    },\n};\nfunction createBaseTimedVersion() {\n    return { unixMicro: 0, ticks: 0 };\n}\nexports.TimedVersion = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.unixMicro !== 0) {\n            writer.uint32(8).int64(message.unixMicro);\n        }\n        if (message.ticks !== 0) {\n            writer.uint32(16).int32(message.ticks);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTimedVersion();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.unixMicro = longToNumber(reader.int64());\n                    break;\n                case 2:\n                    message.ticks = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            unixMicro: isSet(object.unixMicro) ? Number(object.unixMicro) : 0,\n            ticks: isSet(object.ticks) ? Number(object.ticks) : 0,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.unixMicro !== undefined && (obj.unixMicro = Math.round(message.unixMicro));\n        message.ticks !== undefined && (obj.ticks = Math.round(message.ticks));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseTimedVersion();\n        message.unixMicro = (_a = object.unixMicro) !== null && _a !== void 0 ? _a : 0;\n        message.ticks = (_b = object.ticks) !== null && _b !== void 0 ? _b : 0;\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\") {\n        return globalThis;\n    }\n    if (typeof self !== \"undefined\") {\n        return self;\n    }\n    if (typeof window !== \"undefined\") {\n        return window;\n    }\n    if (typeof global !== \"undefined\") {\n        return global;\n    }\n    throw \"Unable to locate global object\";\n})();\nfunction bytesFromBase64(b64) {\n    if (globalThis.Buffer) {\n        return Uint8Array.from(globalThis.Buffer.from(b64, \"base64\"));\n    }\n    else {\n        const bin = globalThis.atob(b64);\n        const arr = new Uint8Array(bin.length);\n        for (let i = 0; i < bin.length; ++i) {\n            arr[i] = bin.charCodeAt(i);\n        }\n        return arr;\n    }\n}\nfunction base64FromBytes(arr) {\n    if (globalThis.Buffer) {\n        return globalThis.Buffer.from(arr).toString(\"base64\");\n    }\n    else {\n        const bin = [];\n        arr.forEach((byte) => {\n            bin.push(String.fromCharCode(byte));\n        });\n        return globalThis.btoa(bin.join(\"\"));\n    }\n}\nfunction toTimestamp(date) {\n    const seconds = date.getTime() / 1000;\n    const nanos = (date.getTime() % 1000) * 1000000;\n    return { seconds, nanos };\n}\nfunction fromTimestamp(t) {\n    let millis = t.seconds * 1000;\n    millis += t.nanos / 1000000;\n    return new Date(millis);\n}\nfunction fromJsonTimestamp(o) {\n    if (o instanceof Date) {\n        return o;\n    }\n    else if (typeof o === \"string\") {\n        return new Date(o);\n    }\n    else {\n        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));\n    }\n}\nfunction longToNumber(long) {\n    if (long.gt(Number.MAX_SAFE_INTEGER)) {\n        throw new globalThis.Error(\"Value is larger than Number.MAX_SAFE_INTEGER\");\n    }\n    return long.toNumber();\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\nfunction isObject(value) {\n    return typeof value === \"object\" && value !== null;\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=livekit_models.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/livekit-server-sdk/dist/proto/livekit_models.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/livekit-server-sdk/dist/proto/livekit_room.js":
/*!********************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/proto/livekit_room.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.UpdateRoomMetadataRequest = exports.SendDataResponse = exports.SendDataRequest = exports.UpdateSubscriptionsResponse = exports.UpdateSubscriptionsRequest = exports.UpdateParticipantRequest = exports.MuteRoomTrackResponse = exports.MuteRoomTrackRequest = exports.RemoveParticipantResponse = exports.RoomParticipantIdentity = exports.ListParticipantsResponse = exports.ListParticipantsRequest = exports.DeleteRoomResponse = exports.DeleteRoomRequest = exports.ListRoomsResponse = exports.ListRoomsRequest = exports.RoomEgress = exports.CreateRoomRequest = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ \"(action-browser)/./node_modules/protobufjs/minimal.js\"));\nconst livekit_egress_1 = __webpack_require__(/*! ./livekit_egress */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/proto/livekit_egress.js\");\nconst livekit_models_1 = __webpack_require__(/*! ./livekit_models */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/proto/livekit_models.js\");\nexports.protobufPackage = \"livekit\";\nfunction createBaseCreateRoomRequest() {\n    return {\n        name: \"\",\n        emptyTimeout: 0,\n        maxParticipants: 0,\n        nodeId: \"\",\n        metadata: \"\",\n        egress: undefined,\n        minPlayoutDelay: 0,\n        maxPlayoutDelay: 0,\n        syncStreams: false,\n    };\n}\nexports.CreateRoomRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.name !== undefined && message.name !== \"\") {\n            writer.uint32(10).string(message.name);\n        }\n        if (message.emptyTimeout !== undefined && message.emptyTimeout !== 0) {\n            writer.uint32(16).uint32(message.emptyTimeout);\n        }\n        if (message.maxParticipants !== undefined && message.maxParticipants !== 0) {\n            writer.uint32(24).uint32(message.maxParticipants);\n        }\n        if (message.nodeId !== undefined && message.nodeId !== \"\") {\n            writer.uint32(34).string(message.nodeId);\n        }\n        if (message.metadata !== undefined && message.metadata !== \"\") {\n            writer.uint32(42).string(message.metadata);\n        }\n        if (message.egress !== undefined) {\n            exports.RoomEgress.encode(message.egress, writer.uint32(50).fork()).ldelim();\n        }\n        if (message.minPlayoutDelay !== undefined && message.minPlayoutDelay !== 0) {\n            writer.uint32(56).uint32(message.minPlayoutDelay);\n        }\n        if (message.maxPlayoutDelay !== undefined && message.maxPlayoutDelay !== 0) {\n            writer.uint32(64).uint32(message.maxPlayoutDelay);\n        }\n        if (message.syncStreams === true) {\n            writer.uint32(72).bool(message.syncStreams);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseCreateRoomRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.emptyTimeout = reader.uint32();\n                    break;\n                case 3:\n                    message.maxParticipants = reader.uint32();\n                    break;\n                case 4:\n                    message.nodeId = reader.string();\n                    break;\n                case 5:\n                    message.metadata = reader.string();\n                    break;\n                case 6:\n                    message.egress = exports.RoomEgress.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.minPlayoutDelay = reader.uint32();\n                    break;\n                case 8:\n                    message.maxPlayoutDelay = reader.uint32();\n                    break;\n                case 9:\n                    message.syncStreams = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            name: isSet(object.name) ? String(object.name) : \"\",\n            emptyTimeout: isSet(object.emptyTimeout) ? Number(object.emptyTimeout) : 0,\n            maxParticipants: isSet(object.maxParticipants) ? Number(object.maxParticipants) : 0,\n            nodeId: isSet(object.nodeId) ? String(object.nodeId) : \"\",\n            metadata: isSet(object.metadata) ? String(object.metadata) : \"\",\n            egress: isSet(object.egress) ? exports.RoomEgress.fromJSON(object.egress) : undefined,\n            minPlayoutDelay: isSet(object.minPlayoutDelay) ? Number(object.minPlayoutDelay) : 0,\n            maxPlayoutDelay: isSet(object.maxPlayoutDelay) ? Number(object.maxPlayoutDelay) : 0,\n            syncStreams: isSet(object.syncStreams) ? Boolean(object.syncStreams) : false,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.name !== undefined && (obj.name = message.name);\n        message.emptyTimeout !== undefined && (obj.emptyTimeout = Math.round(message.emptyTimeout));\n        message.maxParticipants !== undefined && (obj.maxParticipants = Math.round(message.maxParticipants));\n        message.nodeId !== undefined && (obj.nodeId = message.nodeId);\n        message.metadata !== undefined && (obj.metadata = message.metadata);\n        message.egress !== undefined && (obj.egress = message.egress ? exports.RoomEgress.toJSON(message.egress) : undefined);\n        message.minPlayoutDelay !== undefined && (obj.minPlayoutDelay = Math.round(message.minPlayoutDelay));\n        message.maxPlayoutDelay !== undefined && (obj.maxPlayoutDelay = Math.round(message.maxPlayoutDelay));\n        message.syncStreams !== undefined && (obj.syncStreams = message.syncStreams);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        const message = createBaseCreateRoomRequest();\n        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : \"\";\n        message.emptyTimeout = (_b = object.emptyTimeout) !== null && _b !== void 0 ? _b : 0;\n        message.maxParticipants = (_c = object.maxParticipants) !== null && _c !== void 0 ? _c : 0;\n        message.nodeId = (_d = object.nodeId) !== null && _d !== void 0 ? _d : \"\";\n        message.metadata = (_e = object.metadata) !== null && _e !== void 0 ? _e : \"\";\n        message.egress = (object.egress !== undefined && object.egress !== null)\n            ? exports.RoomEgress.fromPartial(object.egress)\n            : undefined;\n        message.minPlayoutDelay = (_f = object.minPlayoutDelay) !== null && _f !== void 0 ? _f : 0;\n        message.maxPlayoutDelay = (_g = object.maxPlayoutDelay) !== null && _g !== void 0 ? _g : 0;\n        message.syncStreams = (_h = object.syncStreams) !== null && _h !== void 0 ? _h : false;\n        return message;\n    },\n};\nfunction createBaseRoomEgress() {\n    return { room: undefined, participant: undefined, tracks: undefined };\n}\nexports.RoomEgress = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.room !== undefined) {\n            livekit_egress_1.RoomCompositeEgressRequest.encode(message.room, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.participant !== undefined) {\n            livekit_egress_1.AutoParticipantEgress.encode(message.participant, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.tracks !== undefined) {\n            livekit_egress_1.AutoTrackEgress.encode(message.tracks, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseRoomEgress();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.room = livekit_egress_1.RoomCompositeEgressRequest.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.participant = livekit_egress_1.AutoParticipantEgress.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.tracks = livekit_egress_1.AutoTrackEgress.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            room: isSet(object.room) ? livekit_egress_1.RoomCompositeEgressRequest.fromJSON(object.room) : undefined,\n            participant: isSet(object.participant) ? livekit_egress_1.AutoParticipantEgress.fromJSON(object.participant) : undefined,\n            tracks: isSet(object.tracks) ? livekit_egress_1.AutoTrackEgress.fromJSON(object.tracks) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.room !== undefined &&\n            (obj.room = message.room ? livekit_egress_1.RoomCompositeEgressRequest.toJSON(message.room) : undefined);\n        message.participant !== undefined &&\n            (obj.participant = message.participant ? livekit_egress_1.AutoParticipantEgress.toJSON(message.participant) : undefined);\n        message.tracks !== undefined && (obj.tracks = message.tracks ? livekit_egress_1.AutoTrackEgress.toJSON(message.tracks) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseRoomEgress();\n        message.room = (object.room !== undefined && object.room !== null)\n            ? livekit_egress_1.RoomCompositeEgressRequest.fromPartial(object.room)\n            : undefined;\n        message.participant = (object.participant !== undefined && object.participant !== null)\n            ? livekit_egress_1.AutoParticipantEgress.fromPartial(object.participant)\n            : undefined;\n        message.tracks = (object.tracks !== undefined && object.tracks !== null)\n            ? livekit_egress_1.AutoTrackEgress.fromPartial(object.tracks)\n            : undefined;\n        return message;\n    },\n};\nfunction createBaseListRoomsRequest() {\n    return { names: [] };\n}\nexports.ListRoomsRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.names !== undefined && message.names.length !== 0) {\n            for (const v of message.names) {\n                writer.uint32(10).string(v);\n            }\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseListRoomsRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.names.push(reader.string());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return { names: Array.isArray(object === null || object === void 0 ? void 0 : object.names) ? object.names.map((e) => String(e)) : [] };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.names) {\n            obj.names = message.names.map((e) => e);\n        }\n        else {\n            obj.names = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseListRoomsRequest();\n        message.names = ((_a = object.names) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];\n        return message;\n    },\n};\nfunction createBaseListRoomsResponse() {\n    return { rooms: [] };\n}\nexports.ListRoomsResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.rooms !== undefined && message.rooms.length !== 0) {\n            for (const v of message.rooms) {\n                livekit_models_1.Room.encode(v, writer.uint32(10).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseListRoomsResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.rooms.push(livekit_models_1.Room.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return { rooms: Array.isArray(object === null || object === void 0 ? void 0 : object.rooms) ? object.rooms.map((e) => livekit_models_1.Room.fromJSON(e)) : [] };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.rooms) {\n            obj.rooms = message.rooms.map((e) => e ? livekit_models_1.Room.toJSON(e) : undefined);\n        }\n        else {\n            obj.rooms = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseListRoomsResponse();\n        message.rooms = ((_a = object.rooms) === null || _a === void 0 ? void 0 : _a.map((e) => livekit_models_1.Room.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseDeleteRoomRequest() {\n    return { room: \"\" };\n}\nexports.DeleteRoomRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.room !== undefined && message.room !== \"\") {\n            writer.uint32(10).string(message.room);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDeleteRoomRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.room = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return { room: isSet(object.room) ? String(object.room) : \"\" };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.room !== undefined && (obj.room = message.room);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseDeleteRoomRequest();\n        message.room = (_a = object.room) !== null && _a !== void 0 ? _a : \"\";\n        return message;\n    },\n};\nfunction createBaseDeleteRoomResponse() {\n    return {};\n}\nexports.DeleteRoomResponse = {\n    encode(_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDeleteRoomResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        return {};\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = createBaseDeleteRoomResponse();\n        return message;\n    },\n};\nfunction createBaseListParticipantsRequest() {\n    return { room: \"\" };\n}\nexports.ListParticipantsRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.room !== undefined && message.room !== \"\") {\n            writer.uint32(10).string(message.room);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseListParticipantsRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.room = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return { room: isSet(object.room) ? String(object.room) : \"\" };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.room !== undefined && (obj.room = message.room);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseListParticipantsRequest();\n        message.room = (_a = object.room) !== null && _a !== void 0 ? _a : \"\";\n        return message;\n    },\n};\nfunction createBaseListParticipantsResponse() {\n    return { participants: [] };\n}\nexports.ListParticipantsResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.participants !== undefined && message.participants.length !== 0) {\n            for (const v of message.participants) {\n                livekit_models_1.ParticipantInfo.encode(v, writer.uint32(10).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseListParticipantsResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.participants.push(livekit_models_1.ParticipantInfo.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            participants: Array.isArray(object === null || object === void 0 ? void 0 : object.participants)\n                ? object.participants.map((e) => livekit_models_1.ParticipantInfo.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.participants) {\n            obj.participants = message.participants.map((e) => e ? livekit_models_1.ParticipantInfo.toJSON(e) : undefined);\n        }\n        else {\n            obj.participants = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseListParticipantsResponse();\n        message.participants = ((_a = object.participants) === null || _a === void 0 ? void 0 : _a.map((e) => livekit_models_1.ParticipantInfo.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseRoomParticipantIdentity() {\n    return { room: \"\", identity: \"\" };\n}\nexports.RoomParticipantIdentity = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.room !== undefined && message.room !== \"\") {\n            writer.uint32(10).string(message.room);\n        }\n        if (message.identity !== undefined && message.identity !== \"\") {\n            writer.uint32(18).string(message.identity);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseRoomParticipantIdentity();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.room = reader.string();\n                    break;\n                case 2:\n                    message.identity = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            room: isSet(object.room) ? String(object.room) : \"\",\n            identity: isSet(object.identity) ? String(object.identity) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.room !== undefined && (obj.room = message.room);\n        message.identity !== undefined && (obj.identity = message.identity);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseRoomParticipantIdentity();\n        message.room = (_a = object.room) !== null && _a !== void 0 ? _a : \"\";\n        message.identity = (_b = object.identity) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    },\n};\nfunction createBaseRemoveParticipantResponse() {\n    return {};\n}\nexports.RemoveParticipantResponse = {\n    encode(_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseRemoveParticipantResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        return {};\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = createBaseRemoveParticipantResponse();\n        return message;\n    },\n};\nfunction createBaseMuteRoomTrackRequest() {\n    return { room: \"\", identity: \"\", trackSid: \"\", muted: false };\n}\nexports.MuteRoomTrackRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.room !== undefined && message.room !== \"\") {\n            writer.uint32(10).string(message.room);\n        }\n        if (message.identity !== undefined && message.identity !== \"\") {\n            writer.uint32(18).string(message.identity);\n        }\n        if (message.trackSid !== undefined && message.trackSid !== \"\") {\n            writer.uint32(26).string(message.trackSid);\n        }\n        if (message.muted === true) {\n            writer.uint32(32).bool(message.muted);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMuteRoomTrackRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.room = reader.string();\n                    break;\n                case 2:\n                    message.identity = reader.string();\n                    break;\n                case 3:\n                    message.trackSid = reader.string();\n                    break;\n                case 4:\n                    message.muted = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            room: isSet(object.room) ? String(object.room) : \"\",\n            identity: isSet(object.identity) ? String(object.identity) : \"\",\n            trackSid: isSet(object.trackSid) ? String(object.trackSid) : \"\",\n            muted: isSet(object.muted) ? Boolean(object.muted) : false,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.room !== undefined && (obj.room = message.room);\n        message.identity !== undefined && (obj.identity = message.identity);\n        message.trackSid !== undefined && (obj.trackSid = message.trackSid);\n        message.muted !== undefined && (obj.muted = message.muted);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d;\n        const message = createBaseMuteRoomTrackRequest();\n        message.room = (_a = object.room) !== null && _a !== void 0 ? _a : \"\";\n        message.identity = (_b = object.identity) !== null && _b !== void 0 ? _b : \"\";\n        message.trackSid = (_c = object.trackSid) !== null && _c !== void 0 ? _c : \"\";\n        message.muted = (_d = object.muted) !== null && _d !== void 0 ? _d : false;\n        return message;\n    },\n};\nfunction createBaseMuteRoomTrackResponse() {\n    return { track: undefined };\n}\nexports.MuteRoomTrackResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.track !== undefined) {\n            livekit_models_1.TrackInfo.encode(message.track, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMuteRoomTrackResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.track = livekit_models_1.TrackInfo.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return { track: isSet(object.track) ? livekit_models_1.TrackInfo.fromJSON(object.track) : undefined };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.track !== undefined && (obj.track = message.track ? livekit_models_1.TrackInfo.toJSON(message.track) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseMuteRoomTrackResponse();\n        message.track = (object.track !== undefined && object.track !== null)\n            ? livekit_models_1.TrackInfo.fromPartial(object.track)\n            : undefined;\n        return message;\n    },\n};\nfunction createBaseUpdateParticipantRequest() {\n    return { room: \"\", identity: \"\", metadata: \"\", permission: undefined, name: \"\" };\n}\nexports.UpdateParticipantRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.room !== undefined && message.room !== \"\") {\n            writer.uint32(10).string(message.room);\n        }\n        if (message.identity !== undefined && message.identity !== \"\") {\n            writer.uint32(18).string(message.identity);\n        }\n        if (message.metadata !== undefined && message.metadata !== \"\") {\n            writer.uint32(26).string(message.metadata);\n        }\n        if (message.permission !== undefined) {\n            livekit_models_1.ParticipantPermission.encode(message.permission, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.name !== undefined && message.name !== \"\") {\n            writer.uint32(42).string(message.name);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUpdateParticipantRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.room = reader.string();\n                    break;\n                case 2:\n                    message.identity = reader.string();\n                    break;\n                case 3:\n                    message.metadata = reader.string();\n                    break;\n                case 4:\n                    message.permission = livekit_models_1.ParticipantPermission.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.name = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            room: isSet(object.room) ? String(object.room) : \"\",\n            identity: isSet(object.identity) ? String(object.identity) : \"\",\n            metadata: isSet(object.metadata) ? String(object.metadata) : \"\",\n            permission: isSet(object.permission) ? livekit_models_1.ParticipantPermission.fromJSON(object.permission) : undefined,\n            name: isSet(object.name) ? String(object.name) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.room !== undefined && (obj.room = message.room);\n        message.identity !== undefined && (obj.identity = message.identity);\n        message.metadata !== undefined && (obj.metadata = message.metadata);\n        message.permission !== undefined &&\n            (obj.permission = message.permission ? livekit_models_1.ParticipantPermission.toJSON(message.permission) : undefined);\n        message.name !== undefined && (obj.name = message.name);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d;\n        const message = createBaseUpdateParticipantRequest();\n        message.room = (_a = object.room) !== null && _a !== void 0 ? _a : \"\";\n        message.identity = (_b = object.identity) !== null && _b !== void 0 ? _b : \"\";\n        message.metadata = (_c = object.metadata) !== null && _c !== void 0 ? _c : \"\";\n        message.permission = (object.permission !== undefined && object.permission !== null)\n            ? livekit_models_1.ParticipantPermission.fromPartial(object.permission)\n            : undefined;\n        message.name = (_d = object.name) !== null && _d !== void 0 ? _d : \"\";\n        return message;\n    },\n};\nfunction createBaseUpdateSubscriptionsRequest() {\n    return { room: \"\", identity: \"\", trackSids: [], subscribe: false, participantTracks: [] };\n}\nexports.UpdateSubscriptionsRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.room !== undefined && message.room !== \"\") {\n            writer.uint32(10).string(message.room);\n        }\n        if (message.identity !== undefined && message.identity !== \"\") {\n            writer.uint32(18).string(message.identity);\n        }\n        if (message.trackSids !== undefined && message.trackSids.length !== 0) {\n            for (const v of message.trackSids) {\n                writer.uint32(26).string(v);\n            }\n        }\n        if (message.subscribe === true) {\n            writer.uint32(32).bool(message.subscribe);\n        }\n        if (message.participantTracks !== undefined && message.participantTracks.length !== 0) {\n            for (const v of message.participantTracks) {\n                livekit_models_1.ParticipantTracks.encode(v, writer.uint32(42).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUpdateSubscriptionsRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.room = reader.string();\n                    break;\n                case 2:\n                    message.identity = reader.string();\n                    break;\n                case 3:\n                    message.trackSids.push(reader.string());\n                    break;\n                case 4:\n                    message.subscribe = reader.bool();\n                    break;\n                case 5:\n                    message.participantTracks.push(livekit_models_1.ParticipantTracks.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            room: isSet(object.room) ? String(object.room) : \"\",\n            identity: isSet(object.identity) ? String(object.identity) : \"\",\n            trackSids: Array.isArray(object === null || object === void 0 ? void 0 : object.trackSids) ? object.trackSids.map((e) => String(e)) : [],\n            subscribe: isSet(object.subscribe) ? Boolean(object.subscribe) : false,\n            participantTracks: Array.isArray(object === null || object === void 0 ? void 0 : object.participantTracks)\n                ? object.participantTracks.map((e) => livekit_models_1.ParticipantTracks.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.room !== undefined && (obj.room = message.room);\n        message.identity !== undefined && (obj.identity = message.identity);\n        if (message.trackSids) {\n            obj.trackSids = message.trackSids.map((e) => e);\n        }\n        else {\n            obj.trackSids = [];\n        }\n        message.subscribe !== undefined && (obj.subscribe = message.subscribe);\n        if (message.participantTracks) {\n            obj.participantTracks = message.participantTracks.map((e) => e ? livekit_models_1.ParticipantTracks.toJSON(e) : undefined);\n        }\n        else {\n            obj.participantTracks = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e;\n        const message = createBaseUpdateSubscriptionsRequest();\n        message.room = (_a = object.room) !== null && _a !== void 0 ? _a : \"\";\n        message.identity = (_b = object.identity) !== null && _b !== void 0 ? _b : \"\";\n        message.trackSids = ((_c = object.trackSids) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];\n        message.subscribe = (_d = object.subscribe) !== null && _d !== void 0 ? _d : false;\n        message.participantTracks = ((_e = object.participantTracks) === null || _e === void 0 ? void 0 : _e.map((e) => livekit_models_1.ParticipantTracks.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseUpdateSubscriptionsResponse() {\n    return {};\n}\nexports.UpdateSubscriptionsResponse = {\n    encode(_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUpdateSubscriptionsResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        return {};\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = createBaseUpdateSubscriptionsResponse();\n        return message;\n    },\n};\nfunction createBaseSendDataRequest() {\n    return {\n        room: \"\",\n        data: new Uint8Array(),\n        kind: 0,\n        destinationSids: [],\n        destinationIdentities: [],\n        topic: undefined,\n    };\n}\nexports.SendDataRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.room !== undefined && message.room !== \"\") {\n            writer.uint32(10).string(message.room);\n        }\n        if (message.data !== undefined && message.data.length !== 0) {\n            writer.uint32(18).bytes(message.data);\n        }\n        if (message.kind !== undefined && message.kind !== 0) {\n            writer.uint32(24).int32(message.kind);\n        }\n        if (message.destinationSids !== undefined && message.destinationSids.length !== 0) {\n            for (const v of message.destinationSids) {\n                writer.uint32(34).string(v);\n            }\n        }\n        if (message.destinationIdentities !== undefined && message.destinationIdentities.length !== 0) {\n            for (const v of message.destinationIdentities) {\n                writer.uint32(50).string(v);\n            }\n        }\n        if (message.topic !== undefined) {\n            writer.uint32(42).string(message.topic);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSendDataRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.room = reader.string();\n                    break;\n                case 2:\n                    message.data = reader.bytes();\n                    break;\n                case 3:\n                    message.kind = reader.int32();\n                    break;\n                case 4:\n                    message.destinationSids.push(reader.string());\n                    break;\n                case 6:\n                    message.destinationIdentities.push(reader.string());\n                    break;\n                case 5:\n                    message.topic = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            room: isSet(object.room) ? String(object.room) : \"\",\n            data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(),\n            kind: isSet(object.kind) ? livekit_models_1.dataPacket_KindFromJSON(object.kind) : 0,\n            destinationSids: Array.isArray(object === null || object === void 0 ? void 0 : object.destinationSids) ? object.destinationSids.map((e) => String(e)) : [],\n            destinationIdentities: Array.isArray(object === null || object === void 0 ? void 0 : object.destinationIdentities)\n                ? object.destinationIdentities.map((e) => String(e))\n                : [],\n            topic: isSet(object.topic) ? String(object.topic) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.room !== undefined && (obj.room = message.room);\n        message.data !== undefined &&\n            (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));\n        message.kind !== undefined && (obj.kind = livekit_models_1.dataPacket_KindToJSON(message.kind));\n        if (message.destinationSids) {\n            obj.destinationSids = message.destinationSids.map((e) => e);\n        }\n        else {\n            obj.destinationSids = [];\n        }\n        if (message.destinationIdentities) {\n            obj.destinationIdentities = message.destinationIdentities.map((e) => e);\n        }\n        else {\n            obj.destinationIdentities = [];\n        }\n        message.topic !== undefined && (obj.topic = message.topic);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f;\n        const message = createBaseSendDataRequest();\n        message.room = (_a = object.room) !== null && _a !== void 0 ? _a : \"\";\n        message.data = (_b = object.data) !== null && _b !== void 0 ? _b : new Uint8Array();\n        message.kind = (_c = object.kind) !== null && _c !== void 0 ? _c : 0;\n        message.destinationSids = ((_d = object.destinationSids) === null || _d === void 0 ? void 0 : _d.map((e) => e)) || [];\n        message.destinationIdentities = ((_e = object.destinationIdentities) === null || _e === void 0 ? void 0 : _e.map((e) => e)) || [];\n        message.topic = (_f = object.topic) !== null && _f !== void 0 ? _f : undefined;\n        return message;\n    },\n};\nfunction createBaseSendDataResponse() {\n    return {};\n}\nexports.SendDataResponse = {\n    encode(_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSendDataResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        return {};\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = createBaseSendDataResponse();\n        return message;\n    },\n};\nfunction createBaseUpdateRoomMetadataRequest() {\n    return { room: \"\", metadata: \"\" };\n}\nexports.UpdateRoomMetadataRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.room !== undefined && message.room !== \"\") {\n            writer.uint32(10).string(message.room);\n        }\n        if (message.metadata !== undefined && message.metadata !== \"\") {\n            writer.uint32(18).string(message.metadata);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUpdateRoomMetadataRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.room = reader.string();\n                    break;\n                case 2:\n                    message.metadata = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            room: isSet(object.room) ? String(object.room) : \"\",\n            metadata: isSet(object.metadata) ? String(object.metadata) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.room !== undefined && (obj.room = message.room);\n        message.metadata !== undefined && (obj.metadata = message.metadata);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseUpdateRoomMetadataRequest();\n        message.room = (_a = object.room) !== null && _a !== void 0 ? _a : \"\";\n        message.metadata = (_b = object.metadata) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\") {\n        return globalThis;\n    }\n    if (typeof self !== \"undefined\") {\n        return self;\n    }\n    if (typeof window !== \"undefined\") {\n        return window;\n    }\n    if (typeof global !== \"undefined\") {\n        return global;\n    }\n    throw \"Unable to locate global object\";\n})();\nfunction bytesFromBase64(b64) {\n    if (globalThis.Buffer) {\n        return Uint8Array.from(globalThis.Buffer.from(b64, \"base64\"));\n    }\n    else {\n        const bin = globalThis.atob(b64);\n        const arr = new Uint8Array(bin.length);\n        for (let i = 0; i < bin.length; ++i) {\n            arr[i] = bin.charCodeAt(i);\n        }\n        return arr;\n    }\n}\nfunction base64FromBytes(arr) {\n    if (globalThis.Buffer) {\n        return globalThis.Buffer.from(arr).toString(\"base64\");\n    }\n    else {\n        const bin = [];\n        arr.forEach((byte) => {\n            bin.push(String.fromCharCode(byte));\n        });\n        return globalThis.btoa(bin.join(\"\"));\n    }\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=livekit_room.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/livekit-server-sdk/dist/proto/livekit_room.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/livekit-server-sdk/dist/proto/livekit_webhook.js":
/*!***********************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/proto/livekit_webhook.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WebhookEvent = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(__webpack_require__(/*! long */ \"(action-browser)/./node_modules/long/umd/index.js\"));\nconst minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ \"(action-browser)/./node_modules/protobufjs/minimal.js\"));\nconst livekit_egress_1 = __webpack_require__(/*! ./livekit_egress */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/proto/livekit_egress.js\");\nconst livekit_ingress_1 = __webpack_require__(/*! ./livekit_ingress */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/proto/livekit_ingress.js\");\nconst livekit_models_1 = __webpack_require__(/*! ./livekit_models */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/proto/livekit_models.js\");\nexports.protobufPackage = \"livekit\";\nfunction createBaseWebhookEvent() {\n    return {\n        event: \"\",\n        room: undefined,\n        participant: undefined,\n        egressInfo: undefined,\n        ingressInfo: undefined,\n        track: undefined,\n        id: \"\",\n        createdAt: 0,\n        numDropped: 0,\n    };\n}\nexports.WebhookEvent = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.event !== undefined && message.event !== \"\") {\n            writer.uint32(10).string(message.event);\n        }\n        if (message.room !== undefined) {\n            livekit_models_1.Room.encode(message.room, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.participant !== undefined) {\n            livekit_models_1.ParticipantInfo.encode(message.participant, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.egressInfo !== undefined) {\n            livekit_egress_1.EgressInfo.encode(message.egressInfo, writer.uint32(74).fork()).ldelim();\n        }\n        if (message.ingressInfo !== undefined) {\n            livekit_ingress_1.IngressInfo.encode(message.ingressInfo, writer.uint32(82).fork()).ldelim();\n        }\n        if (message.track !== undefined) {\n            livekit_models_1.TrackInfo.encode(message.track, writer.uint32(66).fork()).ldelim();\n        }\n        if (message.id !== undefined && message.id !== \"\") {\n            writer.uint32(50).string(message.id);\n        }\n        if (message.createdAt !== undefined && message.createdAt !== 0) {\n            writer.uint32(56).int64(message.createdAt);\n        }\n        if (message.numDropped !== undefined && message.numDropped !== 0) {\n            writer.uint32(88).int32(message.numDropped);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseWebhookEvent();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.event = reader.string();\n                    break;\n                case 2:\n                    message.room = livekit_models_1.Room.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.participant = livekit_models_1.ParticipantInfo.decode(reader, reader.uint32());\n                    break;\n                case 9:\n                    message.egressInfo = livekit_egress_1.EgressInfo.decode(reader, reader.uint32());\n                    break;\n                case 10:\n                    message.ingressInfo = livekit_ingress_1.IngressInfo.decode(reader, reader.uint32());\n                    break;\n                case 8:\n                    message.track = livekit_models_1.TrackInfo.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.id = reader.string();\n                    break;\n                case 7:\n                    message.createdAt = longToNumber(reader.int64());\n                    break;\n                case 11:\n                    message.numDropped = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            event: isSet(object.event) ? String(object.event) : \"\",\n            room: isSet(object.room) ? livekit_models_1.Room.fromJSON(object.room) : undefined,\n            participant: isSet(object.participant) ? livekit_models_1.ParticipantInfo.fromJSON(object.participant) : undefined,\n            egressInfo: isSet(object.egressInfo) ? livekit_egress_1.EgressInfo.fromJSON(object.egressInfo) : undefined,\n            ingressInfo: isSet(object.ingressInfo) ? livekit_ingress_1.IngressInfo.fromJSON(object.ingressInfo) : undefined,\n            track: isSet(object.track) ? livekit_models_1.TrackInfo.fromJSON(object.track) : undefined,\n            id: isSet(object.id) ? String(object.id) : \"\",\n            createdAt: isSet(object.createdAt) ? Number(object.createdAt) : 0,\n            numDropped: isSet(object.numDropped) ? Number(object.numDropped) : 0,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.event !== undefined && (obj.event = message.event);\n        message.room !== undefined && (obj.room = message.room ? livekit_models_1.Room.toJSON(message.room) : undefined);\n        message.participant !== undefined &&\n            (obj.participant = message.participant ? livekit_models_1.ParticipantInfo.toJSON(message.participant) : undefined);\n        message.egressInfo !== undefined &&\n            (obj.egressInfo = message.egressInfo ? livekit_egress_1.EgressInfo.toJSON(message.egressInfo) : undefined);\n        message.ingressInfo !== undefined &&\n            (obj.ingressInfo = message.ingressInfo ? livekit_ingress_1.IngressInfo.toJSON(message.ingressInfo) : undefined);\n        message.track !== undefined && (obj.track = message.track ? livekit_models_1.TrackInfo.toJSON(message.track) : undefined);\n        message.id !== undefined && (obj.id = message.id);\n        message.createdAt !== undefined && (obj.createdAt = Math.round(message.createdAt));\n        message.numDropped !== undefined && (obj.numDropped = Math.round(message.numDropped));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d;\n        const message = createBaseWebhookEvent();\n        message.event = (_a = object.event) !== null && _a !== void 0 ? _a : \"\";\n        message.room = (object.room !== undefined && object.room !== null) ? livekit_models_1.Room.fromPartial(object.room) : undefined;\n        message.participant = (object.participant !== undefined && object.participant !== null)\n            ? livekit_models_1.ParticipantInfo.fromPartial(object.participant)\n            : undefined;\n        message.egressInfo = (object.egressInfo !== undefined && object.egressInfo !== null)\n            ? livekit_egress_1.EgressInfo.fromPartial(object.egressInfo)\n            : undefined;\n        message.ingressInfo = (object.ingressInfo !== undefined && object.ingressInfo !== null)\n            ? livekit_ingress_1.IngressInfo.fromPartial(object.ingressInfo)\n            : undefined;\n        message.track = (object.track !== undefined && object.track !== null)\n            ? livekit_models_1.TrackInfo.fromPartial(object.track)\n            : undefined;\n        message.id = (_b = object.id) !== null && _b !== void 0 ? _b : \"\";\n        message.createdAt = (_c = object.createdAt) !== null && _c !== void 0 ? _c : 0;\n        message.numDropped = (_d = object.numDropped) !== null && _d !== void 0 ? _d : 0;\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\") {\n        return globalThis;\n    }\n    if (typeof self !== \"undefined\") {\n        return self;\n    }\n    if (typeof window !== \"undefined\") {\n        return window;\n    }\n    if (typeof global !== \"undefined\") {\n        return global;\n    }\n    throw \"Unable to locate global object\";\n})();\nfunction longToNumber(long) {\n    if (long.gt(Number.MAX_SAFE_INTEGER)) {\n        throw new globalThis.Error(\"Value is larger than Number.MAX_SAFE_INTEGER\");\n    }\n    return long.toNumber();\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=livekit_webhook.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/livekit-server-sdk/dist/proto/livekit_webhook.js\n");

/***/ })

};
;